---
title: "Visualization in Shiny apps"
editor: visual
---

```{r include=FALSE}
pacman::p_load(
	shiny,
	htmltools,
	bs4Dash,
	fresh,
	waiter,
	shinyWidgets,
	Guerry,
	sf,
	tidyr,
	dplyr,
	RColorBrewer,
	viridis,
	leaflet,
	plotly,
	jsonlite
)

guerry <- Guerry::gfrance85 %>%
  st_as_sf() %>% # convert sp to the newer sf format
  as_tibble() %>%
  st_as_sf(crs = 27572) %>% # set the correct coordinate reference system
  mutate(Region = case_match(
    Region,
    "C" ~ "Central",
    "E" ~ "East",
    "N" ~ "North",
    "S" ~ "South",
    "W" ~ "West"
  ))

variables <- guerry %>%
  st_drop_geometry() %>%
  select(where(is.numeric) & !all_of(c("COUNT", "dept", "AVE_ID_GEO"))) %>%
  names()

guerry_region <- guerry %>%
  group_by(Region) %>%
  summarise(across(
  .cols = all_of(variables),
  function(x) {
    if (cur_column() %in% c("Area", "Pop1831")) {
      sum(x)
    } else {
      mean(x)
    }
  }
 ))
  
txts <- read_json("shinyapps/guerry/app_labels.json", simplifyVector = TRUE)
```

## Learning outcomes

You will learn how to:

-   Embed plots and diagrams from ggplot2 in Shiny apps
-   Make your plots interactive using Plotly
-   Explore issues using the power of interactive visualization dashboards

## Interactive visualization: The core of Shiny

-   Shiny offers the perfect basis for visualization

    -   Plots can be modified using UI inputs

    -   Seamless integration of interactivity elements (e.g. pan, zoom)

    -   Dashboards facilitate the idea of side-by-side comparison or provision of context

-   Examples of these concepts can be seen in many Shiny apps, one example is Edward Parker's [COVID-19 tracker](https://vac-lshtm.shinyapps.io/ncov_tracker/)

-   Further resources:

    -   [Chapter "Graphics"](https://mastering-shiny.org/action-graphics.html) in Hadley Wickham's Mastering Shiny

    -   ["Server-side linking with shiny"](https://plotly-r.com/linking-views-with-shiny.html) in Carson Sievert's Plotly book

![COVID-19 Tracker](https://raw.githubusercontent.com/eparker12/nCoV_tracker/master/www/app_image.png)

## Plotting in Shiny

-   Inserting plots in Shiny apps works just like any other UI component

-   You need two things: `plotOutput()` (or similar) in the UI and `renderPlot()` (or similar) in the server function

    -   [`plotOutput()`](https://shiny.posit.co/r/reference/shiny/1.7.4/plotoutput) creates the empty element in the UI where the plot will go

    -   [`renderPlot()`](https://shiny.posit.co/r/reference/shiny/1.7.4/renderplot) renders the plot and updates the UI element every time a reactive dependency is invalidated

-   Taking our Shiny app as an example, we add another tab:

```{r eval=F}
model <- tabItem(
	"model",
	fluidRow(
		column(
			width = 6,
	    box(
				width = 12,
				title = "Pair diagram",
				status = "primary",
				plotOutput("pairplot")
			)
		)
	)
)
```

-   Pretty easy so far!

-   On the server side we do the plotting:

```{r eval=F}
output$pairplot <- renderPlot({
	dt <- st_drop_geometry(guerry[c("Literacy", "Commerce")])
	GGally::ggpairs(dt, axisLabels = "none")
})
```

![](resources/05_01.png)

-   The code to create a plot in a Shiny app is quite simple so far, but has not many advantages over plain plotting in the R console

-   To really make it shine, we need three features:

    -   Reactivity

    -   Interactivity

    -   Comparability

## Reactivity

-   Reactivity means adding reactive dependencies

-   Currently, we hardcode the variables, but we can also make the user decide on them

-   Here, we add three user inputs

    -   [`selectInput()`](https://shiny.posit.co/r/reference/shiny/1.7.4/selectinput) to select a single x variable (defaults to Literacy)

    -   [`selectizeInput()`](https://shiny.posit.co/r/reference/shiny/1.7.4/selectinput) to select multiple y variables (defaults to Commerce)

    -   [`checkboxInput()`](https://shiny.posit.co/r/reference/shiny/1.7.4/checkboxinput) to determine whether to standardize or not

::: callout-note
To avoid overreactivity, we add an [`actionButton()`](https://shiny.posit.co/r/reference/shiny/1.7.4/actionbutton) which needs to be pressed for the user input to take effect.
:::

```{r eval=F}
model <- tabItem(
	"model",
	fluidRow(
		column(
			width = 6,
			#### Box: Select variables ----
      box(
				width = 12,
				title = "Select variables",
				status = "primary",
				selectInput(
					"model_x",
					label = "Select a dependent variable",
					choices = setNames(variables, sapply(txts, "[[", "title")),
					selected = "Literacy"
				),
				selectizeInput(
					"model_y",
					label = "Select independent variables",
					choices = setNames(variables, sapply(txts, "[[", "title")),
					multiple = TRUE,
					selected = "Commerce"
				),
				checkboxInput(
					"model_std",
					label = "Standardize variables?",
					value = TRUE
				),
				hr(),
				actionButton(
					"refresh",
					label = "Apply changes",
					icon = icon("refresh"),
					flat = TRUE
				)
			)
		),
		#### Box: Pair diagramm ----
		column(
			width = 6,
	    box(
				width = 12,
				title = "Pair diagram",
				status = "primary",
				plotOutput("pairplot")
			)
		)
	)
)
```

-   On the server side, we need to deal with the new inputs

-   We add a new reactive that cleans the data

::: callout-note
[`bindEvent`](https://shiny.posit.co/r/reference/shiny/1.7.4/bindevent) ensures that the user input is only applied when the `actionButton()` is pressed! You can try to remove this safety measure and observe how the plot struggles to keep up when selecting multiple variables.
:::

```{r eval=F}
dt <- reactive({
	x <- input$model_x
	y <- input$model_y
	dt <- sf::st_drop_geometry(guerry)[c(x, y)]
	if (input$model_std) dt <- datawizard::standardise(dt)
	dt
}) %>%
	bindEvent(input$refresh, ignoreNULL = FALSE)

output$pairplot <- renderPlot({
	GGally::ggpairs(dt(), axisLabels = "none")
})
```

![](resources/05_02.gif)

-   The plot now reacts to user input and updates its appearance when the user selection changes!

## Interactivity

-   Currently, our plot is a static image

-   Static images are fine for reports or print articles, but Shiny features much more than that

-   Base Shiny features interactive components like click, double click, hover or brush events (see [Chapter 7](https://mastering-shiny.org/action-graphics.html#dynamic-height-and-width) in Mastering Shiny)

-   Here, we'd like to go a bit further and implement Plotly plots

-   [Plotly](https://plotly.com/) is an open-source library to create charts that can be interacted with in various ways

-   It supports several programming languages including R and works seamlessly with Shiny

-   Plotly requires similar components as plain plotting:

    -   [`plotlyOutput()`](https://rdrr.io/cran/plotly/man/plotly-shiny.html) creates the UI component

    -   [`renderPlotly()`](https://rdrr.io/cran/plotly/man/plotly-shiny.html) does the plotting and updates the UI component

```{r eval=F}
model <- tabItem(
	"model",
	fluidRow(
		column(
			width = 6,
			#### Box: Select variables ----
      box(
				width = 12,
				title = "Select variables",
				status = "primary",
				selectInput(
					"model_x",
					label = "Select a dependent variable",
					choices = setNames(variables, sapply(txts, "[[", "title")),
					selected = "Literacy"
				),
				selectizeInput(
					"model_y",
					label = "Select independent variables",
					choices = setNames(variables, sapply(txts, "[[", "title")),
					multiple = TRUE,
					selected = "Commerce"
				),
				checkboxInput(
					"model_std",
					label = "Standardize variables?",
					value = TRUE
				),
				hr(),
				actionButton(
					"refresh",
					label = "Apply changes",
					icon = icon("refresh"),
					flat = TRUE
				)
			)
		),
		#### Box: Pair diagramm ----
		column(
			width = 6,
	    box(
				width = 12,
				title = "Pair diagram",
				status = "primary",
				plotly::plotlyOutput("pairplot")
			)
		)
	)
)
```

-   Plotly introduces a very comprehensive plotting system centered around the [`plot_ly()`](https://rdrr.io/cran/plotly/man/plot_ly.html) function

-   Lucky for us, all we have to do is call [`ggplotly()`](https://rdrr.io/cran/plotly/man/ggplotly.html) on our ggplot object to convert it to a plotly object

```{r eval=F}
dt <- reactive({
	x <- input$model_x
	y <- input$model_y
	dt <- sf::st_drop_geometry(guerry)[c(x, y)]
	if (input$model_std) dt <- datawizard::standardise(dt)
	dt
}) %>%
	bindEvent(input$refresh, ignoreNULL = FALSE)

output$pairplot <- plotly::renderPlotly({
	p <- GGally::ggpairs(dt(), axisLabels = "none")
	plotly::ggplotly(p) %>%
		config(
			modeBarButtonsToRemove = c(
				"sendDataToCloud", "zoom2d", "select2d", "lasso2d", "autoScale2d",
				"hoverClosestCartesian", "hoverCompareCartesian", "resetScale2d"
			),
			displaylogo = FALSE
		)
})
```

![](resources/05_03.gif)

### Extending Plotly

-   So far we made ggplot2 plots and converted them to Plotly charts using a single function call

-   Many aspects of Plotly charts remain out of control as we are not using the `plot_ly()` function

-   We can extend Plotly objects using three functions:

    -   `layout()` changes the plot organisation (think [`ggplot2::theme()`](https://ggplot2.tidyverse.org/reference/theme.html)), e.g.:

        -   colors, sizes, fonts, positions, titles, ratios and alignment of all kinds of plot elements

        -   `updatemenus` adds buttons or drop down menus that can change the plot style or layout (see [here](https://plotly.com/r/dropdowns/) for examples)

        -   `sliders` adds sliders that can be useful for time series (see [here](https://plotly.com/r/sliders/) for examples)

    -   `config()` changes interactivity configurations, e.g.:

        -   The `modeBarButtons` options and `displaylogo` control the buttons in the mode bar

        -   `toImageButtonOptions` controls the format of plot downloads

        -   `scrollZoom` enables or disables zooming by scrolling

    -   `style()` changes data-level attributes (think [`ggplot2::scale_`](https://ggplot2.tidyverse.org/reference/#scales)), e.g.:

        -   `hoverinfo` controls whether tooltips are shown on hover

        -   `mode` controls whether to show points, lines and/or text in a scatter plot

        -   `hovertext` modifies the tooltips texts shown on hover

-   The actual number of options is immense!

-   You can explore all options by calling [`plotly::schema()`](https://rdrr.io/cran/plotly/man/schema.html)

-   For our app, we can clean up the mode bar and enhance the plot download

```{r eval=FALSE}
ggplotly(p) %>%
  config(
  	modeBarButtonsToRemove = c(
	  	"sendDataToCloud", "zoom2d", "select2d", "lasso2d", "autoScale2d",
			"hoverClosestCartesian", "hoverCompareCartesian", "resetScale2d"
		),
    displaylogo = FALSE,
		toImageButtonOptions = list(
			format = "svg",
			filename = "guerry_plot",
			height = NULL, # adopt height and width as is
			width = NULL
		),
		scrollZoom = TRUE
	)
```

![](resources/05_03_config.png)

## Comparability

-   By comparability, we loosely understand how we perceive charts in context

-   Just showing a simple graph can be more than enough to convey a message

-   In many cases though, we need more than one figure to lead an argument

-   A lot of the times it helps to see figures side-by-side

-   With a little bit of creativity, Shiny can be a very competent story teller (for an impressive example, take a look at John Coene's [Freedom of Press Shiny app](https://johncoene.shinyapps.io/fopi-contest/))

-   Here, we will extend our lonely plot with a regression analysis to tell the full story of the associations of the Guerry indicators

-   We add three types of visualization: a coefficient plot, a scatter plot and a regression table

-   The three plots are tucked in a [`tabBox`](https://rinterface.github.io/bs4Dash/reference/tabBox.html), a [`bs4Dash::box`](https://rinterface.github.io/bs4Dash/reference/box.html) that supports tab panels

```{r eval=F}
model <- tabItem(
	"model",
	fluidRow(
		column(
			width = 6,
			#### Box: Select variables ----
      box(
				width = 12,
				title = "Select variables",
				status = "primary",
				selectInput(
					"model_x",
					label = "Select a dependent variable",
					choices = setNames(variables, sapply(txts, "[[", "title")),
					selected = "Literacy"
				),
				selectizeInput(
					"model_y",
					label = "Select independent variables",
					choices = setNames(variables, sapply(txts, "[[", "title")),
					multiple = TRUE,
					selected = "Commerce"
				),
				checkboxInput(
					"model_std",
					label = "Standardize variables?",
					value = TRUE
				),
				hr(),
				actionButton(
					"refresh",
					label = "Apply changes",
					icon = icon("refresh"),
					flat = TRUE
				)
			),
      #### Box: Coefficient/Scatterplot ----
			tabBox(
			  status = "primary",
			  type = "tabs",
			  width = 12,
			  ##### Tab: Coefficient plot ----
			  tabPanel(
			    title = "Plot: Coefficients",
			    plotly::plotlyOutput("coefficientplot")
			  ),
			  ##### Tab: Scatterplot ----
			  tabPanel(
			    title = "Plot: Scatterplot",
			    plotly::plotlyOutput("scatterplot")
			  ),
			  ##### Tab: Table: Regression ----
			  tabPanel(
			    title = "Table: Model",
			    htmlOutput("tableregression")
			  )
			)
		),
		#### Box: Pair diagramm ----
		column(
			width = 6,
	    box(
				width = 12,
				title = "Pair diagram",
				status = "primary",
				plotly::plotlyOutput("pairplot")
			)
		)
	)
)
```

-   **Question:** What did we add here? Which outputs need to be filled with content?

-   On the server side, we extend our reactive object with a linear regression model

```{r eval=F}
mparams <- reactive({
	x <- input$model_x
	y <- input$model_y
	dt <- sf::st_drop_geometry(guerry)[c(x, y)]
	if (input$model_std) dt <- datawizard::standardise(dt)
	form <- as.formula(paste(x, "~", paste(y, collapse = " + ")))
	mod <- lm(form, data = dt)

	list(x = x,	y = y, data = dt,	model = mod)
}) %>%
	bindEvent(input$refresh, ignoreNULL = FALSE)
```

-   From this point, we can chuck the `mparams` reactive object into all the rendering functions

```{r eval=F}
### Pair diagram ----
output$pairplot <- renderPlotly({
	p <- GGally::ggpairs(mparams()$data, axisLabels = "none")
	ggplotly(p)
})

### Plot: Coefficientplot ----
output$coefficientplot <- renderPlotly({
	params <- mparams()
	dt <- params$data
	x <- params$x
	y <- params$y

	p <- plot(parameters::model_parameters(params$model))

	ggplotly(p)
})

### Plot: Scatterplot ----
output$scatterplot <- renderPlotly({
	params <- mparams()
	dt <- params$data
	dt_labels <- params$data_labels
	x <- params$x 
	y <- params$y


	if (length(y) == 1) {
	  p <- ggplot(params$data, 
	              aes(x = .data[[params$x]], 
	                  y = .data[[params$y]])) +
	    geom_point() +
	    geom_smooth() + 
	    theme_light()
	} else {
	  p <- ggplot() +
	    theme_void() +
	    annotate("text", 
	             label = "Cannot create scatterplot.\nMore than two variables selected.", 
	             x = 0, y = 0, 
	             size = 5, 
	             colour = "red",
	             hjust = 0.5,
	             vjust = 0.5) +
	  xlab(NULL)
	  
	}

	ggplotly(p)
})

### Table: Regression ----
output$tableregression <- renderUI({
	params <- mparams()
	HTML(modelsummary(
		dvnames(list(params$model)),
	  gof_omit = "AIC|BIC|Log|Adj|RMSE"
	))
})
```

![](resources/05_04.gif)

## Full code

```{r eval=FALSE}
#| code-fold: true

library(shiny)
library(htmltools)
library(bs4Dash)
library(fresh)
library(waiter)
library(shinyWidgets)
library(Guerry)
library(sf)
library(tidyr)
library(dplyr)
library(RColorBrewer)
library(viridis)
library(leaflet)
library(plotly)
library(jsonlite)
library(ggplot2)
library(GGally)
library(datawizard)
library(parameters)
library(performance)
library(ggdark)
library(modelsummary)

# Preparation ----

## Clean ----
guerry <- Guerry::gfrance85 %>%
  st_as_sf() %>%
  as_tibble() %>%
  st_as_sf(crs = 27572) %>%
  mutate(Region = case_match(
    Region,
    "C" ~ "Central",
    "E" ~ "East",
    "N" ~ "North",
    "S" ~ "South",
    "W" ~ "West"
  ))

variables <- guerry %>%
  st_drop_geometry() %>%
  select(where(is.numeric) & !all_of(c("COUNT", "dept", "AVE_ID_GEO"))) %>%
  names()

plotly_buttons <- c(
	"sendDataToCloud", "zoom2d", "select2d", "lasso2d", "autoScale2d",
	"hoverClosestCartesian", "hoverCompareCartesian", "resetScale2d"
)

## Create theme ----
dash_theme <- create_theme(
  bs4dash_status(
    primary = "#58748f",
    secondary = "#666666",
    info = "#E6EAEE",
    danger = "#BF616A",
    warning = "#FF6100",
    light = "#F4F4F2",
    dark = "#2c2c25"
  ),
  bs4dash_layout(
    font_size_root = "5rem",
    main_bg = "#FDFDFD",
    sidebar_width = "350px"
  ),
  bs4dash_sidebar_light(bg = "#F4F4F2", color = "#000"),
  bs4dash_sidebar_dark(bg = "#2c2c25", color = "#FFF"),
  bs4dash_color(
  	orange = "#F06400",
    white = "#FDFDFD",
    black = "#000",
    gray_600 = "#666",
    gray_800 = "#333",
    gray_900 = "#000",
    blue = "#58748f"
  ),
  bs4dash_font(
    family_sans_serif = "Verdana",
    family_base = "Georgia",
    family_monospace = "Courier New"
  )
)

## Preloader ----
preloader <- list(
  html = tagList(spin_6(), "Loading ..."),
  color = "#B3DDFE"
)



# UI ----

ui <- dashboardPage(
  title = "The Guerry Dashboard",
  freshTheme = dash_theme,
  preloader = preloader,
  ## Header ----
  header = dashboardHeader(
    tags$style("
      /* remove white space from header */
      .navbar {
        padding-top: 0em;
        padding-bottom: 0em;
        padding-right: 0em;
      }
    "),
    span(style = "display: inline-block; width: 100%;"),
    a(
      class = "logo",
      href = "https://gesis.org/",
      img(src = "gesis-logo.png", style = "height: 1.8em;")
    ),
    title = tagList(
      img(src = "workshop-logo.png", width = 35, height = 35),
      span("The Guerry Dashboard", class = "brand-text")
    ),
    skin = "light",
    sidebarIcon = tags$i(class = "fa fa-bars", style = "color: black;")
  ),
  ## Sidebar ----
  sidebar = dashboardSidebar(
  	id = "sidebar",
  	sidebarMenu(
  		id = "sidebarMenu",
  		menuItem(tabName = "intro", text = "Introduction", icon = icon("home")),
  		menuItem(tabName = "insp", text = "Inspect data", icon = icon("table")),
  		menuItem(tabName = "model", text = "Model data", icon = icon("chart-line"), selected = TRUE),
  		flat = TRUE
  	),
  	minified = TRUE,
  	collapsed = TRUE,
  	fixed = FALSE,
  	skin = "light"
  ),
  ## Body ----
  body = dashboardBody(
    tags$head(
      waiter::use_waiter(),
      includeCSS("../www/styles.css")
    ),
    tabItems(
    	tabItem("intro"),
    	tabItem("insp"),
    	tabItem(
    		"model",
    		fluidRow(
    			column(
    				width = 6,
    				#### Box: Select variables ----
    				box(
    					width = 12,
    					title = "Select variables",
    					status = "primary",
    					selectInput(
    						"model_x",
    						label = "Select a dependent variable",
    						choices = setNames(variables, sapply(txts, "[[", "title")),
    						selected = "Literacy"
    					),
    					selectizeInput(
    						"model_y",
    						label = "Select independent variables",
    						choices = setNames(variables, sapply(txts, "[[", "title")),
    						multiple = TRUE,
    						selected = "Commerce"
    					),
    					checkboxInput(
    						"model_std",
    						label = "Standardize variables?",
    						value = TRUE
    					),
    					hr(),
    					actionButton(
    						"refresh",
    						label = "Apply changes",
    						icon = icon("refresh"),
    						flat = TRUE
    					)
    				),
    				#### Box: Coefficient/Scatterplot ----
    				tabBox(
    					status = "primary",
    					type = "tabs",
    					width = 12,
    					##### Tab: Coefficient plot ----
    					tabPanel(
    						title = "Plot: Coefficients",
    						plotly::plotlyOutput("coefficientplot")
    					),
    					##### Tab: Scatterplot ----
    					tabPanel(
    						title = "Plot: Scatterplot",
    						plotly::plotlyOutput("scatterplot")
    					),
    					##### Tab: Table: Regression ----
    					tabPanel(
    						title = "Table: Model",
    						htmlOutput("tableregression")
    					)
    				)
    			),
    			#### Box: Pair diagramm ----
    			column(
    				width = 6,
    				box(
    					width = 12,
    					title = "Pair diagram",
    					status = "primary",
    					plotly::plotlyOutput("pairplot")
    				)
    			)
    		)
    	)
    ) # end tabItems
  ),
  ## Controlbar (top)----
  controlbar = dashboardControlbar(
    div(class = "p-3", skinSelector()),
  	skin = "light"
  ),
  ## Footer (bottom)----
  footer = dashboardFooter(
  	left = span(
  		"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code",
  		a("here.", href = "https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry"),
  		"It is based on data from the",
  		a("Guerry R package.", href = "https://cran.r-project.org/web/packages/Guerry/index.html")
  	)
  )
)



# Server ----

server <- function(input, output, session) {
	mparams <- reactive({
		x <- input$model_x
		y <- input$model_y
		dt <- sf::st_drop_geometry(guerry)[c(x, y)]
		if (input$model_std) dt <- datawizard::standardise(dt)
		form <- as.formula(paste(x, "~", paste(y, collapse = " + ")))
		mod <- lm(form, data = dt)
		
		list(x = x,	y = y, data = dt,	model = mod)
	}) %>%
		bindEvent(input$refresh, ignoreNULL = FALSE)
	
	### Pair diagram ----
	output$pairplot <- renderPlotly({
		p <- GGally::ggpairs(mparams()$data, axisLabels = "none")
		ggplotly(p)
	})
	
	### Plot: Coefficientplot ----
	output$coefficientplot <- renderPlotly({
		params <- mparams()
		dt <- params$data
		x <- params$x
		y <- params$y
		
		p <- plot(parameters::model_parameters(params$model))
		
		ggplotly(p)
	})
	
	### Plot: Scatterplot ----
	output$scatterplot <- renderPlotly({
		params <- mparams()
		dt <- params$data
		dt_labels <- params$data_labels
		x <- params$x 
		y <- params$y
		
		
		if (length(y) == 1) {
			p <- ggplot(params$data, 
									aes(x = .data[[params$x]], 
											y = .data[[params$y]])) +
				geom_point() +
				geom_smooth() + 
				theme_light()
		} else {
			p <- ggplot() +
				theme_void() +
				annotate("text", 
								 label = "Cannot create scatterplot.\nMore than two variables selected.", 
								 x = 0, y = 0, 
								 size = 5, 
								 colour = "red",
								 hjust = 0.5,
								 vjust = 0.5) +
				xlab(NULL)
			
		}
		
		ggplotly(p)
	})
	
	### Table: Regression ----
	output$tableregression <- renderUI({
		params <- mparams()
		HTML(modelsummary(
			dvnames(list(params$model)),
			gof_omit = "AIC|BIC|Log|Adj|RMSE"
		))
	})
}

shinyApp(ui, server)
```

## Exercise

::: callout-note
## Exercise 1

Thinking back to our initial visualization structure (data selection, data exploration, data modelling, ???), what could be a good last step? What type of visualization can enhance our understanding of the relationship among the Guerry variables? Write down your ideas along with possible types of visualizations.
:::

::: {.callout-tip collapse="true"}
Visit the [R graph gallery](https://r-graph-gallery.com/) or the [R Plotly gallery](https://plotly.com/r/) to get inspired!
:::

::: callout-note
## Exercise 2

Add a fourth quadrant in the dashboard layout. Also add a box that will hold the content.
:::

::: {.callout-tip collapse="true"}
Don't forget about the use of `fluidRow()` and `column()`! The new quadrant goes right below the pair plot in the second column:

```{r eval=FALSE}
fluidRow(
	column(
		width = 6,
		box(width = 12), # quadrant 1: data selection
		box(width = 12) # quadrant 3: regression
	),
	column(
		width = 6,
		box(width = 12), # quadrant 2: pair plot
		box(width = 12) # quadrant 4: ???
	)
)
```
:::

**Exercise 1:** Thinking back to our initial visualization structure (data selection, data exploration, data modelling, ???), what could be a good last step? What type of visualization can enhance our understanding of the relationship among the Guerry variables? Write down your ideas along with possible types of visualizations.

**Exercise 2:** Implement your additional visualization from exercise 1 in the modelling tab. Add a fourth box to the dashboard panel, add a UI output and render your chart in the server function.
