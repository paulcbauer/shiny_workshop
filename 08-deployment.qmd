---
title: "Strengthen & Deploy"
---

# Learning outcomes

You will learn how to:

-   Test the performance of your app

-   Deploy your app to a common Shiny platform

# Deploying Shiny apps

-   When running a Shiny app using [`runApp()`](https://shiny.posit.co/r/reference/shiny/1.7.0/runapp), you host it on a local server, i.e. it remains in your local network

-   Deploying a Shiny app means making your app available to other users!

-   Deployment is the last step of app development

## Strengthen

-   Before it's time to deploy, it's a good idea to make sure your app passes the test of publicity

-   Depending on the use case and target group, a deployed app should be:

    -   **fast:** remote communication can make your app slower than on a local host

    -   **scalable:** a high workload can crash your app

    -   **stable:** errors also crash your app

## Tools to strengthen

-   There are a lot of Shiny extensions that help in strengthening a Shiny app, some of which we will address:

    -   [`profvis`](https://rstudio.github.io/profvis/): Profiles a Shiny app and creates performance visualizations

    -   [`reactlog`](https://rstudio.github.io/reactlog/): Logs reactivity of your Shiny app and creates a dynamic reactive graph

    -   [`shinyloadtest`](https://rstudio.github.io/shinyloadtest/): Simulates a workload of users and determines how well your app is suitable for such a workload

    -   [`shinytest`](https://rstudio.github.io/shinytest/): Creates snapshots and compares the visual appearance of them in subsequent runs

    -   [`shiny::testServer()`](https://shiny.posit.co/r/reference/shiny/1.6.0/testserver): Performs programmatic tests using the Shiny server logic of an app

## Further resources

-   Chapters [11](https://engineering-shiny.org/build-yourself-safety-net.html#testing-the-interactive-logic) and [13](https://engineering-shiny.org/deploy.html) of Colin Fay's Engineering Production-Grade Shiny Apps

-   Chapters [21](https://mastering-shiny.org/scaling-testing.html) and [23](https://mastering-shiny.org/performance.html) of Hadley Wickham's Mastering Shiny

# Performance profiling

-   Profiling means recording how much time and memory certain actions in your Shiny app need

-   Useful for testing performance or **speed** of your app

-   Performance profiling in Shiny can be done with the `profvis` package

## Using the `profvis` package

-   Simply run your app within a `profvis::profvis()` call:

```{r eval=FALSE}
profvis({runApp()})
```

::: callout-note
It is necessary to use `runApp()`, `shinyApp()` does not suffice!
:::

-   Then, perform some tasks in the Shiny app

-   Close the app, and an HTML file will open that looks something like below:

```{r echo=FALSE}
htmltools::tags$iframe(src = "shinyapps/guerry/guerry_profvis.html", width = "100%", height = "800px")
```

# Reactivity logging

-   Reactivity logging means capturing and visualizing reactive dependencies in Shiny apps

-   Useful for detecting overreactiveness and reactive **instabilities**

-   Reactivity logging can be done using the `reactlog` package

## Using the `reactlog` package

-   Run [`reactlog::reactlog_enable()`](https://rstudio.github.io/reactlog/reference/setReactLog.html) before running the Shiny app or set `options(shiny.reactlog = TRUE)`

-   Do stuff in your Shiny app (particularly something that triggers dependencies!)

-   Run [`shiny::reactlogShow()`](https://shiny.posit.co/r/reference/shiny/1.3.1/reactlog.html) or [`reactlog::reactlog_show()`](https://rstudio.github.io/reactlog/reference/reactlog_show.html) after closing the app

-   Alternatively, press `Strg + F3` while the app is running

```{r echo=FALSE}
htmltools::tags$iframe(src = "shinyapps/guerry/guerry_reactlog.html", width = "100%", height = "500px")
```

# Load testing

# Deployment

-   The deployment of Shiny apps is restricted to servers that support Shiny apps

-   You can either set up a custom Shiny server or use a server provider

## Where to deploy

| Name                                                                         | Use                                      | Requirements                   |
|-----------------------------------|-------------------|------------------|
| [shinyapps.io](https://www.shinyapps.io/)                                    | Casual to professional applications      | `rsconnect` R package          |
| [Posit Connect](https://posit.co/products/enterprise/connect/)               | Professional to corporate applications   | `rsconnect` R package          |
| [Shiny Server](https://posit.co/products/open-source/shinyserver/)           | Setting up self-hosted Shiny servers     | Shiny Server on a Linux server |
| [ShinyProxy](https://www.shinyproxy.io/) / [Heroku](https://www.heroku.com/) | Deployment of containerized applications | Docker                         |

: Shiny app hosting

## shinyapps.io

-   A common choice for more casual Shiny apps is shinyapps.io

    -   It requires not much technical knowledge to deploy

    -   It does not require a pre-existing infrastructure (e.g., a server)

    -   It offers a free plan

![Shinyapps.io plans](resources/shinyapps_plans.png)

## `rsconnect`

-   Both for Posit Connect and shinyapps.io you need the [`rsconnect`](https://rstudio.github.io/rsconnect/) package

-   `rsconnect` enables the communication between the Posit services and R

```{=html}
<!-- -->
```
-   `rsconnect` is built around the [`deployApp()`](https://rstudio.github.io/rsconnect/reference/deployApp.html), [`deployAPI()`](https://rstudio.github.io/rsconnect/reference/deployAPI.html) and [`deployDoc()`](https://rstudio.github.io/rsconnect/reference/deployDoc.html) functions

## Creating an account

-   Before being able to deploy to Shinyapps, we need an account
-   Accounts can be created per Email or using Google, Github or Clever

![Shinyapps.io sign-up](resources/shinyapps_signup.png)

## Connecting R to shinyapps.io

-   Just with any interface, linking works using Tokens and Secrets

-   On your shinyapps dashboard, navigate to Account -\> Tokens on the sidebar

-   Click on "Add Token"

-   Click on "Show" next to your newly created token

-   Paste the code into your console and execute

![Shinyapps token to connect with `rsconnect`](resources/shinyapps_token.png)

## Deploy!

-   To verify that the verification process was successful we run:

```{r eval=FALSE}
rsconnect::accounts()
```

-   Finally, to deploy an app, we simply run `deployApp()` to deploy an `app.R` in the current working directory to shinyapps.io:

```{r eval=FALSE}
rsconnect::deployApp()
```
