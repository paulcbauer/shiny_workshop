---
title: "Build your own app"
---

```{r, include=FALSE}
library(dplyr)
library(shiny)
library(haven)
library(sf)
```


-   Learning outcomes:
    -   Become proficient in designing and developing a Shiny app from start to finish
    -   Develop and sketch out ideas about interactive visualization as Shiny app prototypes
    -   Acquire a holistic understanding of the Shiny development workflow
    -   Good practices for everyday Shiny programming

# Schedule for today

| Time          | Topic                                                |
|---------------|------------------------------------------------------|
| 10:00 - 11:00 | **Good practices when building your own app**        |
| 11:00 - 11:15 | Coffee break                                         |
| 11:15 - 12:00 | **Build your own app: Design and UI**                |
| 12:00 - 13:00 | Lunch break                                          |
| 13:00 - 14:15 | **Build your own app: Construct the reactive graph** |
| 14:15 - 14:30 | Coffee break                                         |
| 14:30 - 15:30 | **Build your own app: Strengthen & deploy**          |
| 15:30 - 16:00 | **Exhibit: Show off your new Shiny app**             |

This schedule is mostly a **suggestion**! Depending on the type of app you are building, some of these tasks require more or less time.
  
  
# Good practices

## Use Large Language Models (LLMs)
* LLMs increase productivity and we recommend using it regularly (get used to it)


### Attention: Hallucination
* Attention: Always cross-validate the information given by a LLM
  + Why? Hallucination.. (see characterization statements on [Wikipedia](https://en.wikipedia.org/wiki/Hallucination_(artificial_intelligence)))
    - "a tendency to invent facts in moments of uncertainty" (OpenAI, May 2023)
    - "a model's logical mistakes" (OpenAI, May 2023)
    - fabricating information entirely, but behaving as if spouting facts (CNBC, May 2023)
    - "making up information" (The Verge, February 2023)
* Very good overview on [Wikipedia](https://en.wikipedia.org/wiki/Hallucination_(artificial_intelligence))
* Discussions in @Zhang2023-ok, @Huang2023-zf and @Metz2023-qz
* Problem less relevant when asking LLMs for function code because you check/test it yourself

### Avaible LLMs
* Closed-source
  + ChatGPT X (OpenAI, ~Microsoft): https://chat.openai.com/
  + Gemini (Google) https://gemini.google.com/
  + Amazon Titan: https://aws.amazon.com/bedrock/titan/
* Open-source
  + HuggingChat: https://huggingface.co/chat/
  + LAMA: https://github.com/facebookresearch/LAMA
* [Curated list of papers about large language models](https://github.com/Hannibal046/Awesome-LLM)
* [Top Open-Source LLMs for 2024 and Their Uses](https://www.datacamp.com/blog/top-open-source-llms)

### Useful prompts
* LLMs can be used to...
  + ...code & understand code.
  + ...solve data management tasks.
  + ...solve data visualization tasks.
  + ...solve modeling tasks.
  + ...understand statistical theory.
* Some exemplary prompts in the sections below.


### Prompts: code & understand code/functions

```
Please explain what the shiny app below does. How does it work and what is it's logic.

ui <- fluidPage(
  textInput("name", "What's your name?"),
  textOutput("greeting")
)

server <- function(input, output, session) {
  output$greeting <- renderText({
    paste0("Hello ", input$name, "!")
  })
}
shinyApp(ui, server)
```

Followed by:
```
Please add ... to the shiny app.
```


```
Please explain the hyperparamters in this model:

xgb_spec <- boost_tree(
  trees = 1000,
  tree_depth = tune(), min_n = tune(),
  loss_reduction = tune(),                     ## first three: model complexity
  sample_size = tune(), mtry = tune(),         ## randomness
  learn_rate = tune()                          ## step size
) %>%
  set_engine("xgboost") %>%
  set_mode("classification")
```



Followed by:


```
Please further explain the learn_rate.

```



### Prompts: Data management & preparation

```
Please provide dplyr code to rename the following variables and give them better names (lowercaps). Below is the codebook:

pdwrk - Doing last 7 days: paid work
edctn - Doing last 7 days: education
uempla - Doing last 7 days: unemployed, actively looking for job
uempli - Doing last 7 days: unemployed, not actively looking for job
dsbld - Doing last 7 days: permanently sick or disabled
rtrd - Doing last 7 days: retired
cmsrv - Doing last 7 days: community or military service
hswrk - Doing last 7 days: housework, looking after children, others
dngoth - Doing last 7 days: other
dngref - Doing last 7 days: refusal
dngdk - Doing last 7 days: don't know
dngna - Doing last 7 days: no answer
```


<br><br>



```
How do I need to prepare and preprocess the data if I want to built a Naive Bayes classifier?


What is particular in data preparation for Naive Bayes that is not necessary for other machine learning models?


How should I ideally preprocess the data that I feed into a Naive Bayes classifier?


I want to build a Naive Bayes Classifier. Please outline the preprocessing steps that you would recommend and provide tidymodels recipe code that includes those step.
Please write the code into a single recipe.
```

 


### Prompts: Data visualization



```
I have a dataset called "data" that includes the variable age. Please provide me with ggplot code to produce a histogram.
```


```
Please explain the ggplot2 code (add comments to the code).
```


```
I want to change the x-axis lables (angle 50%) in the ggplot2 code below:
```


```
I can I encode data dimensions in a graph? What possibilities do I have?
```


```
How can I ideally visualize a linegraph where the two lines are perfectly overlapping each other but I want to visualize just that.
```


```
How can I translate the code below when I want to use the sf package in R instead of rgdal?

readOGR(dsn="www/data", layer="VG250_GEM", encoding = "ASCII", verbose = FALSE)
```


#### ChatGPT4o: Upload data & generate plot
1. Load the data into R (here we use the preloaded `swiss` dataset)

2. Run the code below 

```
# Load necessary packages
	# install.packages("synthpop")
	library(datasets)
	library(synthpop)
	library(readr)

# Load the dataset
	data <- swiss # load your own dataset here

# View the original swiss dataset
	head(data)

# Generate synthetic data to anonymize the original dataset
# The syn function will generate synthetic data while preserving the structure and statistical properties
	synth_data <- syn(data)

# View the synthetic data
	head(synth_data$syn)

# Replace the original data with the synthetic data
	data <- synth_data$syn

# View the modified dataset to ensure it has been replaced correctly
	head(data)

# Save the new dataset locally
	write_csv(data, "data_fake.csv")
```


2. Upload `data_fake.csv` and @fig-coefficient-plot234 (this is just an example) into ChatGPT4o.

```{r fig-coefficient-plot234, echo=FALSE, fig.width=5, fig.height=3,fig.align='center'}
#| label: fig-coefficient-plot234
#| fig-cap: "Coefficient plot"
library(tidyverse)
library(broom)
fit <- lm(Fertility ~ Catholic + Agriculture + Education, data = swiss) # see ?swiss
data_coefs <- tidy(fit, conf.int = TRUE, conf.level = 0.95)

data_coefs <- data_coefs %>%
           rename(Variable = term,
                  Coefficient = estimate,
                  SE = std.error) %>%
           filter(Variable != "(Intercept)")

ggplot(data_coefs, aes(x = Variable, y = Coefficient)) +
        geom_hline(yintercept = 0, colour = gray(1/2), lty = 2) +
        geom_point(aes(x = Variable, 
                    y = Coefficient)) + 
        geom_linerange(aes(x = Variable, 
                     ymin = conf.low,
                     ymax = conf.high),
                   lwd = 0.5) +
        ggtitle("Outcome: Fertility") +
        coord_flip()
```



3. Use the following prompt. If the plot is not based on that particular dataset, i.e., include the variable names of the dataset, you may have to also add which variables should be mapped in which way.

`I uploaded a dataset and a plot. Please provide me the ggplot2 code that I need to produce that plot based on the data in one code chunk.`

4. As a follow-up you can refine the plot code through prompts (`"Please omit the intercept from the plot"`).


### Prompts: Modeling

```
What is the difference between a logistic regression model and naive bayes in the machine learning context?


Which machine learning models that we can use for classification have a problem with class imbalance?
```



## Use the browser inspector

- Browser inspectors are an extremely powerful tool that goes far beyond the scope of this workshop
- It can be used to take a deep look at a website
  - What colors and fonts are used?
  - How would the Shiny app look like on different screen sizes?
  - How would the Shiny app look like to color-blind people?
  - How are UI elements translated to HTML and CSS?
  - How are widths and heights translated to pixels?
  - Which HTTP requests are sent when running the Shiny app?
  - Does my website evoke any client-side errors?
  - ... and a lot more

### Browser inspectors in the wild

- Every popular browser has its own implementation of an inspector
  - [Firefox Page Inspector](https://firefox-source-docs.mozilla.org/devtools-user/page_inspector/)
  - [Chrome DevTools](https://developer.chrome.com/docs/devtools)
  - [Opera Web Inspector](https://dev.opera.com/extensions/testing/)
  - [Edge Inspect Tool](https://learn.microsoft.com/en-en/microsoft-edge/devtools-guide-chromium/css/inspect)
  - [Safari Web Inspector](https://developer.apple.com/documentation/safari-developer-tools/web-inspector)

![Simulating an iPad view using the Firefox Page Inspector](resources/firefox-inspect.png)
  

### Pros and Cons  

- Inspectors are useful for:
  - Conveying an understanding of essential HTML and CSS
  - Fine-tuning the UI of a Shiny app
  - Implementing corporate designs
- Inspectors are **excessive** if:
  - The goal is primarily to get a functioning app
  - Exploring a new elaborate tool beyond Shiny is a bit too much


## Organize your code

- Shiny code becomes messy **really** quick!
- It is even more important than in normal code to keep code clean and tidy
- Why should I organize my code?
  - It is easier for colleagues to quickly grasp what your code does
  - It is easier for you to get back to your project after some time
  - Programming with organized code is much faster and much more fun


### Functional programming
- Wrap code in functions if:
  - It is repeated more than two times
  - It is complex and might profit from abstraction
- Bad:
```{r, eval=FALSE}
exp(mean(log(iris$Sepal.Length)))
exp(mean(log(iris$Sepal.Width)))
exp(mean(log(iris$Petal.Length)))
exp(mean(log(iris$Petal.Width)))
```
- Good:
```{r, eval=FALSE}
geometric_mean <- function(x) exp(mean(log(x)))
summarize(iris, across(where(is.numeric), geometric_mean))
```
  
### Stick to a style guide
- Adopting a consistent coding style drastically improves readability for yourself and contributors
- The [styler](https://styler.r-lib.org/) and [lintr](https://lintr.r-lib.org/) packages automatically check your code for style inconsistencies, bad practictes, and possible syntactic/semantic errors
- The following code is valid, but deciphering what's going on might take a while
  
```{r, eval=FALSE}
ui<-fluidPage(selectInput("var"
            ,"Variable",names(mtcars))
  ,numericInput("bins","bins",10,min= 1),plotOutput("hist"))
server<-
function(
input,output,session
) {
  data<-
    reactive(
             mtcars[[input$var]]
    )
  output$hist<-
    renderPlot(
    {hist(data()
          ,breaks=input$bins
          ,main=input$var)},res =96
)}
```

  
### Annotate your code

- Even in smaller apps, Shiny code is multiple hundred lines long
- RStudio annotations can help navigate large R code files

```{r}
# Header 1 ----
## Header 1.1 ----
### Header 1.1.1 ----
### Header 1.1.2 ----
# Header 2 ----
```
  
  ![Example of an RStudio outline](resources/rstudio_toc.png)
  
### Modularize your Shiny code
- If your Shiny app is divided into multiple tabs or sections, it might make sense to wrap it into modules
- By modularizing, you divide a large Shiny app into multiple smaller pieces that are isolated from each other
- Modularization is a very advanced topic and there is an [entire chapter in Mastering Shiny](https://mastering-shiny.org/scaling-modules.html) -- but it is good to know that it's possible
  
![Example of a modularized app](https://d33wubrfki0l68.cloudfront.net/3d9a229fec717ef7bfda8e17a9c9d4fdc66b8b08/953f7/diagrams/scaling-modules/after.png)
  
### Build your Shiny app as a package
- This tip is particularly useful for larger apps
- The idea is to build a robust scaffold around the Shiny app
- A number of R packages specialize on this task: [Rhino](https://appsilon.github.io/rhino/) [golem](https://thinkr-open.github.io/golem/), and [leprechaun](https://leprechaun.opifex.org/)
- Benefits:
  - Automatically handles dependencies, no more `library` and `there is no package called ‘xxx’`
  - Facilitates sharing Shiny apps without deployment
  - Supports multiple Shiny apps in one app
  - Enables testing workflows and thus more robust code
  - All R code files in one place





# Data

-   To build your Shiny app, we suggest one of the following datasets

## Bring your own dataset

-   If you already have a dataset that you want to build an app around, feel free to do this today!

## European social survey - wave 9

-   We used this dataset alongside the workshop
-   It contains data on political trust, political spectrum, demographics, internet use, happiness, and income
-   The dataset contains `haven` labels which help understand the scales of each variables
-   Base information:
    -   Region: Europe
    -   Time: 2018
    -   Observations: 49,519
    -   Variables: 14
-   How to read the data:

```{r, eval=FALSE}
library(haven) # the haven package has to be attached
ess <- readRDS("ess_trust.rds")
ess
```

```{r, echo=FALSE}
readRDS("data/ess_trust.rds")
```

-   Datamap:

| Column              | Description                                                                                                                                                                                     |
|----------------|--------------------------------------------------------|
| `idno`              | Respondent ID                                                                                                                                                                                   |
| `country`           | Country ID                                                                                                                                                                                      |
| `internet_use`      | People can use the internet on different devices such as computers, tablets and smartphones. How often do you use the internet on these or any other devices, whether for work or personal use? |
| `trust_parliament`  | How much do you personally trust the national parliament?                                                                                                                                       |
| `trust_legal`       | How much do you personally trust the legal system?                                                                                                                                              |
| `trust_police`      | How much do you personally trust the police?                                                                                                                                                    |
| `trust_politicians` | How much do you personally trust politicians?                                                                                                                                                   |
| `trust_parties`     | How much do you personal trust political parties?                                                                                                                                               |
| `trust_eu`          | How much do you personally trust the European parliament?                                                                                                                                       |
| `trust_un`          | How much do you personally trust the United Nations?                                                                                                                                            |
| `left_right`        | In politics people sometimes talk of 'left' and 'right'. Where would you place yourself on this scale, where 0 means the left and 10 means the right?                                           |
| `happiness`         | Taking all things together, how happy would you say you are?                                                                                                                                    |
| `age`               | Age of the respondent                                                                                                                                                                           |
| `income_feeling`    | Which of the descriptions on this card comes closest to how you feel about your household's income nowadays?                                                                                    |

## Guerry dataset

-   This dataset stems from the "Essay on the Moral Statistics of France" from 1830, written by André-Michel Guerry
-   It features a number of indicators of the so-called "moral statistics", including crime, literacy, wealth, donations, and more
-   The dataset is an `sf` dataset containing department polygons of 19th century France – it may thus be convenient for creating an app using `leaflet` maps
-   Base information:
    -   Region: France
    -   Time: 1815-1834
    -   Observations: 85
    -   Variables: 27
    -   Source: <https://sfdep.josiahparry.com/reference/guerry>
-   How to read the data:

```{r}
guerry <- readRDS(url("https://github.com/paulcbauer/shiny_workshop/raw/shiny_workshop_2024/data/guerry.rds"))
guerry
```

-   Datamap:

| Column            | Description                                                                                            |
|-----------------|-------------------------------------------------------|
| `dept`            | Department ID                                                                                          |
| `region`          | Region of France (‘N’=’North’, ‘S’=’South’, ‘E’=’East’, ‘W’=’West’, ‘C’=’Central’)                     |
| `department`      | Department name                                                                                        |
| `crime_pers`      | Population per crime against persons                                                                   |
| `crime_prop`      | Population per crime against property                                                                  |
| `literacy`        | Percent of military conscripts who can read and write                                                  |
| `donations`       | Number of donations to the poor                                                                        |
| `infants`         | Population per illegitimate birth                                                                      |
| `suicides`        | Population per suicide                                                                                 |
| `main_city`       | Size of the principal city (‘1:Sm’, ‘2:Med’, ‘3:Lg’)                                                   |
| `wealth`          | Per capita tax on personal property                                                                    |
| `commerce`        | Rank of the number of patents per population                                                           |
| `clergy`          | Rank of the number of Catholic priests in active service population                                    |
| `crime_parents`   | Rank of the ratio of crimes against parents to all crimes                                              |
| `infanticide`     | Number of infanticides per population                                                                  |
| `donation_clergy` | Number of bequests and donations to the clergy per population                                          |
| `lottery`         | Per capita wager on Royal Lottery                                                                      |
| `desertion`       | Number of soldiers accused of desertion minus the deficit produced by insuffiency of available billets |
| `instruction`     | Inverse literacy                                                                                       |
| `prostitutes`     | Number of prostitutes registered in Paris                                                              |
| `distance`        | Distance to paris in km                                                                                |
| `area`            | Area in km²                                                                                            |
| `pop1831`         | Population in 1831, in thousands                                                                       |

# Exercises

::: callout-note
#### Exercise 1: 11:15 - 12:00

Taking one of the datasets introduced above – ESS, Guerry, or your own dataset, reflect on a possible Shiny app that you can build using the dataset. Create a sketch and design a prototype of the user interface based on this sketch.
:::

::: callout-note
#### Exercise 2: 13:00 - 14:15

Based on the prototype developed in exercise 1, sketch a reactive graph. Try to implement this reactive system in the server function of your app.
:::

::: callout-note
#### Exercise 3: 14:30 - 15:30

Deploy the app created in the last exercise using either <https://www.shinyapps.io/> or `shinylive`.
:::