[
  {
    "objectID": "09-guerry-app-all-code.html",
    "href": "09-guerry-app-all-code.html",
    "title": "Guerry app: All the code",
    "section": "",
    "text": "1 Guerry app code\n\nBelow you can find the complete code to built the Guerry app.\n\n\n\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(fresh)\nlibrary(waiter)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(viridis)\nlibrary(leaflet)\nlibrary(plotly)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(datawizard)\nlibrary(parameters)\nlibrary(performance)\nlibrary(ggdark)\nlibrary(modelsummary)\nlibrary(see)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\nvariable_desc &lt;- list(\n  Crime_pers = list(\n    title = \"Crime against persons\",\n    desc = as.character(p(tags$b(\"Crime against persons:\"), \"Population per crime against persons\", hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Crime_prop = list(\n    title = \"Crime against property\",\n    desc = as.character(p(tags$b(\"Crime against property:\"), \"Population per crime against property\", hr(), helpText(\"Source: Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Literacy = list(\n    title = \"Literacy\",\n    desc = as.character(p(tags$b(\"Percent Read & Write:\"), \"Percent of military conscripts who can read and write\", hr(), helpText(\"Source: Table A2 in Guerry (1833)\"))),\n    lgd = \"Literacy\",\n    unit = \" %\"\n  ),\n  Donations = list(\n    title = \"Donations to the poor\",\n    desc = as.character(p(tags$b(\"Donations to the poor\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bulletin des lois\"))),\n    lgd = \"Donations\",\n    unit = \"\"\n  ),\n  Infants = list(\n    title = \"Illegitimate births\",\n    desc = as.character(p(tags$b(\"Population per illegitimate birth\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bureau des Longitudes, 1817-1821\"))),\n    lgd = \"Pop. per birth\",\n    unit = \"\"\n  ),\n  Suicides = list(\n    title = \"Suicides\",\n    desc = as.character(p(tags$b(\"Population per suicide\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1827-1830\"))),\n    lgd = \"Pop. per suicide\",\n    unit = \"\"\n  ),\n  Wealth = list(\n    title = \"Tax / capita\",\n    desc = as.character(p(tags$b(\"Per capita tax on personal property:\"), \"A ranked index based on taxes on personal and movable property per inhabitant\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Tax / capita\",\n    unit = \"\"\n  ),\n  Commerce = list(\n    title = \"Commerce & Industry\",\n    desc = as.character(p(tags$b(\"Commerce & Industry:\"), \"Commerce and Industry, measured by the rank of the number of patents / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Patents / capita\",\n    unit = \"\"\n  ),\n  Clergy = list(\n    title = \"Clergy\",\n    desc = as.character(p(tags$b(\"Distribution of clergy:\"), \"Distribution of clergy, measured by the rank of the number of Catholic priests in active service / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Almanach officiel du clergy, 1829\"))),\n    lgd = \"Priests / capita\",\n    unit = \"\"\n  ),\n  Crime_parents = list(\n    title = \"Crime against parents\",\n    desc = as.character(p(tags$b(\"Crime against parents:\"), \"Crimes against parents, measured by the rank of the ratio of crimes against parents to all crimes \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Share of crimes\",\n    unit = \" %\"\n  ),\n  Infanticide = list(\n    title = \"Infanticides\",\n    desc = as.character(p(tags$b(\"Infanticides per capita:\"), \"Ranked ratio of number of infanticides to population \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Infanticides / capita\",\n    unit = \"\"\n  ),\n  Donation_clergy = list(\n    title = \"Donations to the clergy\",\n    desc = as.character(p(tags$b(\"Donations to the clergy:\"), \"Ranked ratios of the number of bequests and donations inter vivios to population \\u2013 Average for the years 1815-1824\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Bull. des lois, ordunn. d’autorisation\"))),\n    lgd = \"Donations / capita\",\n    unit = \"\"\n  ),\n  Lottery = list(\n    title = \"Wager on Royal Lottery\",\n    desc = as.character(p(tags$b(\"Per capita wager on Royal Lottery:\"), \"Ranked ratio of the proceeds bet on the royal lottery to population \\u2013 Average for the years 1822-1826\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte rendu par le ministre des finances\"))),\n    lgd = \"Wager / capita\",\n    unit = \"\"\n  ),\n  Desertion = list(\n    title = \"Military desertion\",\n    desc = as.character(p(tags$b(\"Military desertion:\"), \"Military disertion, ratio of the number of young soldiers accused of desertion to the force of the military contingent, minus the deficit produced by the insufficiency of available billets\\u2013 Average of the years 1825-1827\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte du ministère du guerre, 1829 état V\"))),\n    lgd = \"No. of desertions\",\n    unit = \"\"\n  ),\n  Instruction = list(\n    title = \"Instruction\",\n    desc = as.character(p(tags$b(\"Instruction:\"), \"Ranks recorded from Guerry's map of Instruction. Note: this is inversely related to literacy (as defined here)\")),\n    lgd = \"Instruction\",\n    unit = \"\"\n  ),\n  Prostitutes = list(\n    title = \"Prostitutes\",\n    desc = as.character(p(tags$b(\"Prostitutes in Paris:\"), \"Number of prostitutes registered in Paris from 1816 to 1834, classified by the department of their birth\", hr(), helpText(\"Source: Parent-Duchatelet (1836), De la prostitution en Paris\"))),\n    lgd = \"No. of prostitutes\",\n    unit = \"\"\n  ),\n  Distance = list(\n    title = \"Distance to paris\",\n    desc = as.character(p(tags$b(\"Distance to Paris (km):\"), \"Distance of each department centroid to the centroid of the Seine (Paris)\", hr(), helpText(\"Source: Calculated from department centroids\"))),\n    lgd = \"Distance\",\n    unit = \" km\"\n  ),\n  Area = list(\n    title = \"Area\",\n    desc = as.character(p(tags$b(\"Area (1000 km^2)\"), hr(), helpText(\"Source: Angeville (1836)\"))),\n    lgd = \"Area\",\n    unit = \" km\\u00b2\"\n  ),\n  Pop1831 = list(\n    title = \"Population\",\n    desc = as.character(p(tags$b(\"Population in 1831, in 1000s\"), hr(), helpText(\"Source: Taken from Angeville (1836), Essai sur la Statistique de la Population français\"))),\n    lgd = \"Population (in 1000s)\",\n    unit = \"\"\n  )\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = as.factor(case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  ))) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prep data (Tab: Map data) ----\ndata_guerry_region &lt;- data_guerry %&gt;%\n  group_by(Region) %&gt;%\n  summarise(across(\n  .cols = all_of(names(variable_names)),\n  function(x) {\n    if (cur_column() %in% c(\"Area\", \"Pop1831\")) {\n      sum(x)\n    } else {\n      mean(x)\n    }\n  }\n))\n\n## Prepare palettes ----\n## Used for mapping\npals &lt;- list(\n  Sequential = RColorBrewer::brewer.pal.info %&gt;%\n    filter(category %in% \"seq\") %&gt;%\n    row.names(),\n  Viridis = c(\"Magma\", \"Inferno\", \"Plasma\", \"Viridis\",\n              \"Cividis\", \"Rocket\", \"Mako\", \"Turbo\")\n)\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n    \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n    \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n# 2 Create theme & preload ----\ndash_theme &lt;- create_theme(\n  bs4dash_status(\n    primary = \"#58748f\",\n    secondary = \"#666666\",\n    info = \"#E6EAEE\",\n    danger = \"#BF616A\",\n    warning = \"#FF6100\",\n    light = \"#F4F4F2\",\n    dark = \"#2c2c25\"\n  ),\n  bs4dash_layout(\n    font_size_root = \"5rem\",\n    main_bg = \"#FDFDFD\",\n    sidebar_width = \"350px\"\n  ),\n  bs4dash_sidebar_light(bg = \"#F4F4F2\", color = \"#000\"),\n  bs4dash_sidebar_dark(bg = \"#2c2c25\", color = \"#FFF\"),\n  bs4dash_color(\n    orange = \"#F06400\",\n    white = \"#FDFDFD\",\n    black = \"#000\",\n    gray_600 = \"#666\",\n    gray_800 = \"#333\",\n    gray_900 = \"#000\",\n    blue = \"#58748f\"\n  ),\n  bs4dash_font(\n    family_sans_serif = \"Verdana\",\n    family_base = \"Georgia\",\n    family_monospace = \"Courier New\"\n  )\n)\n\n## Preloader ----\npreloader &lt;- list(\n  html = tagList(spin_6(), \"Loading ...\"),\n  color = \"#B3DDFE\"\n)\n\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  freshTheme = dash_theme,\n  preloader = preloader,\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    tags$style(\"\n      /* remove white space from header */\n      .navbar {\n        padding-top: 0em;\n        padding-bottom: 0em;\n        padding-right: 0em;\n      }\n    \"),\n    span(style = \"display: inline-block; width: 100%;\"),\n    a(\n      class = \"logo\",\n      href = \"https://gesis.org/\",\n      img(src = \"gesis-logo.png\", style = \"height: 1.8em;\")\n    ),\n    title = tagList(\n      img(src = \"workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    ),\n    skin = \"light\",\n    sidebarIcon = tags$i(class = \"fa fa-bars\", style = \"color: black;\")\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      menuItem(tabName = \"tab_map\", text = \"Map data\", icon = icon(\"map\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tags$head(\n      waiter::use_waiter(),\n      includeCSS(\"www/styles.css\")\n    ),\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n            title = \"The Guerry Dashboard\",\n            lead = \"A Shiny app to explore the classic Guerry dataset.\",\n            status = \"info\",\n            btnName = NULL\n        ),\n        fluidRow(\n            column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                                 color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                    title = \"References\",\n                    status = \"primary\",\n                    solidHeader = FALSE,\n                    \"The following sources are referenced in this app:\",\n                    tags$ul(\n                        class = \"list-style: none\",\n                        style = \"margin-left: -30px;\",\n                        p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                        p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                        p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                        p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                    )\n                ),\n                accordionItem(\n                    title = \"Details\",\n                    status = \"primary\",\n                    solidHeader = FALSE,\n                    p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                    p(\"Last update: June 2023\"),\n                    p(\"Further information about the data can be found\",\n                        a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      ),\n      ### 3.3.3 Tab: Model data ----\n      tabItem(\n        tabName = \"tab_model\",\n        fluidRow(\n          column(\n            width = 6,\n            #### Inputs(s) ----\n            box(\n              width = 12,\n              title = \"Select variables\",\n              status = \"primary\",\n              shinyWidgets::pickerInput(\n                \"model_x\",\n                label = \"Select a dependent variable\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(liveSearch = TRUE),\n                selected = \"Literacy\"\n              ),\n              shinyWidgets::pickerInput(\n                \"model_y\",\n                label = \"Select independent variables\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(\n                  actionsBox = TRUE,\n                  liveSearch = TRUE,\n                  selectedTextFormat = \"count\",\n                  countSelectedText = \"{0} variables selected\",\n                  noneSelectedText = \"No variables selected\"\n                ),\n                multiple = TRUE,\n                selected = \"Commerce\"\n              ),\n              shinyWidgets::prettyCheckbox(\n                \"model_std\",\n                label = \"Standardize variables?\",\n                value = TRUE,\n                status = \"primary\",\n                shape = \"curve\"\n              ),\n              hr(),\n              actionButton(\n                \"refresh\",\n                label = \"Apply changes\",\n                icon = icon(\"refresh\"),\n                flat = TRUE\n              )\n            ),\n            #### Outputs(s) ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model analysis\",\n              side = \"right\",\n              width = 12,\n              ##### Tabpanel: Coefficient plot ----\n              tabPanel(\n                title = \"Plot: Coefficients\",\n                plotly::plotlyOutput(\"coefficientplot\")\n              ),\n              ##### Tabpanel: Scatterplot ----\n              tabPanel(\n                title = \"Plot: Scatterplot\",\n                plotly::plotlyOutput(\"scatterplot\")\n              ),\n              ##### Tabpanel: Table: Regression ----\n              tabPanel(\n                title = \"Table: Model\",\n                htmlOutput(\"tableregression\")\n              )\n            )\n          ),\n          column(\n            width = 6,\n            ##### Box: Pair diagramm ----\n            box(\n              width = 12,\n              title = \"Pair diagram\",\n              status = \"primary\",\n              plotly::plotlyOutput(\"pairplot\")\n            ),\n            ##### TabBox: Model diagnostics ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model diagnostics\",\n              width = 12,\n              side = \"right\",\n              tabPanel(\n                title = \"Normality\",\n                plotly::plotlyOutput(\"normality\")\n              ),\n              tabPanel(\n                title = \"Outliers\",\n                plotly::plotlyOutput(\"outliers\")\n              ),\n              tabPanel(\n                title = \"Heteroskedasticity\",\n                plotly::plotlyOutput(\"heteroskedasticity\")\n              )\n            )\n          )\n        )\n      ),\n      ### 3.3.4 Tab: Map data ----\n      tabItem(\n        tabName = \"tab_map\", # must correspond to related menuItem name\n        fluidRow(\n          column(\n            #### Inputs(s) ----\n            width = 4, # must be between 1 and 12\n            box(\n              title = \"Data selection\",\n              status = \"primary\",\n              width = 12,\n              shinyWidgets::pickerInput(\n                \"tab_map_select\",\n                label = \"Select a variable\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(liveSearch = TRUE)\n              ),\n              uiOutput(\"tab_map_desc\")\n            ),\n            box(\n              title = \"Map configuration\",\n              status = \"primary\",\n              width = 12,\n              shinyWidgets::radioGroupButtons(\n                \"tab_map_aggr\",\n                label = \"Aggregation level\",\n                choices = c(\"Departments\", \"Regions\"),\n                selected = \"Departments\",\n                individual = TRUE,\n                checkIcon = list(\n                  yes = tags$i(class = \"fa fa-circle\", style = \"color: #58748f;\"),\n                  no = tags$i(class = \"fa fa-circle-o\", style = \"color: #58748f;\")\n                )\n              ),\n              shinyWidgets::pickerInput(\n                \"tab_map_pal\",\n                label = \"Color palette\",\n                choices = pals,\n                selected = \"Reds\"\n              ) # end input\n            ) # end box\n          ), # end column\n          column(\n            #### Output(s) ----\n            width = 8,\n            box(\n              id = \"tab_map_box\",\n              status = \"primary\",\n              headerBorder = FALSE,\n              collapsible = FALSE,\n              width = 12,\n              leaflet::leafletOutput(\"tab_map_map\", height = \"800px\", width = \"100%\")\n            ) # end box\n          ) # end column\n        ) # end fluidRow\n      ) # end tabItem\n    ) # end tabItems\n  ),\n\n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n        \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n        a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n        \"It is based on data from the\",\n        a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, c(\"Region\", \"Department\",var)]\n    }\n\n    data_table\n  })\n  \n\n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n  ### Define & estimate model ----\n  mparams &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(data_guerry)[c(x, y)]\n    dt_labels &lt;- sf::st_drop_geometry(data_guerry)[c(\"Department\", \"Region\")]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    form &lt;- as.formula(paste(x, \"~\", paste(y, collapse = \" + \")))\n    mod &lt;- lm(form, data = dt)\n    \n    list(\n      x = x,\n      y = y,\n      data = dt,\n      data_labels = dt_labels,\n      model = mod\n    )\n  }) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n  \n  ### Pair diagram ----\n  output$pairplot &lt;- plotly::renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    p &lt;- GGally::ggpairs(\n      params$data,\n      axisLabels = \"none\",\n      lower = list(\n        continuous = function(data, mapping, ...) {\n          ggplot(data, mapping) +\n            suppressWarnings(geom_point(\n              aes(text = paste0(\n                \"Department: \", \n                dt_labels[[\"Department\"]],\n                \"&lt;br&gt;Region: \", \n                dt_labels[[\"Region\"]])),\n              color = \"black\"\n            ))\n        }\n      )\n    )\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Coefficientplot ----\n  output$coefficientplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    x &lt;- params$x\n    y &lt;- params$y\n    \n    \n    p &lt;- plot(parameters::model_parameters(params$model))\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Scatterplot ----\n  output$scatterplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    x &lt;- params$x \n    y &lt;- params$y\n    \n    \n    if (length(y) == 1) {\n      p &lt;- ggplot(params$data, \n                  aes(x = .data[[params$x]], \n                      y = .data[[params$y]])) +\n        geom_point(aes(text = paste0(\"Department: \", \n                                     dt_labels[[\"Department\"]],\n                                     \"&lt;br&gt;Region: \", \n                                     dt_labels[[\"Region\"]])),\n                   color = \"black\") +\n        geom_smooth() + \n        geom_smooth(method='lm') +\n        theme_light()\n    } else {\n      p &lt;- ggplot() +\n        theme_void() +\n        annotate(\"text\", \n                 label = \"Cannot create scatterplot.\\nMore than two variables selected.\", \n                 x = 0, y = 0, \n                 size = 5, \n                 colour = \"red\",\n                 hjust = 0.5,\n                 vjust = 0.5) +\n        xlab(NULL)\n      \n    }\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Table: Regression ----\n  output$tableregression &lt;- renderUI({\n    params &lt;- mparams()\n    HTML(modelsummary(\n      dvnames(list(params$model)),\n      gof_omit = \"AIC|BIC|Log|Adj|RMSE\",\n      output = \"html\"\n    ))\n  })\n  \n  ### Plot: Normality residuals ----\n  output$normality &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_normality(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Outliers ----\n  output$outliers &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_outliers(params$model), show_labels = FALSE)\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$x &lt;- \"Leverage\"\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Heteroskedasticity ----\n  output$heteroskedasticity &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_heteroskedasticity(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$y &lt;- \"Sqrt. |Std. residuals|\" # ggplotly doesn't support expressions\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  \n  ## 4.3 Map data ----\n  \n  # Render description of selected variable\n  output$tab_map_desc &lt;- renderUI({\n    HTML(variable_desc[[input$tab_map_select]]$desc)\n  })\n  \n  # Select polygon based on aggregation level\n  poly &lt;- reactive({\n    if (identical(input$tab_map_aggr, \"Regions\")) {\n      data_guerry_region\n    } else {\n      data_guerry\n    }\n  })\n  \n  # Select palette based on input\n  palette &lt;- reactive({\n    pal &lt;- input$tab_map_pal\n    if (pal %in% pals$Viridis) {\n      pal &lt;- viridis::viridis_pal(option = tolower(pal))(5)\n    }\n    pal\n  }) %&gt;%\n    bindEvent(input$tab_map_pal)\n  \n  # Compile parameters for leaflet rendering\n  params &lt;- reactive({\n    poly &lt;- st_transform(poly(), 4326)\n    pal &lt;- palette()\n    var &lt;- input$tab_map_select\n\n    values &lt;- as.formula(paste0(\"~\", var))\n    pal &lt;- colorNumeric(palette = pal, domain = NULL)\n    \n    reg &lt;- poly[[\"Region\"]]\n    dep &lt;- poly[[\"Department\"]]\n    val &lt;- poly[[var]]\n    \n    if (is.null(dep)) {\n      dep &lt;- rep(NA, nrow(poly))\n    }\n\n    # Create labels that are nicely aligned in a grid\n    labels &lt;- mapply(\n      function(reg, dep, val) {\n        HTML(as.character(tags$table(\n          tags$tr(\n            style = \"line-height: 10px\",\n            tags$td(tags$b(\"Region: \")),\n            tags$td(reg)\n          ),\n          if (!is.na(dep)) {\n            tags$tr(\n              style = \"line-height: 10px\",\n              tags$td(tags$b(\"Department: \")),\n              tags$td(dep)\n            )\n          },\n          tags$tr(\n            style = \"line-height: 10px\",\n            tags$td(tags$b(paste0(variable_desc[[var]]$lgd, \": \"))),\n            tags$td(round(val, 2))\n          )\n        )))\n      },\n      reg = reg, dep = dep, val = val,\n      SIMPLIFY = FALSE,\n      USE.NAMES = FALSE\n    )\n\n    list(\n      poly = poly,\n      var = var,\n      pal = pal,\n      values = values,\n      labels = labels\n    )\n  })\n  \n  # Render leaflet for the first time\n  output$tab_map_map &lt;- leaflet::renderLeaflet({\n    # Isolate call to params() to prevent render function to be executed\n    # every time params() is invalidated. No dependency is made.\n    params &lt;- isolate(params())\n    leaflet(data = params$poly) %&gt;%\n      addProviderTiles(\"OpenStreetMap.France\", group = \"OSM\") %&gt;%\n      addProviderTiles(\"OpenTopoMap\", group = \"OTM\") %&gt;%\n      addProviderTiles(\"Stamen.TonerLite\", group = \"Stamen Toner\") %&gt;%\n      addProviderTiles(\"GeoportailFrance.orthos\", group = \"Orthophotos\") %&gt;%\n      addLayersControl(baseGroups = c(\"OSM\", \"OTM\",\n                                      \"Stamen Toner\", \"Orthophotos\")) %&gt;%\n      setView(lng = 3, lat = 47, zoom = 5) %&gt;%\n      addPolygons(\n        fillColor = as.formula(paste0(\"~params$pal(\", params$var, \")\")),\n        fillOpacity = 0.7,\n        weight = 1,\n        color = \"black\",\n        opacity = 0.5,\n        label = params$labels,\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"black\",\n          opacity = 0.5,\n          fillOpacity = 1,\n          bringToFront = TRUE,\n          sendToBack = TRUE\n        )\n      ) %&gt;%\n      addLegend(\n        position = \"bottomright\",\n        pal = params$pal,\n        values = params$values,\n        opacity = 0.9,\n        title = variable_desc[[params$var]]$lgd,\n        labFormat = labelFormat(suffix = variable_desc[[params$var]]$unit)\n      )\n  })\n  \n  # Create a leaflet proxy. Proxies update map values without re-rendering the\n  # entire map, thus increasing performance.\n  observe({\n    params &lt;- params()\n    leafletProxy(\"tab_map_map\", data = params$poly) %&gt;%\n      clearShapes() %&gt;%\n      clearControls() %&gt;%\n      addPolygons(\n        fillColor = as.formula(paste0(\"~params$pal(\", params$var, \")\")),\n        fillOpacity = 0.7,\n        weight = 1,\n        color = \"black\",\n        opacity = 0.5,\n        label = params$labels,\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"black\",\n          opacity = 0.5,\n          fillOpacity = 1,\n          bringToFront = TRUE,\n          sendToBack = TRUE\n        )\n      ) %&gt;%\n      addLegend(\n        position = \"bottomright\",\n        na.label = \"No data\",\n        pal = params$pal,\n        values = params$values,\n        opacity = 0.9,\n        title = variable_desc[[params$var]]$lgd,\n        labFormat = labelFormat(suffix = variable_desc[[params$var]]$unit)\n      )\n  })\n  \n  \n\n}\n\nshinyApp(ui, server)",
    "crumbs": [
      "Guerry app: All the code"
    ]
  },
  {
    "objectID": "07-theming.html",
    "href": "07-theming.html",
    "title": "Theming & styling",
    "section": "",
    "text": "You will learn how to:",
    "crumbs": [
      "Theming & styling"
    ]
  },
  {
    "objectID": "07-theming.html#bootstrap",
    "href": "07-theming.html#bootstrap",
    "title": "Theming & styling",
    "section": "1.1 Bootstrap",
    "text": "1.1 Bootstrap\n\nBootstrap is a framework containing design templates that are based on CSS, HTML and JavaScript\n\nUsed by around 20% of websites\nOne of the most popular GitHub projects\nPossibly a bit boring due to its popularity\n\nClassic Shiny uses Bootstrap 3\nbs4Dash, the package we use for the Guerry dashboard, uses Bootstrap 4 (more precisely AdminLTE 3)",
    "crumbs": [
      "Theming & styling"
    ]
  },
  {
    "objectID": "07-theming.html#shiny-extensions-for-styling",
    "href": "07-theming.html#shiny-extensions-for-styling",
    "title": "Theming & styling",
    "section": "1.2 Shiny extensions for styling",
    "text": "1.2 Shiny extensions for styling\n\nShiny has some really cool extensions for amping up your UI, some of which we will address:\n\nbslib - customize bootstrap themes\nfresh - customize dashboard themes\nwaiter - create pretty spinners\nshinyWidgets - beautify input widgets\nshinyjs - do JavaScript magic without knowing JavaScript",
    "crumbs": [
      "Theming & styling"
    ]
  },
  {
    "objectID": "07-theming.html#further-reading",
    "href": "07-theming.html#further-reading",
    "title": "Theming & styling",
    "section": "1.3 Further reading",
    "text": "1.3 Further reading\n\nChapter 6 of Hadley Wickham’s “Mastering Shiny”\nChapter 6 to 9 of David Granjon’s “Outstanding User Interfaces with Shiny”",
    "crumbs": [
      "Theming & styling"
    ]
  },
  {
    "objectID": "07-theming.html#how-to-open-the-inspector",
    "href": "07-theming.html#how-to-open-the-inspector",
    "title": "Theming & styling",
    "section": "3.1 How to open the inspector",
    "text": "3.1 How to open the inspector\n\nVisit a website (e.g. your Shiny app in a browser)\nRight click somewhere (e.g. an element you want to inspect)\nSelect “Inspect”\n\n\nA window will open that looks just like the one below\n\n\n\n\n\n\n\nTip\n\n\n\nAlso works in RStudio! Right click somewhere, then “Inspect Element”\n\n\n\n\n\nThe Inspect tool in Firefox",
    "crumbs": [
      "Theming & styling"
    ]
  },
  {
    "objectID": "07-theming.html#exploring-the-inspector",
    "href": "07-theming.html#exploring-the-inspector",
    "title": "Theming & styling",
    "section": "3.2 Exploring the inspector",
    "text": "3.2 Exploring the inspector\n\nQuestion: From the list above, can you make out which part of the inspector does what?\n\nHTML pane\nCSS pane\nLayout pane\nPick an element\nGrab a color\n\nDespite the complicated look, the Inspect tool can be useful for all kinds of theming endeavours",
    "crumbs": [
      "Theming & styling"
    ]
  },
  {
    "objectID": "07-theming.html#bootstrap-versions-with-bslib",
    "href": "07-theming.html#bootstrap-versions-with-bslib",
    "title": "Theming & styling",
    "section": "4.1 Bootstrap versions with bslib",
    "text": "4.1 Bootstrap versions with bslib\n\nIn the following code chunk, we create a bootstrap theme that applies the theming of the most recent Bootstrap 5 version:\n\n\nui &lt;- fluidPage(\n    h1(\"Heading 1\"), \n    h2(\"Heading 2\"), \n    p(\"Paragraph\"), \n    selectInput(\"select\", \"Select Input\", unique(iris$Species)),\n    sliderInput(\"slider\", label = \"Slider\", 1, 5, 3),\n    checkboxInput(\"check\", \"Checkbox\"),\n    theme = bs_theme(version = 5)\n)\n\nserver &lt;- function(input, output, session) {}\n\nshinyApp(ui, server)\n\n\nThe differences to the classic bootstrap 3 are small but noticeable!",
    "crumbs": [
      "Theming & styling"
    ]
  },
  {
    "objectID": "07-theming.html#bootswatch",
    "href": "07-theming.html#bootswatch",
    "title": "Theming & styling",
    "section": "4.2 Bootswatch",
    "text": "4.2 Bootswatch\n\nOther than the version, there’s a lot to change in bs_theme()\nFor example, we can apply one of the pre-made Bootswatch themes:\n\n\nui &lt;- fluidPage(\n    h1(\"Heading 1\"), \n    h2(\"Heading 2\"), \n    p(\"Paragraph\"), \n    selectInput(\"select\", \"Select Input\", unique(iris$Species)),\n    sliderInput(\"slider\", label = \"Slider\", 1, 5, 3),\n    checkboxInput(\"check\", \"Checkbox\"),\n    theme = bs_theme(version = 5, bootswatch = \"sketchy\")\n)\n\nserver &lt;- function(input, output, session) {}\n\nshinyApp(ui, server)",
    "crumbs": [
      "Theming & styling"
    ]
  },
  {
    "objectID": "07-theming.html#exploring-theming-options",
    "href": "07-theming.html#exploring-theming-options",
    "title": "Theming & styling",
    "section": "4.3 Exploring theming options",
    "text": "4.3 Exploring theming options\n\nYou can try out all theming options in real time by running bs_theme_preview()\n\n\n\n\n\n\n\nExercise\n\n\n\nExperiment with bs_theme_preview() to learn about the different arguments to bs_theme(). When you find a pretty theme, re-create the theme programmatically using bs_theme()\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nThe code to update the theme including all arguments is printed to the console!",
    "crumbs": [
      "Theming & styling"
    ]
  },
  {
    "objectID": "07-theming.html#adding-a-gesis-like-theme",
    "href": "07-theming.html#adding-a-gesis-like-theme",
    "title": "Theming & styling",
    "section": "5.1 Adding a GESIS-like theme",
    "text": "5.1 Adding a GESIS-like theme\n\nWorkflow:\n\nCreate a theme using fresh::create_theme()\nAdd theming elements, such as layout, colors, fonts\nPass the theme object as an argument to dashboardPage()\n\nIn the following code chunk, we add a theme that roughly resembles the GESIS web style\n\n\n\n\n\n\n\nTip\n\n\n\nType fresh::bs4dash_ in the RStudio console and explore fresh’s theming elements\n\n\n\ndash_theme &lt;- create_theme(\n  bs4dash_status(\n    primary = \"#58748f\",\n    secondary = \"#666666\",\n    info = \"#E6EAEE\",\n    danger = \"#BF616A\",\n    warning = \"#F06400\",\n    light = \"#F4F4F2\",\n    dark = \"#2c2c25\"\n  ),\n  bs4dash_layout(\n    font_size_root = \"5rem\",\n    main_bg = \"#FDFDFD\",\n    sidebar_width = \"350px\"\n  ),\n  bs4dash_sidebar_light(bg = \"#F4F4F2\", color = \"#000\"),\n  bs4dash_sidebar_dark(bg = \"#2c2c25\", color = \"#FFF\"),\n  bs4dash_color(\n    orange = \"#F06400\",\n    white = \"#E6EAEE\",\n    black = \"#000\",\n    gray_600 = \"#666\",\n    gray_800 = \"#333\",\n    gray_900 = \"#000\",\n    blue = \"#58748f\"\n  ),\n  bs4dash_font(\n    family_sans_serif = \"Verdana\",\n    family_base = \"Georgia\",\n    family_monospace = \"Courier New\"\n  )\n)\n\n\n\n\n\n\n\nExercise\n\n\n\nUsing the pipette tool from the Inspector, extract the color scheme from a website of your choice. Create a theme using the respective colors (and other theming elements) and pass it to your Shiny dashboard.",
    "crumbs": [
      "Theming & styling"
    ]
  },
  {
    "objectID": "07-theming.html#css",
    "href": "07-theming.html#css",
    "title": "Theming & styling",
    "section": "7.1 CSS",
    "text": "7.1 CSS\n\nCSS (Cascading Style Sheets) is a computer language that is used to style HTML documents\nHTML provides the containers, CSS styles them\nWe can write HTML and CSS easily from within R using the htmltools package (see ?builder and ?browsable)\n\n\nbrowsable(div(\n    div(\n        \"This is an HTML container without styling\"\n    ),\n    div(\n        \"This is an HTML container with CSS styling\",\n        style = \"\n            background-color: green;\n            color: white;\n            border-radius: 10px;\n            display: inline-block;\n            padding: 5px;\n            transform: rotate(5deg);\n            margin-top: 15px;\n            font-family: Verdana;\n        \"\n    )\n))\n\n\nThis is an HTML container without styling\nThis is an HTML container with CSS styling",
    "crumbs": [
      "Theming & styling"
    ]
  },
  {
    "objectID": "07-theming.html#classes-and-ids",
    "href": "07-theming.html#classes-and-ids",
    "title": "Theming & styling",
    "section": "7.2 Classes and IDs",
    "text": "7.2 Classes and IDs\n\nCSS is usually defined using classes or IDs\n\nIDs are unique identifiers for a single UI elements and are specified using a hashtag #\nClasses can be given to multiple UI elements and are specified using a dot .\n\n\n\nbrowsable(div(\n    tags$style(\n        \"\n        #id {\n            color: red;\n        }\n        \n        .cls {\n            color: green;\n        }\n        \"\n    ),\n    div(\"This div has an id\", id = \"id\"),\n    div(\"This div has a class\", class = \"cls\")\n))\n\n\n\nThis div has an id\nThis div has a class",
    "crumbs": [
      "Theming & styling"
    ]
  },
  {
    "objectID": "07-theming.html#html-elements-and-css",
    "href": "07-theming.html#html-elements-and-css",
    "title": "Theming & styling",
    "section": "7.3 HTML elements and CSS",
    "text": "7.3 HTML elements and CSS\n\nYou can change CSS properties of entire HTML elements as well:\n\n\nbrowsable(div(\n    tags$style(\n        \"\n        p.cls {\n            color: blue;\n        }\n        \"\n    ),\n    p(\"Blue his house\", class = \"cls\"),\n    p(\"With a blue little window\", class = \"cls\"),\n    p(\"And a blue corvette\", class = \"cls\"),\n    div(\"Green??\", class = \"cls\"),\n    style = \"border-style: dotted; display: inline-block;\"\n))\n\n\n\nBlue his house\nWith a blue little window\nAnd a blue corvette\nGreen??\n\n\n\n\nQuestion: Why is div.cls green and not blue or black?\nCombining the knowledge from above:\n\np.cls changes the properties of all p tags with class cls\n#id .cls changes the properties of all elements with class cls within an element of ID id\n\n\n\n7.3.1 CSS properties\n\nCSS is build entirely upon so-called properties\nA complete reference of CSS can be found in the Mozilla developer docs\n\n\nAn incomplete list of common CSS properties\n\n\n\n\n\n\n\nProperty\nDescription\nExample values\n\n\n\n\ncolor\nSets the color of an element\n#000, black\n\n\nbackground-color\nSets the color of the element background\n#000, black\n\n\ndisplay\nDetermines how the element is displayed\ninline, block, flex, grid\n\n\nwidth\nSets the width of an element\n10px, 100%, 2em, 1vh\n\n\nheight\nSets the height of an element\n10px, 100%, 2em, 1vh\n\n\nmargin\nMargin between element and parent\n10px, 100%, 2em, 1vh\n\n\npadding\nMargin within element\n10px, 100%, 2em, 1vh\n\n\nborder-color\nSets the color of an element border\n#000, black\n\n\nborder-width\nSets the width of an element border\n10px, 100%, 2em, 1vh\n\n\nborder-style\nSets the style of an element border\ndotted, dashed, solid, double\n\n\nborder-radius\nSets smooth corners\n10px, 100%, 2em, 1vh\n\n\nfont-family\nSets the font family\nArial, Verdana\n\n\nfont-style\nSets the font style\nNormal, italic, oblique\n\n\nfont-weight\nSets the font boldness\nnormal, bold, 700\n\n\nfont-size\nSets the font size\n10px, 100%, 2em, 1vh\n\n\nposition\nDetermines the general positioning of an element\nAbsolute, relative, fixed\n\n\nz-index\nSets the overlapping order\nRanking, i.e. 1000 &gt; 1 &gt; 0 &gt; -1",
    "crumbs": [
      "Theming & styling"
    ]
  },
  {
    "objectID": "07-theming.html#including-css-in-r",
    "href": "07-theming.html#including-css-in-r",
    "title": "Theming & styling",
    "section": "7.4 Including CSS in R",
    "text": "7.4 Including CSS in R\n\nCSS can either be defined using inline CSS (tags$style) or an external CSS file\nIn the Guerry app, we include a CSS file which takes care of some styling:\n\nAdd a folder called “www” in your app directory\nAdd a file called “styles.css” to that folder\nIn R, add: tags$head(includeCSS(\"www/styles.css\")) to the dashboardBody",
    "crumbs": [
      "Theming & styling"
    ]
  },
  {
    "objectID": "07-theming.html#example-removing-white-space",
    "href": "07-theming.html#example-removing-white-space",
    "title": "Theming & styling",
    "section": "7.5 Example: Removing white space",
    "text": "7.5 Example: Removing white space\n\nDuring session 6: mapping, you might have noticed a large amount of white space when making the Leaflet map\nNot a tragedy, but we lose quite a lot of functional space\n\n\n\n7.5.1 Diagnosis\n\nCause: bs4Dash::box() reserves some space in its header and body for some reason\nHow do we know?\n\nRight click on the white space\nOpen the inspector\nLook out for the properties “padding” or “margin”, usually the culprits in terms of white space\nDisable them to see what changes\n\n\n\n\n\n7.5.2 Fix\n\nBad news: We can’t fix this using R alone as the values are given by AdminLTE, bs4Dash’s CSS framework\nGood news: This is a really nice use case for custom CSS styling\nUsing the Inspect tool, we add padding: 0px; to both the box header and body directly\n\n\n\n\n7.5.3 Permanent fix\n\nOur fix with the Inspect tool is lost as soon as we close or reload the tab\nTo fix the padding permanently, we need to make changes to the HTML class\nQuestion: What HTML class do we need to amend? Which HTML element is responsible for the faulty white space?\n\n\n\n\n\n\n\nTip\n\n\n\nIf you are not sure what element does what, try to hover over the element in the HTML pane. The respective space is then highlighted directly on the website!\n\n\n\n\n\n7.5.4 Embedding CSS\n\nNow that we know what properties to change and where, we can start writing CSS\nEither in a dedicated styles.css file or using tags$style inside the UI code, we put the following CSS lines:\n\n\n\nstyles.css\n\n/* remove white space around maps in boxes */\n#exp_box .card-header, #exp_box .card-body {\n  padding: 0em;\n}\n\n\nIn other words: For the class card-header and card-body inside the object with ID exp_box, set the padding to 0 pixels\n\n\n\n\n\n\n\nExercise\n\n\n\nChange the CSS styling of the text paragraphs in the Home tab. Create a CSS class called par and change font family, size, weight, type, alignment and justification\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nSome of the CSS properties were introduced in subsection “CSS properties”, but others are new. In any case, there are a lot of good resources just one Google search away.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nEither in styles.css or inline, add the following CSS code:\n/* text formatting */\np.par {\n  font-family: Arial;\n  font-weight: 500;\n  font-size: 12px;\n  font-type: italic;\n  text-indent: 10px;\n  text-align: justify;\n  text-justify: inter-word;\n}\nIn R, you need to add the class par to all paragraphs in the UI tab:\n\np(\"text\", class = \"par\")",
    "crumbs": [
      "Theming & styling"
    ]
  },
  {
    "objectID": "05-visualization.html",
    "href": "05-visualization.html",
    "title": "Modelling and visualizing data",
    "section": "",
    "text": "You will learn how to:",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "05-visualization.html#good-practice-examples",
    "href": "05-visualization.html#good-practice-examples",
    "title": "Modelling and visualizing data",
    "section": "1.1 Good practice examples",
    "text": "1.1 Good practice examples\n\nExamples of these concepts can be seen in many Shiny apps, one example is Edward Parker’s COVID-19 tracker\n\n\n\n\n\n\n\nExercise\n\n\n\nExplore the COVID-19 tracker. Do you think this is a good Shiny app? If so, why? If not, why not?\n\n\n\n\n\nCOVID-19 Tracker",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "05-visualization.html#current-app-state",
    "href": "05-visualization.html#current-app-state",
    "title": "Modelling and visualizing data",
    "section": "1.2 Current app state",
    "text": "1.2 Current app state\n\nUnlike the previous sections, we will extend the existing app code step by step\nThe code chunk below includes the current app state including the intro and table tabs\nQuick recap:\n\nIn section 3, we added an introduction tab that contains background info on the app\nIn section 4, we added a table tab using the DT package\nIn this section, we will add a tab that analyzes Guerry using all sorts of visualization\n\n\n\n\nFull code for the current app state\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(dplyr)\nlibrary(GGally)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prep data (Tab: Map data) ----\ndata_guerry_region &lt;- data_guerry %&gt;%\n  group_by(Region) %&gt;%\n  summarise(across(\n    .cols = all_of(names(variable_names)),\n    function(x) {\n      if (cur_column() %in% c(\"Area\", \"Pop1831\")) {\n        sum(x)\n      } else {\n        mean(x)\n      }\n    }\n  ))\n\n## Prepare palettes ----\n## Used for mapping\npals &lt;- list(\n  Sequential = RColorBrewer::brewer.pal.info %&gt;%\n    filter(category %in% \"seq\") %&gt;%\n    row.names(),\n  Viridis = c(\"Magma\", \"Inferno\", \"Plasma\", \"Viridis\",\n              \"Cividis\", \"Rocket\", \"Mako\", \"Turbo\")\n)\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      )\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n\n  # New code goes here :)\n}\n\nshinyApp(ui, server)",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "05-visualization.html#further-resources",
    "href": "05-visualization.html#further-resources",
    "title": "Modelling and visualizing data",
    "section": "1.3 Further resources",
    "text": "1.3 Further resources\n\nChapter “Graphics” in Hadley Wickham’s Mastering Shiny\n“Server-side linking with shiny” in Carson Sievert’s Plotly book",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "05-visualization.html#a-new-section-for-the-guerry-app",
    "href": "05-visualization.html#a-new-section-for-the-guerry-app",
    "title": "Modelling and visualizing data",
    "section": "2.1 A new section for the Guerry app",
    "text": "2.1 A new section for the Guerry app\n\nTo exemplify what Shiny can do with visualizations, we add a new tab to the app called “Model data”\nThe goal is to explore the relationships among Guerry variables\nQuestion: If you think about a Shiny app that explores the relationships within a dataset, what types of visualizations come into your mind first?",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "05-visualization.html#setting-up-the-ui-element",
    "href": "05-visualization.html#setting-up-the-ui-element",
    "title": "Modelling and visualizing data",
    "section": "2.2 Setting up the UI element",
    "text": "2.2 Setting up the UI element\n\nTaking our Shiny app as an example, we add another tab:\n\n\n1model &lt;- tabItem(\n    \"tab_model\",\n2    fluidRow(\n        column(\n            width = 6,\n        box(\n                width = 12,\n                title = \"Pair diagram\",\n                status = \"primary\",\n3                plotOutput(\"pairplot\")\n            )\n        )\n    )\n)\n\n\n1\n\nCreate a tab item called “tab_model”\n\n2\n\nCreate an initial layout containing a fluid row with one column and one box\n\n3\n\nCreate a plot output widget\n\n\n\n\n\nThe newly created tab Item has the tab name tab_model\nWe already created other tabs item called tab_intro and tab_tabulate, so we can tell where our new tab item goes:\n\n\ndashboardPage(\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n1  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = \"chart-line\")\n    )\n  ),\n2  body = dashboardBody(\n    # Note: Tab contents omitted to maintain readability!\n    tabItems(\n      tabItem(tabName = \"tab_intro\"),\n      tabItem(tabname = \"tab_tabulate\"),\n      model\n    )\n  )\n)\n\n\n1\n\nCreate the respective menu items in the sidebar. Don’t forget to match the tab names!\n\n2\n\nCreate the tab items within the body. The function tabItems() contains all tab objects. We add our newly created tab_model object after the introduction. Again, the order and names of tabItem()s corresponds to the order and names of menuItem()s!",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "05-visualization.html#filling-with-contents",
    "href": "05-visualization.html#filling-with-contents",
    "title": "Modelling and visualizing data",
    "section": "2.3 Filling with contents",
    "text": "2.3 Filling with contents\n\nPretty easy so far!\nOn the server side we do the plotting\nHere, we use ggpairs from the GGally package, but you can use anything that produces a plot\n\n\n1output$pairplot &lt;- renderPlot({\n2    dt &lt;- st_drop_geometry(guerry[c(\"Literacy\", \"Commerce\")])\n3    GGally::ggpairs(dt, axisLabels = \"none\")\n})\n\n\n1\n\nThe renderPlot() function accepts an expression that produces a plot\n\n2\n\nClean the data before plotting\n\n3\n\nggpairs() creates a ggplot2 object which starts a plotting device in its print method",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "05-visualization.html#full-code",
    "href": "05-visualization.html#full-code",
    "title": "Modelling and visualizing data",
    "section": "2.4 Full code",
    "text": "2.4 Full code\n\n\nFull code for basic plotting\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(dplyr)\nlibrary(GGally)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prep data (Tab: Map data) ----\ndata_guerry_region &lt;- data_guerry %&gt;%\n  group_by(Region) %&gt;%\n  summarise(across(\n    .cols = all_of(names(variable_names)),\n    function(x) {\n      if (cur_column() %in% c(\"Area\", \"Pop1831\")) {\n        sum(x)\n      } else {\n        mean(x)\n      }\n    }\n  ))\n\n## Prepare palettes ----\n## Used for mapping\npals &lt;- list(\n  Sequential = RColorBrewer::brewer.pal.info %&gt;%\n    filter(category %in% \"seq\") %&gt;%\n    row.names(),\n  Viridis = c(\"Magma\", \"Inferno\", \"Plasma\", \"Viridis\",\n              \"Cividis\", \"Rocket\", \"Mako\", \"Turbo\")\n)\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      ),\n      ### 3.3.3 Tab: Model data ----\n      tabItem(\n        tabName = \"tab_model\",\n        fluidRow(\n          column(\n            width = 6,\n            ##### Box: Pair diagramm ----\n            box(\n              width = 12,\n              title = \"Pair diagram\",\n              status = \"primary\",\n              plotOutput(\"pairplot\")\n            )\n          )\n        )\n      )\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n  ### Pair diagram ----\n  output$pairplot &lt;- renderPlot({\n    dt &lt;- st_drop_geometry(data_guerry[c(\"Literacy\", \"Commerce\")])\n    GGally::ggpairs(dt, axisLabels = \"none\") \n  })\n}\n\nshinyApp(ui, server)",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "05-visualization.html#limitations",
    "href": "05-visualization.html#limitations",
    "title": "Modelling and visualizing data",
    "section": "2.5 Limitations",
    "text": "2.5 Limitations\n\nThe code to create a plot in a Shiny app is quite simple so far, but has not many advantages over plain plotting in the R console\nTo really make it shine, we need three features:\n\nReactivity\nInteractivity\nContextuality",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "05-visualization.html#adding-ui-inputs",
    "href": "05-visualization.html#adding-ui-inputs",
    "title": "Modelling and visualizing data",
    "section": "3.1 Adding UI inputs",
    "text": "3.1 Adding UI inputs\n\nHere, we add three user inputs\n\nselectInput() to select a single x variable (defaults to Literacy)\nselectizeInput() to select multiple y variables (defaults to Commerce)\ncheckboxInput() to determine whether to standardize or not\n\n\n\n\n\n\n\n\nNote\n\n\n\nTo avoid overreactivity, we add an actionButton() which needs to be pressed for the user input to take effect.\n\n\n\nmodel &lt;- tabItem(\n    \"tab_model\",\n1    fluidRow(\n        column(\n            width = 6,\n            #### Box: Select variables ----\n      box(\n                width = 12,\n                title = \"Select variables\",\n                status = \"primary\",\n2                selectInput(\n                    \"model_x\",\n                    label = \"Select a dependent variable\",\n                    choices = setNames(names(variable_names), variable_names),\n                    selected = \"Literacy\"\n                ),\n3                selectizeInput(\n                    \"model_y\",\n                    label = \"Select independent variables\",\n                    choices = setNames(names(variable_names), variable_names),\n                    multiple = TRUE,\n                    selected = \"Commerce\"\n                ),\n4                checkboxInput(\n                    \"model_std\",\n                    label = \"Standardize variables?\",\n                    value = TRUE\n                ),\n                hr(),\n5                actionButton(\n                    \"refresh\",\n                    label = \"Apply changes\",\n                    icon = icon(\"refresh\"),\n                    flat = TRUE\n                )\n            )\n        ),\n        #### Box: Pair diagramm ----\n        column(\n            width = 6,\n        box(\n                width = 12,\n                title = \"Pair diagram\",\n                status = \"primary\",\n                plotOutput(\"pairplot\")\n            )\n        )\n    )\n)\n\n\n1\n\nCreate a new column + box to hold our new input UI\n\n2\n\nCreate a selectInput() to select a single x variable. By passing a named list to the choices argument, the list names are shown to the user and the list values are sent to the server!\n\n3\n\nCreate a selectizeInput() to select multiple y variables\n\n4\n\nCreate a checkboxInput() to let users decide whether to standardize variables or not\n\n5\n\nCreate an actionButton() that needs to be pressed for changes to take effect",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "05-visualization.html#accessing-the-new-ui-inputs",
    "href": "05-visualization.html#accessing-the-new-ui-inputs",
    "title": "Modelling and visualizing data",
    "section": "3.2 Accessing the new UI inputs",
    "text": "3.2 Accessing the new UI inputs\n\nOn the server side, we need to deal with the new inputs\nQuestion: Which new UI inputs did we add? How can we access them on the server side?\nWe add a new reactive that cleans the data\n\n\n\n\n\n\n\nNote\n\n\n\nbindEvent ensures that the user input is only applied when the actionButton() is pressed! You can try to remove this safety measure and observe how the plot struggles to keep up when selecting multiple variables.\n\n\n\n1dat &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(guerry)[c(x, y)]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    dt\n}) %&gt;%\n2    bindEvent(input$refresh, ignoreNULL = FALSE)\n\noutput$pairplot &lt;- renderPlot({\n3    GGally::ggpairs(dat(), axisLabels = \"none\")\n})\n\n\n1\n\nCreate a reactive expression that takes care of data cleaning and stores the cleaned data in a reactive object called dat\n\n2\n\nExecute the reactive expression (and thus update dat), if and only if the refresh button is pressed\n\n3\n\nCreate a pairs plot using the newly created dat() object. This is the same as the dt dataframe that we used before with the difference that dat() updates every time input$model_x, input$model_y or input$model_std are changed.\n\n\n\n\n\n\nThe plot now reacts to user input and updates its appearance when the user selection changes!",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "05-visualization.html#full-code-1",
    "href": "05-visualization.html#full-code-1",
    "title": "Modelling and visualizing data",
    "section": "3.3 Full code",
    "text": "3.3 Full code\n\n\nFull code for reactive plotting\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(GGally)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      ),\n      ### 3.3.3 Tab: Model data ----\n      tabItem(\n        tabName = \"tab_model\",\n        fluidRow(\n          column(\n            width = 6,\n            #### Inputs(s) ----\n            box(\n              width = 12,\n              title = \"Select variables\",\n              status = \"primary\",\n              selectInput(\n                \"model_x\",\n                label = \"Select a dependent variable\",\n                choices = setNames(names(variable_names), variable_names),\n                selected = \"Literacy\"\n              ),\n              selectizeInput(\n                \"model_y\",\n                label = \"Select independent variables\",\n                choices = setNames(names(variable_names), variable_names),\n                multiple = TRUE,\n                selected = \"Commerce\"\n              ),\n              checkboxInput(\n                \"model_std\",\n                label = \"Standardize variables?\",\n                value = TRUE\n              ),\n              hr(),\n              actionButton(\n                \"refresh\",\n                label = \"Apply changes\",\n                icon = icon(\"refresh\"),\n                flat = TRUE\n              )\n            )\n          ),\n          column(\n            width = 6,\n            ##### Box: Pair diagramm ----\n            box(\n              width = 12,\n              title = \"Pair diagram\",\n              status = \"primary\",\n              plotOutput(\"pairplot\")\n            )\n            # A fourth box can go here :)\n          )\n        )\n      )\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n  ### Define & estimate model ----\n  dat &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(data_guerry)[c(x, y)]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    \n    dt\n  }) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n  \n  ### Pair diagram ----\n  output$pairplot &lt;- renderPlot({\n    GGally::ggpairs(dat(), axisLabels = \"none\")\n  })\n}\n\nshinyApp(ui, server)",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "05-visualization.html#plotly",
    "href": "05-visualization.html#plotly",
    "title": "Modelling and visualizing data",
    "section": "4.1 Plotly",
    "text": "4.1 Plotly\n\nPlotly is an open-source library to create charts that can be interacted with in various ways\nIt supports several programming languages including R and works seamlessly with Shiny\n\n\n\nCode to re-produce the Plotly figure\nmtcars$am[which(mtcars$am == 0)] &lt;- 'Automatic'\nmtcars$am[which(mtcars$am == 1)] &lt;- 'Manual'\nmtcars$am &lt;- as.factor(mtcars$am)\n\n\nplot_ly(\n  mtcars,\n  x = ~wt,\n  y = ~hp,\n  z = ~qsec,\n  color = ~am,\n  colors = c('#BF382A', '#0C4B8E')) %&gt;%\n  add_markers() %&gt;%\n  layout(scene = list(\n    xaxis = list(title = 'Weight'),\n    yaxis = list(title = 'Gross horsepower'),\n    zaxis = list(title = '1/4 mile time')\n  ))",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "05-visualization.html#plotly-and-shiny",
    "href": "05-visualization.html#plotly-and-shiny",
    "title": "Modelling and visualizing data",
    "section": "4.2 Plotly and Shiny",
    "text": "4.2 Plotly and Shiny\n\nPlotly requires similar components as plain plotting:\n\nplotlyOutput() creates the UI component\nrenderPlotly() does the plotting and updates the UI component\n\n\n\nmodel &lt;- tabItem(\n    \"tab_model\",\n    fluidRow(\n        column(\n            width = 6,\n            #### Box: Select variables ----\n      box(\n                width = 12,\n                title = \"Select variables\",\n                status = \"primary\",\n                selectInput(\n                    \"model_x\",\n                    label = \"Select a dependent variable\",\n                    choices = setNames(names(variable_names), variable_names),\n                    selected = \"Literacy\"\n                ),\n                selectizeInput(\n                    \"model_y\",\n                    label = \"Select independent variables\",\n                    choices = setNames(names(variable_names), variable_names),\n                    multiple = TRUE,\n                    selected = \"Commerce\"\n                ),\n                checkboxInput(\n                    \"model_std\",\n                    label = \"Standardize variables?\",\n                    value = TRUE\n                ),\n                hr(),\n                actionButton(\n                    \"refresh\",\n                    label = \"Apply changes\",\n                    icon = icon(\"refresh\"),\n                    flat = TRUE\n                )\n            )\n        ),\n        #### Box: Pair diagramm ----\n        column(\n            width = 6,\n        box(\n                width = 12,\n                title = \"Pair diagram\",\n                status = \"primary\",\n1                plotly::plotlyOutput(\"pairplot\")\n            )\n        )\n    )\n)\n\n\n1\n\nThis is the only thing that changes on the UI side when implementing Plotly. Plotly does not produce regular static plots and thus needs a special output widget.",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "05-visualization.html#ggplotly-on-the-server-side",
    "href": "05-visualization.html#ggplotly-on-the-server-side",
    "title": "Modelling and visualizing data",
    "section": "4.3 ggplotly on the server side",
    "text": "4.3 ggplotly on the server side\n\nPlotly introduces a very comprehensive plotting system centered around the plot_ly() function\nLucky for us, all we have to do is call ggplotly() on our ggplot object to convert it to a plotly object\n\n\ndat &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(guerry)[c(x, y)]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    dt\n}) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n\n1output$pairplot &lt;- plotly::renderPlotly({\n    p &lt;- GGally::ggpairs(dat(), axisLabels = \"none\")\n2    plotly::ggplotly(p)\n})\n\n\n1\n\nAs Plotly plots are not static plots, we need to use a special rendering function called plotly::renderPlotly()\n\n2\n\nJust as on the UI side, we need not change much on the server side. Just wrap your ggplot2 object in a call to plotly::ggplotly().",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "05-visualization.html#extending-plotly",
    "href": "05-visualization.html#extending-plotly",
    "title": "Modelling and visualizing data",
    "section": "4.4 Extending Plotly",
    "text": "4.4 Extending Plotly\n\nSo far we made ggplot2 plots and converted them to Plotly charts using a single function call\nMany aspects of Plotly charts remain out of control as we are not using the plot_ly() function\n\n\n4.4.1 Plotly’s customization functions\n\nWe can extend Plotly objects using three functions:\n\nlayout() changes the plot organisation (think ggplot2::theme()), e.g.:\n\ncolors, sizes, fonts, positions, titles, ratios and alignment of all kinds of plot elements\nupdatemenus adds buttons or drop down menus that can change the plot style or layout (see here for examples)\nsliders adds sliders that can be useful for time series (see here for examples)\n\nconfig() changes interactivity configurations, e.g.:\n\nThe modeBarButtons options and displaylogo control the buttons in the mode bar\ntoImageButtonOptions controls the format of plot downloads\nscrollZoom enables or disables zooming by scrolling\n\nstyle() changes data-level attributes (think ggplot2::scale_), e.g.:\n\nhoverinfo controls whether tooltips are shown on hover\nmode controls whether to show points, lines and/or text in a scatter plot\nhovertext modifies the tooltips texts shown on hover\n\n\n\n\n\n4.4.2 Schema\n\nThe actual number of options is immense!\nYou can explore all options by calling plotly::schema()\n\n\nplotly::schema()\n\n\n\n\n\n\n\n\n4.4.3 Example\n\nFor our app, we can clean up the mode bar and enhance the plot download\n\n\nggplotly(p) %&gt;%\n  config(\n1    modeBarButtonsToRemove = c(\n        \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n            \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n        ),\n2    displaylogo = FALSE,\n3        toImageButtonOptions = list(\n            format = \"svg\",\n            filename = \"guerry_plot\",\n            height = NULL,\n            width = NULL\n        ),\n4        scrollZoom = TRUE\n    )\n\n\n1\n\nRemoves specified buttons from the modebar\n\n2\n\nRemoves the Plotly logo\n\n3\n\nChanges the output of snapshots taken of the plot. Setting height and width to NULL keeps the aspect ratio of the plot as it is shown in the app.\n\n4\n\nEnables zooming through scrolling",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "05-visualization.html#full-code-2",
    "href": "05-visualization.html#full-code-2",
    "title": "Modelling and visualizing data",
    "section": "4.5 Full code",
    "text": "4.5 Full code\n\n\nFull code for interactive visualization\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(GGally)\nlibrary(datawizard)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      ),\n      ### 3.3.3 Tab: Model data ----\n      tabItem(\n        tabName = \"tab_model\",\n        fluidRow(\n          column(\n            width = 6,\n            #### Inputs(s) ----\n            box(\n              width = 12,\n              title = \"Select variables\",\n              status = \"primary\",\n              selectInput(\n                \"model_x\",\n                label = \"Select a dependent variable\",\n                choices = setNames(names(variable_names), variable_names),\n                selected = \"Literacy\"\n              ),\n              selectizeInput(\n                \"model_y\",\n                label = \"Select independent variables\",\n                choices = setNames(names(variable_names), variable_names),\n                multiple = TRUE,\n                selected = \"Commerce\"\n              ),\n              checkboxInput(\n                \"model_std\",\n                label = \"Standardize variables?\",\n                value = TRUE\n              ),\n              hr(),\n              actionButton(\n                \"refresh\",\n                label = \"Apply changes\",\n                icon = icon(\"refresh\"),\n                flat = TRUE\n              )\n            )\n          ),\n          column(\n            width = 6,\n            ##### Box: Pair diagramm ----\n            box(\n              width = 12,\n              title = \"Pair diagram\",\n              status = \"primary\",\n              plotly::plotlyOutput(\"pairplot\")\n            )\n            # A fourth box can go here :)\n          )\n        )\n      )\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n  ### Define & estimate model ----\n  dat &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(data_guerry)[c(x, y)]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    \n    dt\n  }) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n  \n  ### Pair diagram ----\n  output$pairplot &lt;- plotly::renderPlotly({\n    p &lt;- GGally::ggpairs(dat(), axisLabels = \"none\")\n    \n    ggplotly(p) %&gt;%\n      config(\n        modeBarButtonsToRemove = plotly_buttons,\n        displaylogo = FALSE,\n        toImageButtonOptions = list(\n          format = \"svg\",\n          filename = \"guerry_plot\",\n          height = NULL,\n          width = NULL\n        ),\n        scrollZoom = TRUE\n      )\n  })\n}\n\nshinyApp(ui, server)",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "05-visualization.html#good-practices",
    "href": "05-visualization.html#good-practices",
    "title": "Modelling and visualizing data",
    "section": "5.1 Good practices",
    "text": "5.1 Good practices\n\nAppsilon’s US bee colony monitor provides an easy way to compare aggregated numbers, between-state and within-state distributions side-by-side\nWith a little bit of creativity, Shiny can be a very competent story teller (for an impressive example, take a look at John Coene’s Freedom of Press Shiny app)",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "05-visualization.html#extending-the-layout",
    "href": "05-visualization.html#extending-the-layout",
    "title": "Modelling and visualizing data",
    "section": "5.2 Extending the layout",
    "text": "5.2 Extending the layout\n\nHere, we will extend our lonely plot with a regression analysis to tell the full story of the associations of the Guerry indicators\nWe add three types of visualization: a coefficient plot, a scatter plot and a regression table\nThe three plots are tucked in a tabBox, a bs4Dash::box that supports tab panels\n\n\nmodel &lt;- tabItem(\n    \"tab_model\",\n    fluidRow(\n        column(\n            width = 6,\n            #### Box: Select variables ----\n      box(\n                width = 12,\n                title = \"Select variables\",\n                status = \"primary\",\n                selectInput(\n                    \"model_x\",\n                    label = \"Select a dependent variable\",\n                    choices = setNames(names(variable_names), variable_names),\n                    selected = \"Literacy\"\n                ),\n                selectizeInput(\n                    \"model_y\",\n                    label = \"Select independent variables\",\n                    choices = setNames(names(variable_names), variable_names),\n                    multiple = TRUE,\n                    selected = \"Commerce\"\n                ),\n                checkboxInput(\n                    \"model_std\",\n                    label = \"Standardize variables?\",\n                    value = TRUE\n                ),\n                hr(),\n                actionButton(\n                    \"refresh\",\n                    label = \"Apply changes\",\n                    icon = icon(\"refresh\"),\n                    flat = TRUE\n                )\n            ),\n      #### Box: Coefficient/Scatterplot ----\n1            tabBox(\n              status = \"primary\",\n              width = 12,\n2              type = \"tabs\",\n              ##### Tab: Coefficient plot ----\n3              tabPanel(\n                title = \"Plot: Coefficients\",\n                plotly::plotlyOutput(\"coefficientplot\")\n              ),\n              ##### Tab: Scatterplot ----\n4              tabPanel(\n                title = \"Plot: Scatterplot\",\n                plotly::plotlyOutput(\"scatterplot\")\n              ),\n              ##### Tab: Table: Regression ----\n5              tabPanel(\n                title = \"Table: Model\",\n                htmlOutput(\"tableregression\")\n              )\n            )\n        ),\n        #### Box: Pair diagramm ----\n        column(\n            width = 6,\n        box(\n                width = 12,\n                title = \"Pair diagram\",\n                status = \"primary\",\n                plotly::plotlyOutput(\"pairplot\")\n            )\n        )\n    )\n)\n\n\n1\n\nAdds a new tabBox() which can contain multiple tabPanel()\n\n2\n\nSpecify the appearance of the tabs. pills fills the entire tab panel with the status color while tabs is more subtle in its coloring.\n\n3\n\nAdd a tab that holds a Plotly coefficient plot\n\n4\n\nAdd a tab that holds a Plotly scatter plot\n\n5\n\nAdd a tab that holds a HTML regression table",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "05-visualization.html#digesting-the-new-layout",
    "href": "05-visualization.html#digesting-the-new-layout",
    "title": "Modelling and visualizing data",
    "section": "5.3 Digesting the new layout",
    "text": "5.3 Digesting the new layout\n\nQuestion: What did we add here? Which outputs need to be filled with content?\nOn the server side, we extend our reactive object with a linear regression model\n\n\n1mparams &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(guerry)[c(x, y)]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n2    form &lt;- as.formula(paste(x, \"~\", paste(y, collapse = \" + \")))\n    mod &lt;- lm(form, data = dt)\n\n3    list(x = x, y = y, data = dt,   model = mod)\n}) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n\n\n1\n\nWe renamed the dat() reactive object to mparams() as it now holds multiple arguments instead of just one dataframe\n\n2\n\nCreate a formula and produce the linear regression output\n\n3\n\nReturn a list of arguments to be used for the outputs",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "05-visualization.html#creating-the-output",
    "href": "05-visualization.html#creating-the-output",
    "title": "Modelling and visualizing data",
    "section": "5.4 Creating the output",
    "text": "5.4 Creating the output\n\nFrom this point, we can chuck the mparams reactive object into all the rendering functions\n\n\n### Pair diagram ----\n1output$pairplot &lt;- renderPlotly({\n    p &lt;- GGally::ggpairs(mparams()$data, axisLabels = \"none\")\n    ggplotly(p)\n})\n\n### Plot: Coefficientplot ----\n2output$coefficientplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    x &lt;- params$x\n    y &lt;- params$y\n\n    p &lt;- plot(parameters::model_parameters(params$model))\n\n    ggplotly(p)\n})\n\n### Plot: Scatterplot ----\n3output$scatterplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    x &lt;- params$x\n    y &lt;- params$y\n\n\n    if (length(y) == 1) {\n      p &lt;- ggplot(params$data,\n                  aes(x = .data[[params$x]],\n                      y = .data[[params$y]])) +\n        geom_point() +\n        geom_smooth() +\n        theme_light()\n    } else {\n      p &lt;- ggplot() +\n        theme_void() +\n        annotate(\"text\",\n                 label = \"Cannot create scatterplot.\\nMore than two variables selected.\",\n                 x = 0, y = 0,\n                 size = 5,\n                 colour = \"red\",\n                 hjust = 0.5,\n                 vjust = 0.5) +\n      xlab(NULL)\n\n    }\n\n    ggplotly(p)\n})\n\n### Table: Regression ----\n4output$tableregression &lt;- renderUI({\n    params &lt;- mparams()\n    HTML(modelsummary(\n        dvnames(list(params$model)),\n      gof_omit = \"AIC|BIC|Log|Adj|RMSE\"\n    ))\n})\n\n\n1\n\nAgain, we need to change the input to the ggpairs() function as the name and structure of the reactive object has changed.\n\n2\n\nCreate a Plotly coefficient plot using the parameters package\n\n3\n\nCreate a Plotly scatter plot for bi-variate regression. If more than one y variable is selected, an empty plot and a warning message is created.\n\n4\n\nCreate a model table using the modelsummary package and prepare it for HTML rendering.",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "05-visualization.html#full-code-3",
    "href": "05-visualization.html#full-code-3",
    "title": "Modelling and visualizing data",
    "section": "5.5 Full code",
    "text": "5.5 Full code\n\n\nFull code for contextual visualization\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(datawizard)\nlibrary(parameters)\nlibrary(performance)\nlibrary(modelsummary)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      ),\n      ### 3.3.3 Tab: Model data ----\n      tabItem(\n        tabName = \"tab_model\",\n        fluidRow(\n          column(\n            width = 6,\n            #### Inputs(s) ----\n            box(\n              width = 12,\n              title = \"Select variables\",\n              status = \"primary\",\n              selectInput(\n                \"model_x\",\n                label = \"Select a dependent variable\",\n                choices = setNames(names(variable_names), variable_names),\n                selected = \"Literacy\"\n              ),\n              selectizeInput(\n                \"model_y\",\n                label = \"Select independent variables\",\n                choices = setNames(names(variable_names), variable_names),\n                multiple = TRUE,\n                selected = \"Commerce\"\n              ),\n              checkboxInput(\n                \"model_std\",\n                label = \"Standardize variables?\",\n                value = TRUE\n              ),\n              hr(),\n              actionButton(\n                \"refresh\",\n                label = \"Apply changes\",\n                icon = icon(\"refresh\"),\n                flat = TRUE\n              )\n            ),\n            #### Outputs(s) ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model analysis\",\n              side = \"right\",\n              width = 12,\n              ##### Tabpanel: Coefficient plot ----\n              tabPanel(\n                title = \"Plot: Coefficients\",\n                plotly::plotlyOutput(\"coefficientplot\")\n              ),\n              ##### Tabpanel: Scatterplot ----\n              tabPanel(\n                title = \"Plot: Scatterplot\",\n                plotly::plotlyOutput(\"scatterplot\")\n              ),\n              ##### Tabpanel: Table: Regression ----\n              tabPanel(\n                title = \"Table: Model\",\n                htmlOutput(\"tableregression\")\n              )\n            )\n          ),\n          column(\n            width = 6,\n            ##### Box: Pair diagramm ----\n            box(\n              width = 12,\n              title = \"Pair diagram\",\n              status = \"primary\",\n              plotly::plotlyOutput(\"pairplot\")\n            )\n            # A fourth box can go here :)\n          )\n        )\n      )\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n  ### Define & estimate model ----\n  mparams &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(data_guerry)[c(x, y)]\n    dt_labels &lt;- sf::st_drop_geometry(data_guerry)[c(\"Department\", \"Region\")]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    form &lt;- as.formula(paste(x, \"~\", paste(y, collapse = \" + \")))\n    mod &lt;- lm(form, data = dt)\n    \n    list(\n      x = x,\n      y = y,\n      data = dt,\n      data_labels = dt_labels,\n      model = mod\n    )\n  }) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n  \n  ### Pair diagram ----\n  output$pairplot &lt;- plotly::renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    p &lt;- GGally::ggpairs(params$data, axisLabels = \"none\")\n\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Coefficientplot ----\n  output$coefficientplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    x &lt;- params$x\n    y &lt;- params$y\n    \n    p &lt;- plot(parameters::model_parameters(params$model))\n    \n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Scatterplot ----\n  output$scatterplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    x &lt;- params$x \n    y &lt;- params$y\n    \n    \n    if (length(y) == 1) {\n      p &lt;- ggplot(params$data, \n                  aes(x = .data[[params$x]], \n                      y = .data[[params$y]])) +\n        geom_point(aes(text = paste0(\"Department: \", \n                                     dt_labels[[\"Department\"]],\n                                     \"&lt;br&gt;Region: \", \n                                     dt_labels[[\"Region\"]])),\n                   color = \"black\") +\n        geom_smooth() + \n        geom_smooth(method = \"lm\") +\n        theme_light()\n    } else {\n      p &lt;- ggplot() +\n        theme_void() +\n        annotate(\"text\", \n                 label = \"Cannot create scatterplot.\\nMore than two variables selected.\", \n                 x = 0, y = 0, \n                 size = 5, \n                 colour = \"red\",\n                 hjust = 0.5,\n                 vjust = 0.5) +\n        xlab(NULL)\n      \n    }\n    \n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Table: Regression ----\n  output$tableregression &lt;- renderUI({\n    params &lt;- mparams()\n    HTML(modelsummary(\n      dvnames(list(params$model)),\n      gof_omit = \"AIC|BIC|Log|Adj|RMSE\"\n    ))\n  })\n}\n\nshinyApp(ui, server)",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "03-user-interface.html",
    "href": "03-user-interface.html",
    "title": "User Interface (UI): Designing the front end",
    "section": "",
    "text": "Learning outcomes:\n\nUnderstand logic underlying user interfaces in Shiny\nLearn how to create UIs using different layouts, inputs and outputs\nBecome familiar with various UI widgets\nCreate the foundations for reactive plots, tables, and maps\nSources: Wickham (2021, Ch. 2)",
    "crumbs": [
      "User Interface (UI): Designing the front end"
    ]
  },
  {
    "objectID": "03-user-interface.html#basics",
    "href": "03-user-interface.html#basics",
    "title": "User Interface (UI): Designing the front end",
    "section": "1 Basics",
    "text": "1 Basics\n\nShiny encourages separation of code that generates UI (front end) from code that drives app’s behaviour (server/back end).\nHere focus on front end & tour of Shiny inputs and outputs\n\nwon’t stitch inputs and outputs together yet\n\nprimary focus on native Shiny components (contained in Shiny package) but vibrant community (see awesome shiny extenstions)",
    "crumbs": [
      "User Interface (UI): Designing the front end"
    ]
  },
  {
    "objectID": "03-user-interface.html#ui-layout",
    "href": "03-user-interface.html#ui-layout",
    "title": "User Interface (UI): Designing the front end",
    "section": "2 UI: Layout",
    "text": "2 UI: Layout\n\nAny Shiny app consists of ui, server and shinyApp(ui=ui, server = server)\n\nui &lt;- function(): function is used to create UI\n\nUI then displays different inputs and outputs\n\nShiny provides different functions that can be used to create basic layouts\n\nfluidPage() creates the classic fluid page layout\ndashboardPage() create a dashboard layout (Guerry dashboard uses that!)\n\n\n2.1 fluidPage\n\nfluidPage(): Creates most basic layout\n\ndisplay that automatically adjusts to user’s browser dimensions (smartphone!)\nlayout consists of rows containing columns\n\nrows making sure elements appear on the same line\ncolumns define how much horizontal space elements should occupy (within a 12-unit wide grid)\n\n\nBelow a UI with title panel and sidebar panel\n\ntitlePanel() and sidebarLayout() create a basic Shiny app/layout with a sidebar\nsidebarLayout() takes two functions\n\nsidebarPanel(): Includes content displayed in the sidebar\nmainPanel(): Includes content displayed in the main panel\n\n\n\nfluidRow() and column(): Divide ui into rows/columns\n\nTry the code below by pasting it into your console and running it. It will only create a user interface.\n\n\n\nCode: Creating a simple UI\nui &lt;- fluidPage(\n  titlePanel(\"This is the title panel\"),\n  \n  sidebarLayout(\n    sidebarPanel( \"Title: Sidebar panel\"),\n    \n    mainPanel(\"Title: Main panel\",\n              fluidRow(\n                column(width = 4,\"Column 1: Description here\"),\n                column(width = 4, \"Column 2: Model summary\")\n                ,\n                column(width = 3, \n                       offset = 1, \n                       \"Column 3: Model visualization\")\n              )\n  )))\n\nserver &lt;- function(input, output, session){}\n\nshinyApp(ui=ui, server = server)\n\n\n\nChange sidebarLayout(position = \"right\",...) to position sidebar on the right\nnavbarPage(): Create a multi-page user-interface that includes a navigation bar\nSometimes adding borders helps..\n\n\n\nCode: Adding borders for better understanding of UI\nui &lt;- fluidPage(\n  titlePanel(\"This is the title panel\"),\n  \n  sidebarLayout(\n    sidebarPanel( \"Title: Sidebar panel\"),\n    \n    mainPanel(\"Title: Main panel\",\n              fluidRow(\n                column(style='border: 1px solid black',\n                       width = 4,\"\n                       Column 1: Description here\"),\n                column(style='border: 1px solid black',\n                       width = 4, \"Column 2: Model summary\")\n                ,\n                column(style='border: 1px solid black',\n                       width = 3, \n                       offset = 1, \n                       \"Column 3: Model visualization\")\n              )\n    )))\n\nserver &lt;- function(input, output, session){}\n\nshinyApp(ui=ui, server = server)\n\n\n\n2.1.1 Creating panels and tabs\n\ntabsetPanel() + tabPanel()\n\nAllows for using sidebar layout but dividing main panel into tabs\nUsers can switch between tabs that can be used to display various outputs simultanously\n\n\n\nui &lt;- fluidPage(\n  titlePanel(\"This is the title panel\"),\n  \n  sidebarLayout(\n    sidebarPanel( \"This is the sidebar panel\"),\n    \n    mainPanel(\n      tabsetPanel(type = \"tabs\",\n                  tabPanel(\"3d Frequency Plot\", \n                           \"Tab 1: plot here\"),\n                  tabPanel(\"Histogram\", \n                           \"Tab 2: another plot here\"),\n                  tabPanel(\"Model Summary\", \n                           h4(\"Tab 3: estimation results here\")),\n                  tabPanel(\"Data Summary\", \n                           h4(\"Tab 4: Variable summaries\"))\n      ))))\n  \n  server &lt;- function(input, output, session){}\n  \n  shinyApp(ui=ui, server = server)\n\n\n\n\n2.2 dashboardPage\n\ndashboardPage(): creates a dashboard interface (underlying Guerry app!)\n\nfunction contained in packages shinydashboard and bs4Dash (use bs4Dash1!)\ndashboardHeader(): creates a dashboard header\ndashboardSidebar(): Creates dashboard sidebar\n\nsidebar typically contains a sidebarMenu, although it may also contain a sidebarSearchForm, or other Shiny inputs.\n\ndashboardBody(): creates main body typically containing boxes or tabItems\n\n\n\nlibrary(bs4Dash)\n# UI ----\nui &lt;- dashboardPage(title = \"The Guerry Dashboard\",\n\n  ### Header ----\n  header = dashboardHeader(),\n\n  ### Sidebar ----\n  sidebar = dashboardSidebar(),\n\n  ### Body ----\n  body = dashboardBody()\n)\n\n# Server ----\nserver &lt;- function(input, output, session) {}\n\nshinyApp(ui, server)\n\n\n2.2.1 Creating items and tabs\n\n?sidebarMenu(): create sidebarMenu within dashboardSidebar\n\nmenuItem(tabName = \"...\", text = \"...\", icon = icon(\"table\")): Creates one item in sidebarMenu\n\ntabItems(): creates container for tab items\n\ntabItem(tabName = \"insp\", ...): creates tab to put inside a tab items container\ncan be combined with fluidRow() and column()\nConnection through name tabName argument\n\n\n\nlibrary(bs4Dash)\n# UI ----\nui &lt;- dashboardPage(title = \"The Guerry Dashboard\",\n\n  ### Header ----\n  header = dashboardHeader(\n    title = \"Title here\"\n  ),\n\n  ### Sidebar ----\n  sidebar = dashboardSidebar(\n    sidebarMenu(\n      menuItem(tabName = \"tab_table\", \n               text = \"Table data\", \n               icon = icon(\"table\"))\n    )\n  ),\n  ### Body ----\n  body = dashboardBody(\n    tabItems( # start tabItems\n\n      tabItem(\n        tabName = \"tab_table\",\n        hr(), # add separation line\n        \"Here we will put a table\"\n      )\n      \n    ) # end tabItems\n  )\n) # End UI\n\n\n# Server ----\nserver &lt;- function(input, output, session) {}\n\nshinyApp(ui, server)\n\n\n\n\n2.3 Images\n\nimg() function places an image\n\nimg(src = \"http://.../img-2.jpg\", height = 35, width = 35): Load image from website or folder\n\nStore image(s) locally\n\nwww subfolder stores all sorts of additional files(images, data etc.)\nIf working directory = app directory create with: dir.create(\"www\")\nIMAGES PLACED UNDER www SHOULD BE REFERENCES WITHOUT THE www FOLDER NAME\n\ne.g., img(src = \"guerry.jpg\", width = \"100%\")\n\n\n\n\n\nCode: Adding images\n1ui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  \n  ### Header ----\n2  header = dashboardHeader(\n3    span(style = \"display: inline-block; width: 100%;\"),\n4    a(\n      class = \"logo\",\n      href = \"https://gesis.org/\",\n      img(src = \"gesis-logo.png\", style = \"height: 1.8em;\")\n    ),\n5    title = tagList(\n      img(src = \"workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  \n  ### Sidebar ----\n6  sidebar = dashboardSidebar(\n    sidebarMenu(\n7      menuItem(tabName = \"tab_image\",\n               text = \"Image section\", \n               icon = icon(\"image\"))\n    )\n  ),\n  ### Body ----\n8  body = dashboardBody(\n9    tabItems(\n10      tabItem(\"tab_image\",\n              img(src = \"https://journals.openedition.org/belgeo/docannexe/image/11893/img-1.jpg\", width = 358, height = 476)\n      )\n    ) # end tabItems\n  )\n) # End UI\n\n# Server ----\n\n11server &lt;- function(input, output, session) {}\n\n12shinyApp(ui, server)\n\n\n\n1\n\ndashboardPage(): Main function to create a dashboard page layout in Shiny.\n\n2\n\ndashboardHeader(): Function to set up the header part of the dashboard.\n\n3\n\nspan(): Function to create an HTML span element with a style attribute to control its display.\n\n4\n\na(): Function to create a hyperlink element (“a” HTML tag) with a specified class, href attribute (URL), and nested img (image) element.\n\n5\n\ntagList(): Function to create an HTML list from arguments. Here it’s used to group the title components together.\n\n6\n\ndashboardSidebar(): Function to create the sidebar of the dashboard.\n\n7\n\nmenuItem(): Function to add an item to the sidebar menu.\n\n8\n\ndashboardBody(): Function to create the body of the dashboard.\n\n9\n\ntabItems(): Function to create tabbed content sections. The arguments are pairs of tab names and tab content.\n\n10\n\ntabItem(): Function to create a single tab item. Its arguments are a tab name and its content.\n\n11\n\nserver: Placeholder for server logic. In this case, it’s empty.\n\n12\n\nshinyApp(ui, server): Main function to create a Shiny app. It takes as arguments the UI and server definitions.\n\n\n\n\n\n2.3.1 Add several images\n\nBelow some exemplary code to add several images, i.e., simply repeat the img() function\n\n\n\nCode: Adding images\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  \n  ### Header ----\n  header = dashboardHeader(\n    span(style = \"display: inline-block; width: 100%;\"),\n    a(\n      class = \"logo\",\n      href = \"https://gesis.org/\",\n      img(src = \"gesis-logo.png\", style = \"height: 1.8em;\")\n    ),\n    title = tagList(\n      img(src = \"workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  \n  ### Sidebar ----\n  sidebar = dashboardSidebar(\n    sidebarMenu(\n      menuItem(tabName = \"tab_image\",\n               text = \"Image section\", \n               icon = icon(\"image\"))\n    )\n  ),\n  ### Body ----\n  body = dashboardBody(\n    tabItems( \n      tabItem(\"tab_image\",\n              img(src = \"https://journals.openedition.org/belgeo/docannexe/image/11893/img-1.jpg\", width = 358, height = 476),\n                            img(src = \"https://journals.openedition.org/belgeo/docannexe/image/11893/img-1.jpg\", width = 358, height = 476)\n      )\n    ) # end tabItems\n  )\n) # End UI\n\n# Server ----\n\nserver &lt;- function(input, output, session) {}\n\nshinyApp(ui, server)\n\n\n\n\n\n2.4 Exercise: UI layout\n\nFamiliarize yourself and use the code in Section 2.3.\nChange the website title to “A big name in politics”\nChange the sidebar menu title with “The Arni dashboard”.\nReplace the image of Guerry with an image Arnold Schwarzenegger from the web, e.g., here.\n\n\nEither store the image in a www subfolder of your app directory or use the URL in your code.\n\n\n\n\n\n\n\nSolution: Using image from link\n\n\n\n\n\n\n# UI ----\nui &lt;- dashboardPage(\n  title = \"A big name in politics\",\n  \n  ### Header ----\n  header = dashboardHeader(\n    span(style = \"display: inline-block; width: 100%;\"),\n    a(\n      class = \"logo\",\n      href = \"https://gesis.org/\",\n      img(src = \"gesis-logo.png\", style = \"height: 1.8em;\")\n    ),\n    title = tagList(\n      img(src = \"workshop-logo.png\", width = 35, height = 35),\n      span(\"The Arni Dashboard\", class = \"brand-text\")\n    )\n  ),\n  \n  ### Sidebar ----\n  sidebar = dashboardSidebar(\n    sidebarMenu(\n      menuItem(tabName = \"tab_image\", \n               text = \"Image section\", \n               icon = icon(\"image\"))\n    )\n  ),\n  ### Body ----\n  body = dashboardBody(\n    tabItems( # start tabItems\n      tabItem(\"tab_image\",\n              img(src = \"http://assets.schwarzenegger.com/images/img-2.jpg\", \n                  width = 729, height = 423)\n      )\n    ) # end tabItems\n  )\n) # End UI\n\n# Server ----\n\nserver &lt;- function(input, output, session) {}\n\nshinyApp(ui, server)\n\n\n\n\n\n\n\n\n\n\nSolution: Using image from www folder\n\n\n\n\n\n\nCheck the directory you are in with getwd().\nMake sure the app.R file you are using is saved in this directory.\nUse dir.create(\"www\") or the buttons in Rstudio to create the www folder.\nStore the image from the link in this www folder.\nAdd the image name simply in the code img(src = \"img-2.jpg\", width = 729, height = 423) (see below).\n\n\nIMAGES PLACED UNDER www SHOULD BE REFERENCES WITHOUT THE www FOLDER NAME\n\n\nRun the app.\n\n\n# UI ----\nui &lt;- dashboardPage(\n  title = \"A big name in politics\",\n  \n  ### Header ----\n  header = dashboardHeader(\n    span(style = \"display: inline-block; width: 100%;\"),\n    a(\n      class = \"logo\",\n      href = \"https://gesis.org/\",\n      img(src = \"gesis-logo.png\", style = \"height: 1.8em;\")\n    ),\n    title = tagList(\n      img(src = \"workshop-logo.png\", width = 35, height = 35),\n      span(\"The Arni Dashboard\", class = \"brand-text\")\n    )\n  ),\n  \n  ### Sidebar ----\n  sidebar = dashboardSidebar(\n    sidebarMenu(\n      menuItem(tabName = \"tab_image\", \n               text = \"Image section\", \n               icon = icon(\"image\"))\n    )\n  ),\n  ### Body ----\n  body = dashboardBody(\n    tabItems( # start tabItems\n      tabItem(\"tab_image\",\n              img(src = \"img-2.jpg\", \n                  width = 729, height = 423)\n      )\n    ) # end tabItems\n  )\n) # End UI\n\n# Server ----\n\nserver &lt;- function(input, output, session) {}\n\nshinyApp(ui, server)",
    "crumbs": [
      "User Interface (UI): Designing the front end"
    ]
  },
  {
    "objectID": "03-user-interface.html#ui-inputs",
    "href": "03-user-interface.html#ui-inputs",
    "title": "User Interface (UI): Designing the front end",
    "section": "3 UI: Inputs",
    "text": "3 UI: Inputs\n\n3.1 UI Inputs: common structure\n\ninputId argument:\n\ninputId connects front end with back end, e.g., if UI has input with ID name, the server function will access it with input$name\nname` = simple string (only letters, numbers, and underscores) and unique\nInputs are stored in list called input$...\n\nlabel argument: Used to create human-readable label\nvalue argument: usually let’s you set default value\nRemaining 4-x arguments are unique to the particular input\nRecommendation: Supply inputId and label arguments by position, and all other arguments by name\n\nQ: How would we read the following?\n\nsliderInput(\"min\", \"Limit (minimum)\", value = 50, min = 0, max = 100)\n\n\n\n\n\n3.2 UI Inputs: Logic\n\nWidget = Web element the user can interact with (Shiny widget gallery)\n\nUsers can send messages to the SERVER/Computer (e.g. “I want to choose this variable”)\n\nUnderlying logic is the same for all widgets\n\nUser uses widget to give input\nInput is inserted into the functions in the SERVER\n\nserver &lt;- function(input, output, session) {}\n\n\nshiny package contains many widgets\n\nAdditional ones for instance in shinyWidgets package (e.g., pickerInput())\n\n\n\n\n3.3 UI Inputs: Examples\n\nYou can run the code for the Shiny app below in R.\n\n\nlibrary(shinyWidgets) # Install!\n\nanimals &lt;- c(\"dog\", \"cat\", \"mouse\") # Predefining some categories\n\nui &lt;- fluidPage(\n  \n  # Free text\n  textInput(\"name\", \"What's your name?\"),\n  passwordInput(\"password\", \"What's your password?\"),\n  textAreaInput(\"story\", \"Tell me about yourself\", rows = 3),\n  \n  # Numeric inputs\n  numericInput(\"num\", \"Number one\", value = 0, min = 0, max = 100),\n  sliderInput(\"num2\", \"Number two\", value = 50, min = 0, max = 100),\n  sliderInput(\"rng\", \"Range\", value = c(10, 20), min = 0, max = 100),\n  \n  # Dates\n  dateInput(\"dob\", \"When were you born?\"),\n  dateRangeInput(\"holiday\", \"When do you want to go on vacation next?\"),\n  \n  # Limited choices\n  selectInput(\"state\", \"What's your favourite animal?\", animals),\n  radioButtons(\"animal\", \"What's your favourite animal?\", animals),\n  selectInput( \"state\", \"What's your favourite animal?\", animals, multiple = TRUE),\n  checkboxGroupInput(\"animal2\", \"What animals do you like?\", animals),\n  pickerInput(\n    inputId = \"animal3\",\n    label = \"What animals do you like?\",\n    choices = animals\n  ),\n  \n  # Single checkbox\n  checkboxInput(\"cleanup\", \"Clean up?\", value = TRUE),\n  checkboxInput(\"shutdown\", \"Shutdown?\"),\n  \n  # File uploads\n  fileInput(\"upload\", NULL),\n  \n  # Action buttons\n  actionButton(\"click\", \"Click me!\"),\n  actionButton(\"drink\", \"Drink me!\", icon = icon(\"cocktail\"))\n)\n\nserver &lt;- function(input, output, session) {}\n\nshinyApp(ui, server)\n\n\n\n3.4 Exercise(s)\n\nSee Exercises 2.2.8.\n\n\nWhen space is at a premium, it’s useful to label text boxes using a placeholder that appears inside the text entry area. How do you call textInput() to generate the UI in Figure 1 below (see ?textInput)?\n\n\n\n\n\n\n\nFigure 1: Text input (Source: Wickham 2021)\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ntextInput(\"text\", \"\", placeholder = \"Your name\")\n\n\n\n\n\nCarefully read the documentation for sliderInput() to figure out how to create a date slider, as shown below in Figure 2.\n\n\n\n\n\n\n\nFigure 2: Date slider (Source: Wickham 2021)\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nsliderInput(\n  \"dates\",\n  \"When should we deliver?\",\n  min = as.Date(\"2019-08-09\"),\n  max = as.Date(\"2019-08-16\"),\n  value = as.Date(\"2019-08-10\")\n)\n\n\n\n\n\nCreate a slider input to select values between 0 and 100 where the interval between each select able value on the slider is 5. Then, add animation to the input widget so when the user presses play the input widget scrolls through the range automatically.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n  sliderInput(\"number\", \"Select a number:\",\n              min = 0, max = 100, value = 0, \n              step = 5, animate = TRUE)\n\n\n\n\n\nIf you have a moderately long list in a selectInput(), it’s useful to create sub-headings that break the list up into pieces. Read the documentation to figure out how. (Hint: the underlying HTML is called &lt;optgroup&gt;.)\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nselectInput(\n  \"breed\",\n  \"Select your favorite animal breed:\",\n  choices =\n    list(`dogs` = list('German Shepherd', 'Bulldog', \n                       'Labrador Retriever'),\n         `cats` = list('Persian cat', 'Bengal cat', \n                       'Siamese Cat'))\n)\n\n\n\n\n\n\n\n\n\n\nSolution: One app with all the widgets\n\n\n\n\n\n\nui &lt;- fluidPage(\n  textInput(\"text\", \"\", placeholder = \"Your name\"),\n  \n  sliderInput(\n  \"dates\",\n  \"When should we deliver?\",\n  min = as.Date(\"2019-08-09\"),\n  max = as.Date(\"2019-08-16\"),\n  value = as.Date(\"2019-08-10\")\n  ),\n \n    sliderInput(\"number\", \"Select a number:\",\n              min = 0, max = 100, value = 0, \n              step = 5, animate = TRUE),\n  \n  selectInput(\n  \"breed\",\n  \"Select your favorite animal breed:\",\n  choices =\n    list(`dogs` = list('German Shepherd', 'Bulldog', \n                       'Labrador Retriever'),\n         `cats` = list('Persian cat', 'Bengal cat', \n                       'Siamese Cat'))\n)\n  \n)\nserver &lt;- function(input, output, session) {\n  \n  \n}\nshinyApp(ui, server)\n\n\n\n\n\n\n\n\n\n\nSolution: App that displays the input values\n\n\n\n\n\n\nSolution taken from stackoverflow.\n\n\n#rm(list=ls())\nlibrary(shiny)\n\nui &lt;- basicPage(\n  textInput(\"text\", \"\", placeholder = \"Your name\"),\n  \n  sliderInput(\n    \"dates\",\n    \"When should we deliver?\",\n    min = as.Date(\"2019-08-09\"),\n    max = as.Date(\"2019-08-16\"),\n    value = as.Date(\"2019-08-10\")\n  ),\n  \n  sliderInput(\"number\", \"Select a number:\",\n              min = 0, max = 100, value = 0, \n              step = 5, animate = TRUE),\n  \n  selectInput(\n    \"breed\",\n    \"Select your favorite animal breed:\",\n    choices =\n      list(`dogs` = list('German Shepherd', 'Bulldog', \n                         'Labrador Retriever'),\n           `cats` = list('Persian cat', 'Bengal cat', \n                         'Siamese Cat'))),\n  tableOutput('show_inputs')\n)\nserver &lt;- shinyServer(function(input, output, session){\n  \n  AllInputs &lt;- reactive({\n    myvalues &lt;- NULL\n    for(i in 1:length(names(input))){\n      myvalues &lt;- as.data.frame(rbind(myvalues,(cbind(names(input)[i],input[[names(input)[i]]]))))\n    }\n    names(myvalues) &lt;- c(\"User Input\",\"Last Value\")\n    myvalues\n  })\n  \n  output$show_inputs &lt;- renderTable({\n    AllInputs()\n  })\n})\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "User Interface (UI): Designing the front end"
    ]
  },
  {
    "objectID": "03-user-interface.html#ui-outputs",
    "href": "03-user-interface.html#ui-outputs",
    "title": "User Interface (UI): Designing the front end",
    "section": "4 UI: Outputs",
    "text": "4 UI: Outputs\n\nOutputs in UI create placeholders that are later filled by the server function\nHave unique ID as first argument like inputs\n\ne.g., textOutput(\"text\") as ID text that is filled by the server\n\nIf UI specification creates an output with ID text, you’ll access it in the server function with output$text (see below)\nEach output function on the front end is coupled with a render function in the back end (server)\nThree main types of output: text, tables, and plots\n\n\n4.1 Text output\n\nui &lt;- fluidPage(\n  textOutput(\"text\"),\n  verbatimTextOutput(\"code\")\n)\nserver &lt;- function(input, output, session) {\n  output$text &lt;- renderText({ \n    \"Hello friend!\" \n  })\n  output$code &lt;- renderPrint({ \n    summary(1:10) \n  })\n}\nshinyApp(ui, server)\n\n\n\n4.2 Table output\n\nui &lt;- fluidPage(\n  tableOutput(\"static\"),\n  dataTableOutput(\"dynamic\")\n)\nserver &lt;- function(input, output, session) {\n  output$static &lt;- renderTable(head(mtcars))\n  output$dynamic &lt;- renderDataTable(mtcars, options = list(pageLength = 5))\n}\nshinyApp(ui, server)\n\n\n\n4.3 Plots output\n\nui &lt;- fluidPage(\n  plotOutput(\"plot\", width = \"400px\")\n)\nserver &lt;- function(input, output, session) {\n  output$plot &lt;- renderPlot(plot(1:5), res = 96)\n}\nshinyApp(ui, server)\n\n\n\n4.4 Exercise(s)\n\nTaken from Exercises 2.3.5.\n\n\nWhich of textOutput() and verbatimTextOutput() should each of the following render functions be paired with?\n\n\nrenderPrint(summary(mtcars))\nrenderText(\"Good morning!\")\nrenderPrint(t.test(1:5, 2:6))\nrenderText(str(lm(mpg ~ wt, data = mtcars)))\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nui &lt;- fluidPage(\n  verbatimTextOutput(\"mtcarsout1\"),\n  br(), hr(),\n  textOutput(\"mtcarsout2\"),\n  br(), hr(),\n  verbatimTextOutput(\"mtcarsout3\"),\n  br(), hr(),\n  verbatimTextOutput(\"mtcarsout4\")  \n)\nserver &lt;- function(input, output, session) {\n  output$mtcarsout1 &lt;- renderPrint(summary(mtcars))\n  output$mtcarsout2 &lt;- renderText(\"Good morning!\")\n  output$mtcarsout3 &lt;- renderPrint(t.test(1:5, 2:6))\n  output$mtcarsout4 &lt;- renderPrint(str(lm(mpg ~ wt, data = mtcars)))\n}\nshinyApp(ui, server)\n\n\n\n\n\nUpdate the options in the call to renderDataTable() below so that the data is displayed, but all other controls are suppress (i.e. remove the search, ordering, and filtering commands). You’ll need to read ?renderDataTable and review the options at https://datatables.net/reference/option/ or at https://shiny.posit.co/r/gallery/widgets/datatables-options/\n\n\nui &lt;- fluidPage(\n      dataTableOutput(\"table\")\n    )\n    server &lt;- function(input, output, session) {\n      output$table &lt;- renderDataTable(mtcars, options = list(pageLength = 5))\n    }\nshinyApp(ui, server)\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nui &lt;- fluidPage(\n  dataTableOutput(\"table\")\n)\nserver &lt;- function(input, output, session) {\n  output$table &lt;- renderDataTable(mtcars, \n                                  options = list(pageLength = 5,\n                                                 searching = FALSE,\n                                                 paging = FALSE,\n                                                 ordering = FALSE,\n                                                 filtering = FALSE))\n}\nshinyApp(ui, server)\n\n\n\n\n\n\n4.5 Overview of Output functions\n\nOutput functions\n\nhtmlOutput()… creates raw HTML (!)\nimageOutput()… creates image\nplotOutput()… creates plot\nplotlyOutput … creates plotly graph (!)\ntableOutput()… creates table\ntextOutput()… creates text\nuiOutput()… creates raw HTML (!)\nverbatimTextOutput()… creates text\ndataTableOutput()… creates a data table (interactiv) (!)\nleafletOutput() … creates leaflet map\n\nOur Guerry app uses those marked with (!).",
    "crumbs": [
      "User Interface (UI): Designing the front end"
    ]
  },
  {
    "objectID": "03-user-interface.html#html-tag-functions",
    "href": "03-user-interface.html#html-tag-functions",
    "title": "User Interface (UI): Designing the front end",
    "section": "5 HTML tag functions",
    "text": "5 HTML tag functions\n\nShiny’s HTML tag functions translate input into html code\n\nTry pasting h2(\"A NEW HOPE\", align = \"center\") into your console\nh2() function creates &lt;h2&gt;&lt;/h2&gt; html tag\n\nCommon HTML tags (e.g., ⁠&lt;div&gt;⁠) can be created by calling for their tag name directly (e.g., div())\nLess common tags (e.g., ⁠&lt;article&gt;⁠), use the tags list collection (e.g., tags$article()) stored in the tags object\n\nTry tags$ in the console\n\n.noWS = ... argument to remove whitespace\n\n\nSee full reference for HTML tags\n\nHere we just do a quick example but in this tutorial you find more information\nExercise: Please run the shiny app below and explore the effect of different html tags.\n\n\nlibrary(bs4Dash)\n# UI ----\nui &lt;- dashboardPage(title = \"My Shiny App\",\n\n  ### Header ----\n  header = dashboardHeader(),\n\n  ### Sidebar ----\n  sidebar = dashboardSidebar(),\n\n  ### Body ----\n  body = dashboardBody(\n      h2(\"A NEW HOPE\", align = \"center\"),\n              h5(\"It is a period of civil war.\", align = \"center\"),\n      p(\"p creates a paragraph of text.\"),\n      tags$p(\"A new p() command starts a new paragraph. Supply a style attribute to change the format of the entire paragraph.\", style = \"font-family: 'times'; font-si16pt\"),\n      strong(\"strong() makes bold text.\"),\n      em(\"em() creates italicized (i.e, emphasized) text.\"),\n      tags$hr(style=\"border-color:black;\"),\n      tags$br(),\n      tags$line(),\n      br(),\n      code(\"code displays your text similar to computer code\"),\n      div(\"div creates segments of text with a similar style. This division of text is all blue because I passed the argument 'style = color:blue' to div\", style = \"color:blue\"),\n      br(),\n      p(\"span does the same thing as div, but it works with\",\n        span(\"groups of words\", style = \"color:blue\"),\n        \"that appear inside a paragraph.\"))\n)\n\n\n# Server ----\n\nserver &lt;- function(input, output, session) {}\n\nshinyApp(ui, server)",
    "crumbs": [
      "User Interface (UI): Designing the front end"
    ]
  },
  {
    "objectID": "03-user-interface.html#guerry-app-introduction-tab",
    "href": "03-user-interface.html#guerry-app-introduction-tab",
    "title": "User Interface (UI): Designing the front end",
    "section": "6 Guerry app: Introduction tab",
    "text": "6 Guerry app: Introduction tab\n\nBelow is the code for the Guerry app introduction tab\n\nThe code has some file dependencies that need to be deleted to run it directly\n\ne.g., includeCSS(\"www/styles.css\")\n\nImages that are not accessible are simply shown as blank\nMost UI function simply create html tags, e.g., try h1() or jumbotron()\nLet’s do this together!\n\n\n\n\nFull R code including Shiny events\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(fresh)\nlibrary(waiter)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(viridis)\nlibrary(leaflet)\nlibrary(plotly)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(datawizard)\nlibrary(parameters)\nlibrary(performance)\nlibrary(ggdark)\nlibrary(modelsummary)\n\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    \n    span(style = \"display: inline-block; width: 100%;\"),\n    a(\n      class = \"logo\",\n      href = \"https://gesis.org/\",\n      img(src = \"gesis-logo.png\", style = \"height: 1.8em;\")\n    ),\n    title = tagList(\n      img(src = \"workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    ),\n    skin = \"light\",\n    sidebarIcon = tags$i(class = \"fa fa-bars\", style = \"color: black;\")\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      menuItem(tabName = \"tab_map\", text = \"Map data\", icon = icon(\"map\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n            title = \"The Guerry Dashboard\",\n            lead = \"A Shiny app to explore the classic Guerry dataset.\",\n            status = \"info\",\n            btnName = NULL\n        ),\n        fluidRow(\n            column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                                 color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                    title = \"References\",\n                    status = \"primary\",\n                    solidHeader = FALSE,\n                    \"The following sources are referenced in this app:\",\n                    tags$ul(\n                        class = \"list-style: none\",\n                        style = \"margin-left: -30px;\",\n                        p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                        p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                        p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                        p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                    )\n                ),\n                accordionItem(\n                    title = \"Details\",\n                    status = \"primary\",\n                    solidHeader = FALSE,\n                    p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                    p(\"Last update: June 2023\"),\n                    p(\"Further information about the data can be found\",\n                        a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      )\n    ) # end tabItems\n  ),\n\n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n        \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n        a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n        \"It is based on data from the\",\n        a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {}\n\nshinyApp(ui, server)",
    "crumbs": [
      "User Interface (UI): Designing the front end"
    ]
  },
  {
    "objectID": "03-user-interface.html#summary",
    "href": "03-user-interface.html#summary",
    "title": "User Interface (UI): Designing the front end",
    "section": "7 Summary",
    "text": "7 Summary\n\nUI Layout: fluidPage() and dashBoardPage() most common (we use the latter!)\nImage can be included using img(src = \"...\", , width = ..., height = ...) function\n*Input() functions: Used to generate input UI widgets\n\ninput values are stored in list input$... with particular name, e.g., input$tab_tabulate_select\n\n*Output() functions: Used to display output, dataTableOutput()\n\noutput is sent from server\n\nBoth input/output functions have IDs the connect them to the server\nHTML tags can be used through tags$name() function, e.g., tags$br()\nNot covered here:\n\nDynamic UI makes it possible to change UI as a function of input values",
    "crumbs": [
      "User Interface (UI): Designing the front end"
    ]
  },
  {
    "objectID": "03-user-interface.html#footnotes",
    "href": "03-user-interface.html#footnotes",
    "title": "User Interface (UI): Designing the front end",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nBootstrap 4 shinydashboard using AdminLTE3: Website↩︎",
    "crumbs": [
      "User Interface (UI): Designing the front end"
    ]
  },
  {
    "objectID": "01-workshop.html",
    "href": "01-workshop.html",
    "title": "About this workshop",
    "section": "",
    "text": "This document serves as slides and script for the workshop Interactive Data Analysis with Shiny taught by Paul C. Bauer  and Jonas Lieth (Gesis, Mannheim, Online, 5-7th of July 2023). Original material is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) license. Where we draw on other authors material other licenses may apply (see references in the syllabus as well as the citations and links in the script). For potential future versions of this material see the github repository. If you have feedback or discover errors/dead links please let us know via email (mail@paulcbauer.de/Jonas.Lieth@gesis.org) or by submitting an issue on github. And make sure to install all the necessary packages before you use the script.",
    "crumbs": [
      "About this workshop"
    ]
  },
  {
    "objectID": "01-workshop.html#about-us-paul-jonas",
    "href": "01-workshop.html#about-us-paul-jonas",
    "title": "About this workshop",
    "section": "1 About us (Paul & Jonas)",
    "text": "1 About us (Paul & Jonas)\n\nPaul\n\nCurrently MZES Research fellow (University of Mannheim)\nPreviously… University of Bern (PhD, 2015), European University Institute (Postdoc, 15’-17’)\nMy research interests: political sociology & methodology [see Google Scholar)\nStarted R around 2009, first shiny apps ~2015 for teaching/research purposes (e.g., here and here)\nContact: mail@paulcbauer.de; www.paulcbauer.de; Twitter; Github\n\nJonas\n\nCurrently a research fellow at GESIS’ survey data curation (SDC) department\nPhD student interested in social geography, spatial data science, and computational text analysis\nDeveloping R packages (e.g. r311) and Shiny apps (e.g. gretan) for research\nContact: jonas.lieth@gesis.org; Website; GitHub",
    "crumbs": [
      "About this workshop"
    ]
  },
  {
    "objectID": "01-workshop.html#your-turn",
    "href": "01-workshop.html#your-turn",
    "title": "About this workshop",
    "section": "2 Your turn",
    "text": "2 Your turn\n\nLet’s check our the survey results…\n\n\nName?\nAffiliation? Country?\nWhat do you want to use Shiny for? (or research questions?)",
    "crumbs": [
      "About this workshop"
    ]
  },
  {
    "objectID": "01-workshop.html#contact-outline-dates",
    "href": "01-workshop.html#contact-outline-dates",
    "title": "About this workshop",
    "section": "3 Contact & Outline & Dates",
    "text": "3 Contact & Outline & Dates\n\nImportant: 1st time we teach workshop/material\nCourse outline/content/dates: (see toc on the left)\n\nDay 1: Introduction to Shiny\n\n13:00 - 14:00: Welcome and Introduction (1)\n14:00 - 15:00: Introduction (2)\n15:00 - 15:30: Coffee break\n15:30 - 16:30: User Interface (UI): Designing the front end (1)\n16:30 - 17:30: User Interface (UI): Designing the front end (2) [Introduction tab]\n\nDay 2: Reactive programming\n\n13:00 - 14:00: Server: Reactive programming (1)\n14:00 - 15:00: Server: Reactive programming (2) [Tabulate data tab]\n15:00 - 15:30: Coffee break\n15:30 - 16:30: Modelling and visualizing data (1)\n16:30 - 17:30: Modelling and visualizing data (2) [Modelling data tab]\n\nDay 3: Develop your app\n\n13:00 - 14:00: Mapping data & advanced visualization (1)\n14:00 - 15:00: Mapping data & advanced visualization (2) [Mapping data tab]\n15:00 - 15:30: Coffee break\n15:30 - 16:30: Theming & styling\n16:30 - 17:30: Strengthen & Deploy",
    "crumbs": [
      "About this workshop"
    ]
  },
  {
    "objectID": "01-workshop.html#material",
    "href": "01-workshop.html#material",
    "title": "About this workshop",
    "section": "4 Script & material",
    "text": "4 Script & material\n\nLiterature: See syllabus.\nWebsite/script: https://bookdown.org/paul/shiny_workshop/\n\nFind it: Google “shiny paul jonas”\nDocument = slides + script (Zoom in/out with STRG + mousewheel)\nCode: can all be found in the script\nData: can usually be downloaded over links in the script. If not we’ll share the files.\nFull screen: F11\nNavigation: TOCs on left and right\nSearch document (upper left)\nDocument generated with quarto\n\nMotivation: Have a go-to script for participants (and ourselves!)\nContent: Mixture of theory, lab sessions, exercises and pure code examples for discussion",
    "crumbs": [
      "About this workshop"
    ]
  },
  {
    "objectID": "01-workshop.html#strategy-goals",
    "href": "01-workshop.html#strategy-goals",
    "title": "About this workshop",
    "section": "5 Strategy & Goals",
    "text": "5 Strategy & Goals\n\nStrategy: From the simple to the complex, slowly building up a complex Shiny app that includes various aspects (tabulate data, modelling and descriptive graphs, mapping)\nGoals: By the end of the course participants will:\n\nknow what the structure of a Shiny application looks like\nunderstand the basics of reactive programming for interactive data analysis and visualization\nbe comfortable to use R Shiny to build their own interactive applications\nhave learned about different ways to launch their Shiny application",
    "crumbs": [
      "About this workshop"
    ]
  },
  {
    "objectID": "01-workshop.html#online-vs.-offline",
    "href": "01-workshop.html#online-vs.-offline",
    "title": "About this workshop",
    "section": "6 Online vs. offline",
    "text": "6 Online vs. offline\n\nNegative\n\nScreen fatigue\nCan’t run around to check your code\nLess engaging, less social\nVoice\nScreen sharing &less screen space than classroom\n\nPositive\n\nWe see the Shiny app how its mostly consumed ;-) (on a screen)\n\nRemember: “How is your Shiny app consumed (smartphone)?”\n\nParticipation from everywhere\n\nRule(s): Please keep your camera online if possible!\n\nDistracting animals/children/partners are a welcome distraction!\nYawning, leaving, looking bored etc. allowed!\nUse a virtual background if you like!",
    "crumbs": [
      "About this workshop"
    ]
  },
  {
    "objectID": "01-workshop.html#recommended-readings",
    "href": "01-workshop.html#recommended-readings",
    "title": "About this workshop",
    "section": "7 Recommended readings",
    "text": "7 Recommended readings\n\nImportant: Our workshop does not require any prior reading.\nHowever, our schedule is primarily based on two textbooks which we generally recommend for further reading (see references on website):\n\nWickham (2021): Mastering Shiny: Build Interactive Apps, Reports, and Dashboards Powered by R. Accessible online at: https://mastering-shiny.org/.\nFay, Colin, Rochette, Sébastien, Guyader, Vincent, and Girard, Cervan (2022): Engineering Production-Grade Shiny Apps. Accessible online at: https://engineering-shiny.org/.",
    "crumbs": [
      "About this workshop"
    ]
  },
  {
    "objectID": "01-workshop.html#software-we-will-use",
    "href": "01-workshop.html#software-we-will-use",
    "title": "About this workshop",
    "section": "8 Software we will use",
    "text": "8 Software we will use\n\nOpen-source software! (Q: Why?)\nR (R Core Team 2023)1\n\nonly viable competitor is Python\nInstall the necessary packages using the code below.\n\n\n\n\n# install.packages('pacman')\nlibrary(pacman)\np_load('gt', 'gtsummary',\n'modelsummary', 'gifski', 'png', 'datasauRus', 'ggplot2', 'gganimate', 'dplyr',\n'shiny', 'htmltools', 'bs4Dash', 'fresh', 'waiter', 'shinyWidgets', 'Guerry',\n'sf', 'tidyr', 'RColorBrewer', 'viridis', 'leaflet', 'plotly', 'jsonlite',\n'GGally', 'datawizard', 'parameters', 'performance', 'ggdark', 'reactlog',\n'tidyverse', 'listviewer', 'htmlwidgets', 'haven', 'profvis', 'rsconnect',\n'whereami', 'DT')\n\n\n\nShiny (Chang et al. 2022; Wickham 2021)\nGgplot22 (Wickham 2016)\nPlotly3 (Sievert 2020)\nNote: Ideally cite the software you use in your research especially when it is open-source (e.g., run citation(\"ggplot2\"))",
    "crumbs": [
      "About this workshop"
    ]
  },
  {
    "objectID": "01-workshop.html#helpful-resources",
    "href": "01-workshop.html#helpful-resources",
    "title": "About this workshop",
    "section": "9 Helpful resources",
    "text": "9 Helpful resources\n\nShiny user showcase\nShiny feature demos\nShiny widget gallery\nR Shiny for Enterprise Application Development: 6 Lessons for Building Shiny Apps\nShiny apps by Dimiter Toshkov",
    "crumbs": [
      "About this workshop"
    ]
  },
  {
    "objectID": "01-workshop.html#footnotes",
    "href": "01-workshop.html#footnotes",
    "title": "About this workshop",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nCreators: Core contributors and thousands of package authors.↩︎\nCreators: https://github.com/tidyverse/ggplot2↩︎\nCreators: https://github.com/plotly/plotly.js; https://github.com/ropensci/plotly↩︎",
    "crumbs": [
      "About this workshop"
    ]
  },
  {
    "objectID": "02-introduction.html",
    "href": "02-introduction.html",
    "title": "Introduction",
    "section": "",
    "text": "Learning outcomes:\n\nUnderstand idea/aims/advantages/steps of interactive data analysis\nUnderstand basic structure of Shiny apps (components)\nQuick overview of Guerry data\nDiscuss MVP and workflow\nSources: Bertini (2017), Wickham (2021) and Fay et al. (2021)",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "02-introduction.html#interactive-data-analysis",
    "href": "02-introduction.html#interactive-data-analysis",
    "title": "Introduction",
    "section": "1 Interactive data analysis",
    "text": "1 Interactive data analysis\n\nPart is almost exclusively based on Bertini (2017).\n\n\n1.1 Why?\n\n“From Data Visualization to Interactive Data Analysis” (Bertini 2017)\nMain uses of data visualization: Inspirational, explanatory and analytical1\n“data analysis […] can help people improve their understanding of complex phenomena”\n\n“if I understand a problem better, there are higher chances I can find a better solution for it”\nMain goal of (interactive) data analysis: “understanding” something\n\nFigure 1 outlines the relationship between reality, data/statistical models, human mental models\n\nHumans have a mental model of the reality and use data and models (= description of reality) to study this model and improve it\n\n\n\n\n\n\n\n\nFigure 1: Relationship between reality, data/statistical models, human mental models (Source: Bertini, 2017)\n\n\n\n\n\n1.2 How Does Interactive Data Analysis Work?\n\nFigure 2 outlines process underlying interactive data analysis\n\nLoop\n\nstart with loosely specified goal/problem (Decrease crime!)\ntranslate goal into one or more questions (What causes crime?)\ngather, organize and analyze the data to answer these questions (Gather data on crime and other factors, model and visualize it)\ngenerate knowledge and new questions and start over\n\n\n\n\n\n\n\n\n\nFigure 2: Process underlying interactive data analysis (Source: Bertini, 2017)\n\n\n\n\n\n1.3 Steps of interactive data analysis\n\nDefining the problem: What problem/goal are you trying to solve/reach through interactive data analysis?\nGenerating questions: Translate high-level problem into number of data analysis questions\nGathering, transforming and familiarizing with the data, e.g., often slicing, dicing and aggregating the data and to prepare it for the analysis one is planning to perform.\nCreating models out of data (not always): using statistical modeling and machine learning methods to summarize and analyze data\nVisualizing data and models: results obtained from data transformation and querying (or from some model) are turned into something our eyes can digest and hopefully understand.\n\nSimple representations like tables and lists rather than fancy charts are perfectly reasonable visualization for many problems.\n\nInterpreting the results: once results have been generated and represented in visual format, they need to be interpreted by someone (crucial step!)\n\ncomplex activity including understanding how to read the graph, understanding what graph communicates about phenomenon of interest, linking results to questions and pre-existing knowledge of problem (think of your audience!)\nInterpretation heavily influenced by pre-existing knowledge (about domain problem, data transformation process, modeling, visual representation)\n\nGenerating inferences and more questions: steps above lead to creating new knowledge, additional questions or hypotheses\n\nOutcome: not only answers but also (hopefully better, more refined) questions\n\n\n\n\n1.4 Important aspects of data analysis & Quo vadis interaction?\n\nProcess not sequential but highly iterative (jumping back/forth between steps)\nSome activities exclusively human, e.g., defining problems, generating questions, etc.\nVisualization only small portion of process and effectiveness depends on other steps\nInteraction: all over the place… every time you tell your computer what to do (and she returns information)\n\nGather and transform the data\nSpecify a model and/or a query from the data\nSpecify how to represent the results (and the model)\nBrowse the results\nSynthesize and communicate the facts gathered\n\nDirect manipulation vs. command-Line interaction: WIMP interfaces (direct manipulation, clicks, mouse overs, etc.,) are interactive but so is command line\n\nYou can let users type!\n\nAudience: what skills and pre-knowledge do the have? (domain knowledge, statistics, graphs)\n\n\n\n1.5 Challenges of Interactive Visual Data Analysis\n\nBroadly three parts… (Bertini 2017)\nSpecification (Mind → Data/Model): necessary to translate our questions and ideas into specifications the computer can read\n\nShiny allows non-coders to perform data analysis, but requires R knowledge to built apps\nBut even simpler tools out there\n\nRepresentation (Data/Model → Eyes)\n\nnext step is to find a (visual) representation so users can inspect and understand them\n“deciding what to visualize is often equally, if not more, important, than deciding how to visualize it”\n“how fancy does a visualization need to be in order to be useful for data analysis?”\n\n“most visualization problems can be solved with a handful of graphs”\n\nreally hard to use, tweak, and combine graphs in clever/effective/innovative ways\n\nInterpretation (Eyes → Mind)\n\n“what does one need to know in order to reason effectively about the results of modeling and visualization?”\n“Are people able to interpret and trust [your shiny app]?”",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "02-introduction.html#why-visualize",
    "href": "02-introduction.html#why-visualize",
    "title": "Introduction",
    "section": "2 Why visualize?",
    "text": "2 Why visualize?\n\n2.1 Anscombes’s quartet (1)\n\nTable 1 shows results from a linear regression based on Anscombe’s quartet (Anscombe 1973) often used to illustrate the usefulness of visualization\n\nQ: What do we find here?\n\n\n\n\n\nTable 1: Linear models based on sets of Anscombe’s quartet\n\n\n\n\n\n\n\n\n\ny1 (Set 1)\ny2 (Set 2)\ny3 (Set 3)\ny4 (Set 4)\n\n\n\n\n(Intercept)\n3.000\n3.001\n3.002\n3.002\n\n\n\n(1.125)\n(1.125)\n(1.124)\n(1.124)\n\n\nx1\n0.500\n\n\n\n\n\n\n(0.118)\n\n\n\n\n\nx2\n\n0.500\n\n\n\n\n\n\n(0.118)\n\n\n\n\nx3\n\n\n0.500\n\n\n\n\n\n\n(0.118)\n\n\n\nx4\n\n\n\n0.500\n\n\n\n\n\n\n(0.118)\n\n\n\nNotes: some notes...\n\n\n\n\n\n\n\n\n\n\n\n2.2 Anscombes’s quartet (2)\n\nTable 2 displays Anscombe’s quartet (Anscombe 1973), a dataset (or 4 little datasets)\n\nQ: What does the table reveal about the data? Is it easy to read?\n\n\n\n\n\n\nTable 2: Anscombe’s quartett: Visualization\n\n\n\n\nAnscombe's quartet data\n\n\nx1\ny1\nx2\ny2\nx3\ny3\nx4\ny4\n\n\n\n\n10\n8.04\n10\n9.14\n10\n7.46\n8\n6.58\n\n\n8\n6.95\n8\n8.14\n8\n6.77\n8\n5.76\n\n\n13\n7.58\n13\n8.74\n13\n12.74\n8\n7.71\n\n\n9\n8.81\n9\n8.77\n9\n7.11\n8\n8.84\n\n\n11\n8.33\n11\n9.26\n11\n7.81\n8\n8.47\n\n\n14\n9.96\n14\n8.10\n14\n8.84\n8\n7.04\n\n\n6\n7.24\n6\n6.13\n6\n6.08\n8\n5.25\n\n\n4\n4.26\n4\n3.10\n4\n5.39\n19\n12.50\n\n\n12\n10.84\n12\n9.13\n12\n8.15\n8\n5.56\n\n\n7\n4.82\n7\n7.26\n7\n6.42\n8\n7.91\n\n\n5\n5.68\n5\n4.74\n5\n5.73\n8\n6.89\n\n\n\n\n\n\n\n\n\n\n\n\n2.3 Anscombes’s quartet (3)\n\nFigure 3 finally visualizes the data underlying those data\n\nQ: What do we see here? What is the insight?\n\n\n\n\n\n\n\n\n\n\nFigure 3: Anscombe’s quartet: Visualization\n\n\n\n\n\n\n\n2.4 The Datasaurus Dozen\n\nFigure 4 displays the datasaurus dozen as animated by Tom Westlake (see here, original by Alberto Cairo)\n\nQ: What do we see here? What is the insight?\n\n\n\n\n\n\n\n\n\n\nFigure 4: The Datasaurus Dozen animated by Tom Westlake\n\n\n\n\n\n\n\n2.5 Interactivity data visualization\n\n“interactive data visualization enables direct actions on a plot to change elements and link between multiple plots” (Swayne 1999) (Wikipedia)\nInteractivity revolutionizes the way we work with and how we perceive data (cf. Cleveland and McGill 1984)\nStarted ~last quarter of the 20th century, PRIM-9 (1974) (Friendly 2006, 23, see also Cleveland and McGill, 1988, Young et al. 2006)\n\nWe have come a long way… John Tukey on prim9\n\nInteractivity allows for…\n\n…making sense of big data (more dimensions)\n…exploring data\n…making data accessible to those without background\n…generating interactive “publications”",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "02-introduction.html#shiny",
    "href": "02-introduction.html#shiny",
    "title": "Introduction",
    "section": "3 Shiny",
    "text": "3 Shiny\n\n3.1 What is Shiny?\nA web application framework for R to turn analyses into interactive web applications.. what does that mean?\n\nThe userinterface is a webpage\nOn this webpage you can manipulate things\nBehind the webpage there is a computer (your computer or a server)\nThat computer/server runs R and the R script of the webapp\nWhen you change something on the webpage, the information is send to the computer\nComputer runs the script with the new inputs (input functions)\nComputer sends back outputs to the webpage (output functions)\nHistory of Shiny: Joe Cheng: The Past and Future of Shiny2\nPopularity: Shiny \n\nComparison: Ggplot2 , dplyr \n\n\n\n\n3.2 Pro & contra Shiny\n\n3.2.1 Pros of R Shiny:\n\nFast Prototyping: Shiny is excellent for quickly turning ideas into applications, and is relatively easy to use even for those who aren’t seasoned programmers.\nInteractivity: Shiny lets you build interactive web apps, enhancing user engagement and experience (especially good for dashboards)\nIntegration with R Ecosystem: Shiny integrates seamlessly with R’s vast open-source ecosystem (thousands of R packages, but also see shiny for python)\nStatistical Modeling and Visualization: Shiny allows you to apply complex statistical modeling and visualizations within your app (leveraging R’s strong capabilities)\nNo Need for Web Development Skills: With Shiny, you can create web apps using R code alone. Knowledge of HTML, CSS, or JavaScript is not necessary but can help\nReactivity: Shiny’s reactivity system is excellent. Fairly simple to create applications that automatically update in response to user inputs\nSharing and Publishing: Shiny apps can be easily published and shared, either through RStudio’s Shiny server, Shinyapps.io, or embedding in R Markdown documents or websites.\n\n\n\n3.2.2 Cons of R Shiny:\n\nPerformance: Shiny apps run on top of R, an interpreted language, which can cause performance issues when handling large amounts of data or complex calculations.\nSingle-threaded: R (and by extension Shiny) is single-threaded, which can also cause performance issues when dealing with many simultaneous users (see here).\nComplexity: While Shiny’s basics are easy to learn, mastering the intricacies of reactivity can be challenging.\nLimited Customization: While it is not hard to create a simple app from your R output, it can be challenging to get around more advanced R packages or even CSS or JavaScript when you require more sophisticated user interfaces.\nData Gathering and Saving: It can be challenging to use Shiny for gathering and saving data to the database.\nMaintenance Cost: The cost of maintaining a Shiny application over time, including server costs and personnel time, can be high because Shiny maintenance requires some more unique skill sets.\nSoftware Dependencies: Certain Shiny applications may have many software dependencies, which can be challenging to manage and could potentially lead to issues down the line.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "02-introduction.html#the-guerry-dashboard-the-app-we-will-build",
    "href": "02-introduction.html#the-guerry-dashboard-the-app-we-will-build",
    "title": "Introduction",
    "section": "4 The Guerry Dashboard: The app we will build",
    "text": "4 The Guerry Dashboard: The app we will build\n\nIn the workshop we will built the Shiny app shown in Figure 5 together. Please explore this app here (5-10 minutes) and answer the following questions:\n\nWhat questions can we answer using the app?\nHow can this app help us to understand and analyze the underlying data?\nWhat interactive elements can we identify in the app?\n\n\n\n\n\n\n\n\nFigure 5: (Source: Original image)\n\n\n\n\n4.1 Data\n\nIn our app we will analyze the “Guerry data”\n?Guerry: data from A.-M. Guerry, “Essay on the Moral Statistics of France”\n\nGuerry::gfrance85 contains map of France in 1830 + the Guerry data, excluding Corsica (Table 3 shows a subset)\n\n\n\n\nData preparation code of the app\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(fresh)\nlibrary(waiter)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(viridis)\nlibrary(leaflet)\nlibrary(plotly)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(datawizard)\nlibrary(parameters)\nlibrary(performance)\nlibrary(ggdark)\nlibrary(modelsummary)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\n\n# Import the 'gfrance85' data from the 'Guerry' package\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;% # Convert to a Simple Features (sf) object\n  as_tibble() %&gt;%  # Convert to a 'tibble'\n  st_as_sf(crs = 27572) %&gt;% # set the Coordinate Reference to 27572 System (CRS)\n  mutate(Region = case_match( # Create new region column\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;% # drop columns\n  select(Region:Department, where(is.numeric)) # select columns\n\n\n\nkable(head(data_guerry[c(1,2,3,4,21,22)]))\n\n\n\n\nTable 3: Guerry dataset (subset of columns)\n\n\n\n\n\n\nRegion\nDepartment\nCrime_pers\nCrime_prop\nPop1831\ngeometry\n\n\n\n\nEast\nAin\n28870\n15890\n346.03\nMULTIPOLYGON (((801150 2092...\n\n\nNorth\nAisne\n26226\n5521\n513.00\nMULTIPOLYGON (((729326 2521...\n\n\nCentral\nAllier\n26747\n7925\n298.26\nMULTIPOLYGON (((710830 2137...\n\n\nEast\nBasses-Alpes\n12935\n7289\n155.90\nMULTIPOLYGON (((882701 1920...\n\n\nEast\nHautes-Alpes\n17488\n8174\n129.10\nMULTIPOLYGON (((886504 1922...\n\n\nSouth\nArdeche\n9474\n10263\n340.73\nMULTIPOLYGON (((747008 1925...\n\n\n\n\n\n\n\n\n\n\n\nData is on the level of 85 departments (N = 85)\n\nLater on we also aggregate it to regions\n\ngeometry: variable that describes the geographic shape of regions (sometimes we’ll have to exclude this column)\nAdvantages: Dataset is interesting, contains mapping data and is natively available in R\n\n\n\n4.2 Components of a Shiny app\n\nAs depicted in Figure 6, a Shiny app has two components, the user interface (UI) and the server, that are passed as arguments to the shinyApp() which creates a Shiny app object from this ui/server pair\n\n\n\n\n\n\n\nFigure 6: Source: https://hosting.analythium.io/the-anatomy-of-a-shiny-application/ (c) Analythium\n\n\n\n\n\n4.3 Your (first) Shiny app\n\nBelow you will create you first app and we’ll use the opportunity to discuss the basic components of a shiny app (see analogous example here).\n\n\nInstall the relevant packages:\n\n\ninstall.packages(\"shiny\")\ninstall.packages(\"tidyverse\")\n# Guerry package is already installed\n\n\nCreate a directory with the name of your app “myfirstapp” in your working directory.\nCreate an rscript file in Rstudio and save it in the working directory with the name app.R.\nCopy the code below and paste it into your app.R script.\n\n\n\nCode of the tabulate tab subset of the app\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(fresh)\nlibrary(waiter)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(viridis)\nlibrary(leaflet)\nlibrary(plotly)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(datawizard)\nlibrary(parameters)\nlibrary(performance)\nlibrary(ggdark)\nlibrary(modelsummary)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      )\n    ) # end tabItems\n  )\n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, c(\"Region\", \"Department\",var)]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n\n}\n\nshinyApp(ui, server)\n\n\n\nYou can run and stop the app by clicking Run App (Figure 7) button in the document toolbar.\n\n\n\n\n\n\n\n\n\nFigure 7: The Run App button can be found at the top-right of the source pane.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "02-introduction.html#minimum-viable-product-mvp",
    "href": "02-introduction.html#minimum-viable-product-mvp",
    "title": "Introduction",
    "section": "5 Minimum viable product (MVP)",
    "text": "5 Minimum viable product (MVP)\n\n…useful concept when building apps (see Figure 8)!\n\n\n\n\n\n\n\n\n\nFigure 8: Illustration of MVP (Source: Fay et al. 2021 - read description)\n\n\n\n\n\n\n“version […] with just enough features to be usable by early customers” to collect feedback (Wikipedia)\n“Making things work before working on low-level optimization makes the whole engineering process easier” (Fay et al. 2021)\nThe “UI first” approach: often the safest way to go (Fay et al. 2021)\n\nAgreeing on specifications: helps everybody involved in the application to agree on what the app is supposed to do, and once the UI is set, there should be no “surprise implementation”\nOrganizing work: “It’s much easier to work on a piece of the app you can visually identify and integrate in a complete app scenario”\nBut…\n\n..we “follow” same strategy, slowly building out our shiny app, adding features & complexity",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "02-introduction.html#workflow-development-debugging-and-getting-help",
    "href": "02-introduction.html#workflow-development-debugging-and-getting-help",
    "title": "Introduction",
    "section": "6 Workflow: Development, debugging and getting help",
    "text": "6 Workflow: Development, debugging and getting help\n\nSee discussions of workflow in Wickham (2021, Ch. 5, 20.2.1)\nThree important Shiny workflows:\n\nBasic development cycle of creating apps, making changes, and experimenting with the results.\nDebugging, i.e., figure out what’s gone wrong with your code/brainstorm solutions\nWriting reprexes, self-contained chunks of code that illustrate a problem (essential for getting others’ help)\n\nBelow development WF, debugging later on\n\n\n6.1 Development workflow\n\nCreating the app: start every app with the same lines of R code below (Shift + Tab or in menue New Project -&gt; Shiny Web Application)\nSeeing your changes: you’ll create a few apps a da (really?!?), but you’ll run apps hundreds of times, so mastering the development workflow is particularly important\nWrite some code.3\nLaunch the app with Cmd/Ctrl + Shift + Enter.\nInteractively experiment with the app.\nClose the app.\nGo to 1.\n\n\nlibrary(shiny)\nui &lt;- fluidPage(\n  \n)\nserver &lt;- function(input, output, session) {\n  \n}\nshinyApp(ui, server)\n\n\n6.1.1 A few tips\n\nControlling the view: Default is a pop-out window but you can also choose Run in Viewer Pane and Run External.\nDocument outline: Use it for navigation in your app code (Cntrl + Shift + O)\nUsing/exploring other apps: Inspect that app code, then slowly delete parts you don’t need\n\nRerun app to see whether it still works after each deletion\nif only interested in UI, delete everything in within server function: server &lt;- function(input, output, session) {delete everything here}\nImportant: Search for dependencies (that can sometimes be delete), e.g., search for www folder\n\nalso image links with src or png, jpg\n\n\n\n\n\n\n6.2 Debugging workflow\n\nGuaranteed that something will go wrong at the start\nCause is mismatch between your mental model of Shiny, and what Shiny actually does\nWe need to develop robust workflow for identifying and fixing mistakes\nThree main cases of problems: (1) Unexpected error, (2) No error but incorrect values; (3) Correct values but not updated\n\n\nUse traceback and interactive debugger\n\n\nUse interactive debugger\n\n\nProblem unique to Shiny, i.e., R skills don’t help\n\n\nSee Wickham (2021, Ch. 5.2, link) for explanations and examples",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "02-introduction.html#footnotes",
    "href": "02-introduction.html#footnotes",
    "title": "Introduction",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nInspirational. The main goal here is to inspire people. To wow them! But not just on a superficial level, but to really engage people into deeper thinking, sense of beauty and awe. Explanatory. The main goal here is to use graphics as a way to explain some complex idea, phenomenon or process. Analytical. The main goal here is to extract information out of data with the purpose of answering questions and advancing understanding of some phenomenon of interest.↩︎\nJoe Cheng is the Chief Technology Officer at RStudio and was the original creator of the Shiny web framework, and continues to work on packages at the intersection of R and the web.↩︎\nAutomated testing: allows you to turn interactive experiments you’re running into automated code, i.e., run tests more quickly and not forget them (because they are automated). Requires more initial investment.↩︎",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "04-server-reactive-programming.html",
    "href": "04-server-reactive-programming.html",
    "title": "Server: Reactive programming",
    "section": "",
    "text": "Learning outcomes:\n\nUnderstand logic underlying reactivity in Shiny apps\nBecome familiar with difference reactive functions such as reactive() or observe()\nExplore reactivity in the Guerry app focusing on the Tabulate data tab\nSources: Wickham (2021, Ch. 3)",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming.html#basics",
    "href": "04-server-reactive-programming.html#basics",
    "title": "Server: Reactive programming",
    "section": "1 Basics",
    "text": "1 Basics\n\nIn Shiny, server logic is expressed using reactive programming (elegant powerful programming paradigm!)\nVery different to writing script that runs from start to end\nKey idea: specify a graph of dependencies so that when an input changes, all related outputs are automatically updated\nReactive programming makes flow of an app considerably simpler",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming.html#the-server-function",
    "href": "04-server-reactive-programming.html#the-server-function",
    "title": "Server: Reactive programming",
    "section": "2 The server function",
    "text": "2 The server function\n\n“Guts” of every shiny app below\n\n\nlibrary(shiny)\n\n# front end interface (Html)\n1ui &lt;- fluidPage()\n\n# back end logic\n2server &lt;- function(input, output, session) {}\n\nshinyApp(ui, server)\n\n\n1\n\nUser interface\n\n2\n\nServer\n\n\n\n\n\nui simple because every user gets same html\nserver more complicated because every user needs independent version of the app\n\ne.g., Julia using slider should not affect Petra ui!\n\nserver() is invoked each time new session starts\n\n3 parameters (input, output, session) that are created by Shiny (not by us!) when session starts connecting to specific session",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming.html#input-output-lists",
    "href": "04-server-reactive-programming.html#input-output-lists",
    "title": "Server: Reactive programming",
    "section": "3 Input & output (lists)",
    "text": "3 Input & output (lists)\n\ninput: a list-like object that contains all the input data sent from the browser, named according to the input ID\n\ne.g., numericInput(\"count\", label = \"Number of values\", value = 100) generates input$count\ninput can only be read from within reactive contexts created by a reactive functions like renderText() or reactive()\n\nreactive functions allow for outputs to automatically update when an input changes\n\n\noutput: a list-like object containing outputs named according to output ID\n\nDifference: output used for sending output instead of receiving input (always in concert with render function as below)\nQ: How many inputs/outputs/render functions are there in the code below? What does it do?\n\n\n\n\nSimple input/output example\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\")\n)\n\nserver &lt;- function(input, output, session) {\n1  output$greeting &lt;- renderText({\n    paste0(\"Hello \", input$name, \"!\")\n  })\n}\nshinyApp(ui, server)\n\n\n\n1\n\nrender functions, e.g., renderText() set up special reactive context that automatically tracks what inputs the output uses AND converts output of R code into HTML suitable for display on a web page",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming.html#render-functions",
    "href": "04-server-reactive-programming.html#render-functions",
    "title": "Server: Reactive programming",
    "section": "4 Render functions",
    "text": "4 Render functions\n\nrender functions, located in server, wrap generated outputs and correspond to the type or reactive output\n\nresulting values are stored in output$... list\n\nQ: What do you think are the following render functions used for? (e.g., )\n\nrenderImage({...})\nrenderPlot({...})\nrenderPlotly({...}) (!)\nrenderPrint({...})\nrenderTable({...})\nrenderDataTable({...}) (!)\nrenderText({...})\nrenderUI({...}) (!)\nrenderLeaflet({...}) (!)\n\nOur Guerry app uses those marked with (!).\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nrenderImage({...}) creates images (saved as a link to a source file)\nrenderPlot({...}) creates plots\nrenderPlotly({...}) creates interactive plotly graph\nrenderPrint({...}) creates any printed output\nrenderTable({...}) creates data frame, matrix, other table like structures\n\nrenderDataTable({...}) creates interactive datatable\n\nrenderText({...}) creates character strings\nrenderUI({...}) creates a Shiny tag object or HTML\nrenderLeaflet({...}) create a leaflet map",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming.html#reactive-programming",
    "href": "04-server-reactive-programming.html#reactive-programming",
    "title": "Server: Reactive programming",
    "section": "5 Reactive programming",
    "text": "5 Reactive programming\n\n5.1 How does reactivity work?\n\nQ: How does reactivity work? What does the app below do? (Let’s run it too!)\n\n\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\")\n)\n\nserver &lt;- function(input, output, session) {\n  output$greeting &lt;- renderText({\n    paste0(\"Hello \", input$name, \"!\")\n  })\n}\nshinyApp(ui, server)\n\n\nShiny performs the renderText() action every time we update input$name (automatically!)\nreactive refers to any expression that automatically updates itself when its dependencies change\nImportant: Code informs Shiny how it could create the string if it needs to, but it’s up to Shiny when (and even if!) the code should be run\nRecipe: App provides Shiny with recipe (not commands) what to do with inputs\n\n\n\n5.2 The reactive graph\n\nUsually R code can be read from top to bottom (= order of execution)… not in Shiny!\nReactive graph: describes how inputs and outputs are connected to understand order of execution\nFigure 1 describes app in Section 5.1 above.\n\ntells that output$greeting will need to be recomputed whenever input$name is changed\ngreeting has a reactive dependency on name\n\n\n\n\n\n\n\n\n\n\nFigure 1: The reactive graph shows how the inputs and outputs are connected (Source: Wickham 2021)\n\n\n\n\n\n\nQuick high-level sketch of reactive graphs help to understand how pieces fit together\n\n\n\n5.3 Reactive expressions\n\nReactive expressions take inputs and produce outputs\n\ncan reduce duplication in reactive code by introducing additional nodes into reactive graph\nFigure 2 contains reactive expression string (inspect shape!) with code shown below\n\n\n\n\n\n\n\n\n\n\nFigure 2: A reactive expression is drawn with angles on both sides because it connects inputs to outputs (Source: Wickham 2021)\n\n\n\n\n\n\nBelow string is created with reactive() function to app in Section 5.1.\n\n\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\"),\n)\n\nserver &lt;- function(input, output, session) {\n  string &lt;- reactive(paste0(\"Hello \", input$name, \"!\"))\n  output$greeting &lt;- renderText(string())\n}\nshinyApp(ui, server)\n\n\nAvoid duplication\n\nQ: How does the code below avoid duplicating code?\n\n\n\n\nShow the code\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\"),\n  textOutput(\"greeting2\")\n)\n\nserver &lt;- function(input, output, session) {\n  string &lt;- reactive(paste0(\"Hello \", input$name, \"!\"))\n  output$greeting &lt;- renderText(string())\n  output$greeting2 &lt;- renderText(string())\n}\nshinyApp(ui, server)\n\n\n\n\n5.4 Executation order\n\nOrder Shiny code is run is solely determined by reactive graph\nBelow we flip code in server function below\n\nBetter keep order for easier understanding!\n\n\n\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\"),\n)\n\nserver &lt;- function(input, output, session) {\n  output$greeting &lt;- renderText(string())\n  string &lt;- reactive(paste0(\"Hello \", input$name, \"!\"))\n}\nshinyApp(ui, server)\n\n\n\n5.5 Exercises\n\nCan you spot errors in the code of the different server1, server2 and server3 below?\n\n\n# UI\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\")\n)\n\n# SERVERS\nserver1 &lt;- function(input, output, server) {\n  input$greeting &lt;- renderText(paste0(\"Hello \", name))\n}\n\n# HOMEWORK!\nserver2 &lt;- function(input, output, server) {\n  greeting &lt;- paste0(\"Hello \", input$name)\n  output$greeting &lt;- renderText(greeting)\n}\n\nserver3 &lt;- function(input, output, server) {\n  output$greting &lt;- paste0(\"Hello\", input$name)\n}\n\n\nDraw the reactive graph for the following three server functions (what are the inputs, reactives and ouputs): (Homework: server2 and server3!)\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nStart by deciding how many and which inputs (1), reactives (2) and ouputs (3) there are. Then start drawing with inputs represented in the first column on the left. You could use, e.g., name&gt; for inputs, &gt;name&gt; for reactives and &gt;name for outputs and arrows to connect them.\n\n\n\n\nserver1 &lt;- function(input, output, session) {\n  c &lt;- reactive(input$a + input$b)\n  e &lt;- reactive(c() + input$d)\n  output$f &lt;- renderText(e())\n}\n\nserver2 &lt;- function(input, output, session) {\n  x &lt;- reactive(input$x1 + input$x2 + input$x3)\n  y &lt;- reactive(input$y1 + input$y2)\n  output$z &lt;- renderText(x() / y())\n}\n\nserver3 &lt;- function(input, output, session) {\n  d &lt;- reactive(c() ^ input$d)\n  a &lt;- reactive(input$a * 10)\n  c &lt;- reactive(b() / input$c) \n  b &lt;- reactive(a() + input$b)\n}\n\n\n\n\n\n\n\nSolution(s)\n\n\n\n\n\n\nCan you spot errors in the code of the different server1, server2 and server3 below?\n\n\nserver1: Forgot input$\nserver2: input$name outside of renderText() function\nserver3: Typo in output$greting\n\n\n\nDraw the reactive graph for the following three server functions (Solution source):\n\nTo create the reactive graph we need to consider the inputs, reactive expressions, and outputs of the app.\nFor server1 we have the following objects:\n\ninputs: input$a, input$b, and input$d\nreactives: c() and e()\noutputs: output$f\n\nInputs input$a and input$b are used to create c(), which is combined with input$d to create e(). The output depends only on e().\n\n\n\n\nreactive graph - server 1\n\n\n\n\nFor server2 we have the following objects:\n\ninputs: input$y1, input$y2, input$x1, input$x2, input$x3\nreactives: y() and x()\noutputs: output$z\n\nInputs input$y1 and input$y2 are needed to create the reactive y(). In addition, inputs input$x1, input$x2, and input$x3 are required to create the reactive x(). The output depends on both x() and y().\n\n\n\n\nreactive graph - server 2\n\n\n\n\nFor server3 we have the following objects:\n\ninputs: input$a, input$b, input$c, input$d\nreactives: a(), b(), c(), d()\n\nAs we can see below, a() relies on input$a, b() relies on both a() and input$b, and c() relies on both b() and input$c. The final output depends on both c() and input$d.\n\n\n\n\nreactive graph - server 3",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming.html#reactive-expressions-more",
    "href": "04-server-reactive-programming.html#reactive-expressions-more",
    "title": "Server: Reactive programming",
    "section": "6 Reactive expressions (more!)",
    "text": "6 Reactive expressions (more!)\n\nChapter 3.4 is recommended reading!\nReactive expressions (e.g., reactive()) are important because…\n\ngive Shiny more information so that it can do less recomputation when inputs change\nmake apps more efficient and easier for humans to understand (simplify reactive graph!)\n\nAre like inputs since you can use results of a reactive expression in an output\nAre like outputs since they depend on inputs and automatically know when they need updating\nInputs and reactive expressions are reactive producers (see Figure 3)\nReactive expressions and outputs are reactive consumers (see Figure 3)\n\n\n\n\n\n\n\n\n\nFigure 3: Inputs and expressions are reactive producers; expressions and outputs are reactive consumers (Source: Wickham 2021)",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming.html#reactive-functions-overview",
    "href": "04-server-reactive-programming.html#reactive-functions-overview",
    "title": "Server: Reactive programming",
    "section": "7 Reactive functions: Overview",
    "text": "7 Reactive functions: Overview\n\nShiny provides a variety of reactive functions such as reactive(), observe(), bindevent() and others.`\nSee insightful discussions on reactivity and reactive functions in Chapter 3.5.1.\n\n\n7.1 reactive()\n\nreactive(): wraps a normal expression to create a reactive expression\n\nis “reactive” in the sense that if its dependencies change, it will automatically update.\nBelow reactive string changes whenever dependency input$name changes.\nQ: What would be the reactive producer and what the reactive consumer?\n\n\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\"),\n)\n\nserver &lt;- function(input, output, session) {\n  string &lt;- reactive(paste0(\"Hello \", input$name, \"!\"))\n  output$greeting &lt;- renderText(string())\n}\nshinyApp(ui, server)\n  })\n\n\n7.2 observe() vs. reactive()\n\nreactive(): creates a reactive expression that can be changed over time by user inputs\nobserve(): creates an observer that runs whenever any of its reactive dependencies change\n\ni.e., code inside observe() will be re-evaluated whenever any reactive inputs or reactive expressions that it references get updated\nBUT we don’t assign result of observe() to a variable, so we can’t refer to it from other reactive consumers\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nBelow we use a reactive expression using reactive() to create squared. This is then reused in the observe() function that wraps a render function renderText() that creates and the output element output$text.\n\n\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  numericInput(\"num\", \"Enter a number\", value = 1),\n  textOutput(\"text\")\n)\n\nserver &lt;- function(input, output) {\n  # reactive expression\n  squared &lt;- reactive({ \n    input$num^2 \n  })\n  \n  # observer\n  observe({ \n    output$text &lt;- renderText({\n      paste0(\"The square of \", input$num, \" is \", squared())\n    })\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n\n7.3 Reacting on events: bindEvent()\n\nbindEvent(): provides a straightforward API for event handling\nobserveEvent() (observers): used when you want to perform an action in response to an event (see input$button below), but you don’t need the result of the action to be used in the UI\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nIn this example, when the “Generate Random Number” button is clicked, a random number is generated, but it doesn’t get displayed immediately. Instead, the output$randomNumber expression is bound to input$dispButton event with bindEvent(), and the result is displayed only when the “Display Random Number” button is clicked. This allows you to have more control over when the UI updates in response to changes in server-side reactive values.\n\n\n\nlibrary(shiny)\n\n# Define UI\nui &lt;- fluidPage(\n    actionButton(\"genButton\", \"Generate Random Number\"),\n    actionButton(\"dispButton\", \"Display Random Number\"),\n    textOutput(\"randomNumber\")\n)\n\n# Define server logic\nserver &lt;- function(input, output) {\n    randNum &lt;- reactiveValues(num = NULL)\n\n    observeEvent(input$genButton, {\n        randNum$num &lt;- runif(1) # Generate a random number when genButton is clicked\n    })\n    \n    output$randomNumber &lt;- renderText({ \n        randNum$num # Generate the reactive expression\n    }) %&gt;% \n    bindEvent(input$dispButton) # Binding the output$randomNumber reactive expression to dispButton\n}\n\n# Run the application \nshinyApp(ui = ui, server = server, options = list(display.mode='showcase'))\n\n\n7.4 eventReactive() (skip!)\n\nAlternative to bind_event()\neventReactive(): Similar to reactive(), but only re-evaluates when a certain event is triggered. Can be used in combination with observeEvent().\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nIn this app, when you click the “Generate Random Number” button, a random number is generated, but it’s not displayed yet. When you click the “Display Random Number” button, the generated number is then displayed. The eventReactive() function is used to create a reactive value (the random number) that is updated only when a specific event (clicking the “Generate Random Number” button) occurs.\n\n\n\nlibrary(shiny)\n\n# Define UI\nui &lt;- fluidPage(\n    actionButton(\"genButton\", \"Generate Random Number\"),\n    actionButton(\"dispButton\", \"Display Random Number\"),\n    textOutput(\"randomNumber\")\n)\n\n# Define server logic\nserver &lt;- function(input, output) {\n    randNum &lt;- eventReactive(input$genButton, {\n        runif(1) # Generate a random number when genButton is clicked\n    })\n    \n    observeEvent(input$dispButton, {\n        output$randomNumber &lt;- renderText({ randNum() }) # Display the random number when dispButton is clicked\n    })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server, options = list(display.mode='showcase'))\n\n\n7.5 isolate() (skip!)\n\nisolate(): used to access the value of a reactive expression or input without setting up a dependency\n\nuseful to access the current value of an input or reactive expression, but without re-running the code when that input or expression changes\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nIn this app, when you click the “Generate Random Number” button, a random number is generated. This number does not immediately cause a reactive event because it’s isolated within the isolate() function. It only gets displayed when you click the “Display Random Number” button. Changes to randNum$num after “Display Random Number” button is clicked won’t affect the displayed value until the button is clicked again. Thus, the isolate() function enables the use of reactive values without triggering reactivity.\n\n\n\nlibrary(shiny)\n\n# Define UI\nui &lt;- fluidPage(\n    actionButton(\"genButton\", \"Generate Random Number\"),\n    actionButton(\"dispButton\", \"Display Random Number\"),\n    textOutput(\"randomNumber\")\n)\n\n# Define server logic\nserver &lt;- function(input, output) {\n    randNum &lt;- reactiveValues(num = NULL) # Create object to store reactiv values\n\n    observeEvent(input$genButton, {\n        randNum$num &lt;- runif(1) # Generate a random number when genButton is clicked\n    })\n    \n    observeEvent(input$dispButton, {\n        output$randomNumber &lt;- renderText({ \n          isolate(randNum$num) # Display the random number when dispButton is clicked, but do not reactivity link it\n        }) \n    })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server, options = list(display.mode='showcase'))\n\n\n7.6 reactiveTimer() (skip!)\n\nreactiveTimer(): used to create a reactive expression that invalidates itself after a given number of milliseconds. This can be useful for causing certain parts of your Shiny app to update on a regular interval.\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nIn this example, autoInvalidate() is a reactive expression that becomes invalidated (i.e., signals that it needs to be re-evaluated) every 1000 milliseconds. By referencing autoInvalidate() inside the renderText() function, we’re creating a dependency — so, every time autoInvalidate() is invalidated, the current time is re-evaluated and the UI is updated with the new time.\n\n\n\nlibrary(shiny)\n\n# Define UI\nui &lt;- fluidPage(\n  textOutput(\"currentTime\")\n)\n\n# Define server logic\nserver &lt;- function(input, output) {\n  \n  # Define a reactive timer with a 1000ms (1s) interval\n  autoInvalidate &lt;- reactiveTimer(1000)\n  \n  output$currentTime &lt;- renderText({\n    autoInvalidate()  # This line causes the reactive expression to be invalidated (and thus re-evaluated) every second\n    as.character(Sys.time())  # Display the current time\n  })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming.html#guerry-app-reactivity-tabulate-data-tab",
    "href": "04-server-reactive-programming.html#guerry-app-reactivity-tabulate-data-tab",
    "title": "Server: Reactive programming",
    "section": "8 Guerry app (reactivity): Tabulate data tab",
    "text": "8 Guerry app (reactivity): Tabulate data tab\n\nThe Guerry app includes the following reactive functions: reactive(), observe(), isolate(), bindEvent().\nBelow the basic code underlying the Tabulate tab of our app.\n\nWhat would the reactive graph look like for this app (how many inputs, reatives, outputs)?\nWhich reactive functions can you identify?\n\n\n\n\nR code underlying tabulate tab\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(fresh)\nlibrary(waiter)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(viridis)\nlibrary(leaflet)\nlibrary(plotly)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(datawizard)\nlibrary(parameters)\nlibrary(performance)\nlibrary(ggdark)\nlibrary(modelsummary)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      )\n    ) # end tabItems\n  )\n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, c(\"Region\", \"Department\",var)]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n\n}\n\nshinyApp(ui, server)",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming.html#loading-things-in-shiny",
    "href": "04-server-reactive-programming.html#loading-things-in-shiny",
    "title": "Server: Reactive programming",
    "section": "9 Loading things in Shiny",
    "text": "9 Loading things in Shiny\n\n9.1 When is code run?\n\nWhen is code in a shiny app run? (Source)\nCode outside of ui and server is run once, when the app is launched.\n\n\n\nCode inside the server function is run once each time a user visits the app (opens the webpage).\n\n\n\nCode inside render functions is run each time a user changes a widget (input$...) that ouput$... depends on\n\n\n\nQ: So where shall we put the function to load the datasets?\nQ: What problem might occur if we place certain code wrongly ? Where would you place data management tasks?\n\n\n\n\n\n\n\nInsight\n\n\n\n\n\n\nIf possible place anything computationally intensive outside of the render functions.\n\ne.g., might make sense to estimate models/subset data beforehand if possible and access precalculated objects in reactive functions\n\n\n\n\n\n\n\n9.2 Where to load things\n\nCode outside server &lt;- function(input, output) {} is run once, when you launch your app\nCode inside server &lt;- function(input, output) {} is run once each time a user visits your app\nCode inside render* functions is rerun constantly (not only when user changes widget value ( see reactivity)\nThat means…\n\nLoad Source scripts, libraries, and data outside of server function (at the beginning)\n\nStore data in www/ folder in your app directory\nAccess with read.table(\"www/swiss.csv\", sep=\",\")\nAccess online data by inserting the url into the read* function (e.g. read.table())\n\nUser specific objects (e.g. object that records user’s session information) are defined inside shinyServer’s unnamed function, but outside of any render* calls\n\ne.g. user registers himself, user data as input data (compare income)\n\nCode/objects that are affected by choices in widgets must be placed within the a render* function\n\nShiny reruns code in a render* chunk each time a user changes a widget mentioned in the chunk\n\n\nAvoid placing code within render function that does not need to be there… for performance reasons!",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming.html#data-storage",
    "href": "04-server-reactive-programming.html#data-storage",
    "title": "Server: Reactive programming",
    "section": "10 Data storage",
    "text": "10 Data storage\n\nThings might get tricky for more data-hungry Shiny apps\nThe way data is stored and accessed has some important implications for\n\nMemory allocation: R stores objects in the working memory\nPerformance: “R does too much” - Colin Fay\nReadability: Putting everything in one file might get messy\n\nFor more sophisticated setups: databases (e.g., SQLite, PostgreSQL, MongoDB)\nR can work perfectly well with database connections (R Packages: DBI, dbplyr, sf) (see overview here)\n\nSQLite works well for casually trying out databases (see overview here)",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming.html#summary",
    "href": "04-server-reactive-programming.html#summary",
    "title": "Server: Reactive programming",
    "section": "11 Summary",
    "text": "11 Summary\nTo build reactive shiny apps…\n\nUse *Output functions to place reactive objects in the UI (webpage)\nUse render* functions to let R build output objects (on the server)\n\nRender functions are located in server &lt;- function(input, output) {...})\nR expressions are surrounded by braces, {} in render* functions\nOutputs of render* are saved in the output list, with one entry for each reactive object in your app\nReactivity by including an input values in a render* expression\n\nOften times you will adapt/modify examples that you find online",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming.html#appendix-visualizing-reactivity-with-reactlog",
    "href": "04-server-reactive-programming.html#appendix-visualizing-reactivity-with-reactlog",
    "title": "Server: Reactive programming",
    "section": "12 Appendix: Visualizing reactivity with reactlog",
    "text": "12 Appendix: Visualizing reactivity with reactlog\n\nreactlog can be used to visualize and explore the reactivity of a Shiny app\nBelow we do so for the Shiny app above (app is stored in a folder)\n\n\n# Restart R to delete log\n.rs.restartR()\n\nlibrary(shiny)\nlibrary(reactlog)\n\n# tell shiny to log all reactivity\nreactlog_enable()\n# reactlog_disable()\n\n# run a shiny app\nrunApp(\"C:/Users/Paul/Google Drive/13_SHINY_Workshop/shinyapps/guerry/states_paul/app_tab_tabulate.R\")\n\n# once app has closed, display reactlog from shiny\nshiny::reactlogShow()",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming.html#appendix-imperative-vs.-declarative-programming-and-laziness",
    "href": "04-server-reactive-programming.html#appendix-imperative-vs.-declarative-programming-and-laziness",
    "title": "Server: Reactive programming",
    "section": "13 Appendix: Imperative vs. Declarative programming and laziness",
    "text": "13 Appendix: Imperative vs. Declarative programming and laziness\n\nImperative vs. declarative programming (Chapter 3.3.1)\n\nImperative code: “Make me a sandwich” (“assertive” code)\nDeclarative code: “Ensure there is a sandwich in the refrigerator whenever I look inside of it” (“passive-aggressive” code)\nShiny follows the latter principles\n\nLaziness as strength of declarative programming (Chapter 3.3.2)\n\napp will only ever do the minimal amount of work needed to update the output controls that you can currently see",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "06-mapping.html",
    "href": "06-mapping.html",
    "title": "Mapping data & advanced visualization",
    "section": "",
    "text": "You will learn how to:",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#current-app-state",
    "href": "06-mapping.html#current-app-state",
    "title": "Mapping data & advanced visualization",
    "section": "1.1 Current app state",
    "text": "1.1 Current app state\n\nQuick recap:\n\nIn section 3, we added an introduction tab that contains background info on the app\nIn section 4, we added a table tab using the DT package\nIn section 5, we added a modelling tab using all sorts of visualizations\n\n\n\n\nFull code for the current app state\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(fresh)\nlibrary(waiter)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(viridis)\nlibrary(leaflet)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(datawizard)\nlibrary(parameters)\nlibrary(performance)\nlibrary(modelsummary)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\nvariable_desc &lt;- list(\n  Crime_pers = list(\n    title = \"Crime against persons\",\n    desc = as.character(p(tags$b(\"Crime against persons:\"), \"Population per crime against persons\", hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Crime_prop = list(\n    title = \"Crime against property\",\n    desc = as.character(p(tags$b(\"Crime against property:\"), \"Population per crime against property\", hr(), helpText(\"Source: Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Literacy = list(\n    title = \"Literacy\",\n    desc = as.character(p(tags$b(\"Percent Read & Write:\"), \"Percent of military conscripts who can read and write\", hr(), helpText(\"Source: Table A2 in Guerry (1833)\"))),\n    lgd = \"Literacy\",\n    unit = \" %\"\n  ),\n  Donations = list(\n    title = \"Donations to the poor\",\n    desc = as.character(p(tags$b(\"Donations to the poor\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bulletin des lois\"))),\n    lgd = \"Donations\",\n    unit = \"\"\n  ),\n  Infants = list(\n    title = \"Illegitimate births\",\n    desc = as.character(p(tags$b(\"Population per illegitimate birth\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bureau des Longitudes, 1817-1821\"))),\n    lgd = \"Pop. per birth\",\n    unit = \"\"\n  ),\n  Suicides = list(\n    title = \"Suicides\",\n    desc = as.character(p(tags$b(\"Population per suicide\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1827-1830\"))),\n    lgd = \"Pop. per suicide\",\n    unit = \"\"\n  ),\n  Wealth = list(\n    title = \"Tax / capita\",\n    desc = as.character(p(tags$b(\"Per capita tax on personal property:\"), \"A ranked index based on taxes on personal and movable property per inhabitant\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Tax / capita\",\n    unit = \"\"\n  ),\n  Commerce = list(\n    title = \"Commerce & Industry\",\n    desc = as.character(p(tags$b(\"Commerce & Industry:\"), \"Commerce and Industry, measured by the rank of the number of patents / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Patents / capita\",\n    unit = \"\"\n  ),\n  Clergy = list(\n    title = \"Clergy\",\n    desc = as.character(p(tags$b(\"Distribution of clergy:\"), \"Distribution of clergy, measured by the rank of the number of Catholic priests in active service / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Almanach officiel du clergy, 1829\"))),\n    lgd = \"Priests / capita\",\n    unit = \"\"\n  ),\n  Crime_parents = list(\n    title = \"Crime against parents\",\n    desc = as.character(p(tags$b(\"Crime against parents:\"), \"Crimes against parents, measured by the rank of the ratio of crimes against parents to all crimes \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Share of crimes\",\n    unit = \" %\"\n  ),\n  Infanticide = list(\n    title = \"Infanticides\",\n    desc = as.character(p(tags$b(\"Infanticides per capita:\"), \"Ranked ratio of number of infanticides to population \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Infanticides / capita\",\n    unit = \"\"\n  ),\n  Donation_clergy = list(\n    title = \"Donations to the clergy\",\n    desc = as.character(p(tags$b(\"Donations to the clergy:\"), \"Ranked ratios of the number of bequests and donations inter vivios to population \\u2013 Average for the years 1815-1824\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Bull. des lois, ordunn. d’autorisation\"))),\n    lgd = \"Donations / capita\",\n    unit = \"\"\n  ),\n  Lottery = list(\n    title = \"Wager on Royal Lottery\",\n    desc = as.character(p(tags$b(\"Per capita wager on Royal Lottery:\"), \"Ranked ratio of the proceeds bet on the royal lottery to population \\u2013 Average for the years 1822-1826\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte rendu par le ministre des finances\"))),\n    lgd = \"Wager / capita\",\n    unit = \"\"\n  ),\n  Desertion = list(\n    title = \"Military desertion\",\n    desc = as.character(p(tags$b(\"Military desertion:\"), \"Military disertion, ratio of the number of young soldiers accused of desertion to the force of the military contingent, minus the deficit produced by the insufficiency of available billets\\u2013 Average of the years 1825-1827\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte du ministère du guerre, 1829 état V\"))),\n    lgd = \"No. of desertions\",\n    unit = \"\"\n  ),\n  Instruction = list(\n    title = \"Instruction\",\n    desc = as.character(p(tags$b(\"Instruction:\"), \"Ranks recorded from Guerry's map of Instruction. Note: this is inversely related to literacy (as defined here)\")),\n    lgd = \"Instruction\",\n    unit = \"\"\n  ),\n  Prostitutes = list(\n    title = \"Prostitutes\",\n    desc = as.character(p(tags$b(\"Prostitutes in Paris:\"), \"Number of prostitutes registered in Paris from 1816 to 1834, classified by the department of their birth\", hr(), helpText(\"Source: Parent-Duchatelet (1836), De la prostitution en Paris\"))),\n    lgd = \"No. of prostitutes\",\n    unit = \"\"\n  ),\n  Distance = list(\n    title = \"Distance to paris\",\n    desc = as.character(p(tags$b(\"Distance to Paris (km):\"), \"Distance of each department centroid to the centroid of the Seine (Paris)\", hr(), helpText(\"Source: Calculated from department centroids\"))),\n    lgd = \"Distance\",\n    unit = \" km\"\n  ),\n  Area = list(\n    title = \"Area\",\n    desc = as.character(p(tags$b(\"Area (1000 km\\u00b2)\"), hr(), helpText(\"Source: Angeville (1836)\"))),\n    lgd = \"Area\",\n    unit = \" km\\u00b2\"\n  ),\n  Pop1831 = list(\n    title = \"Population\",\n    desc = as.character(p(tags$b(\"Population in 1831, in 1000s\"), hr(), helpText(\"Source: Taken from Angeville (1836), Essai sur la Statistique de la Population français\"))),\n    lgd = \"Population (in 1000s)\",\n    unit = \"\"\n  )\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prep data (Tab: Map data) ----\ndata_guerry_region &lt;- data_guerry %&gt;%\n  group_by(Region) %&gt;%\n  summarise(across(\n    .cols = all_of(names(variable_names)),\n    function(x) {\n      if (cur_column() %in% c(\"Area\", \"Pop1831\")) {\n        sum(x)\n      } else {\n        mean(x)\n      }\n    }\n  ))\n\n## Prepare palettes ----\n## Used for mapping\npals &lt;- list(\n  Sequential = RColorBrewer::brewer.pal.info %&gt;%\n    filter(category %in% \"seq\") %&gt;%\n    row.names(),\n  Viridis = c(\"Magma\", \"Inferno\", \"Plasma\", \"Viridis\",\n              \"Cividis\", \"Rocket\", \"Mako\", \"Turbo\")\n)\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      menuItem(tabName = \"tab_map\", text = \"Map data\", icon = icon(\"map\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      ),\n      ### 3.3.3 Tab: Model data ----\n      tabItem(\n        tabName = \"tab_model\",\n        fluidRow(\n          column(\n            width = 6,\n            #### Inputs(s) ----\n            box(\n              width = 12,\n              title = \"Select variables\",\n              status = \"primary\",\n              shinyWidgets::pickerInput(\n                \"model_x\",\n                label = \"Select a dependent variable\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(liveSearch = TRUE),\n                selected = \"Literacy\"\n              ),\n              shinyWidgets::pickerInput(\n                \"model_y\",\n                label = \"Select independent variables\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(\n                  actionsBox = TRUE,\n                  liveSearch = TRUE,\n                  selectedTextFormat = \"count\",\n                  countSelectedText = \"{0} variables selected\",\n                  noneSelectedText = \"No variables selected\"\n                ),\n                multiple = TRUE,\n                selected = \"Commerce\"\n              ),\n              shinyWidgets::prettyCheckbox(\n                \"model_std\",\n                label = \"Standardize variables?\",\n                value = TRUE,\n                status = \"primary\",\n                shape = \"curve\"\n              ),\n              hr(),\n              actionButton(\n                \"refresh\",\n                label = \"Apply changes\",\n                icon = icon(\"refresh\"),\n                flat = TRUE\n              )\n            ),\n            #### Outputs(s) ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model analysis\",\n              side = \"right\",\n              width = 12,\n              ##### Tabpanel: Coefficient plot ----\n              tabPanel(\n                title = \"Plot: Coefficients\",\n                plotly::plotlyOutput(\"coefficientplot\")\n              ),\n              ##### Tabpanel: Scatterplot ----\n              tabPanel(\n                title = \"Plot: Scatterplot\",\n                plotly::plotlyOutput(\"scatterplot\")\n              ),\n              ##### Tabpanel: Table: Regression ----\n              tabPanel(\n                title = \"Table: Model\",\n                htmlOutput(\"tableregression\")\n              )\n            )\n          ),\n          column(\n            width = 6,\n            ##### Box: Pair diagramm ----\n            box(\n              width = 12,\n              title = \"Pair diagram\",\n              status = \"primary\",\n              plotly::plotlyOutput(\"pairplot\")\n            ),\n            ##### TabBox: Model diagnostics ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model diagnostics\",\n              width = 12,\n              side = \"right\",\n              tabPanel(\n                title = \"Normality\",\n                plotly::plotlyOutput(\"normality\")\n              ),\n              tabPanel(\n                title = \"Outliers\",\n                plotly::plotlyOutput(\"outliers\")\n              ),\n              tabPanel(\n                title = \"Heteroskedasticity\",\n                plotly::plotlyOutput(\"heteroskedasticity\")\n              )\n            )\n          )\n        )\n      ),\n      ### 3.3.4 Tab: Map data ----\n      tabItem(\n        tabName = \"tab_map\", # must correspond to related menuItem name\n        fluidRow(\n          column(\n            #### Output(s) ----\n            width = 8,\n            box(\n              id = \"tab_map_box\",\n              status = \"primary\",\n              headerBorder = FALSE,\n              collapsible = FALSE,\n              width = 12,\n              leaflet::leafletOutput(\"tab_map_map\", height = \"800px\", width = \"100%\")\n            ) # end box\n          ) # end column\n        ) # end fluidRow\n      ) # end tabItem\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n  ### Define & estimate model ----\n  mparams &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(data_guerry)[c(x, y)]\n    dt_labels &lt;- sf::st_drop_geometry(data_guerry)[c(\"Department\", \"Region\")]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    form &lt;- as.formula(paste(x, \"~\", paste(y, collapse = \" + \")))\n    mod &lt;- lm(form, data = dt)\n    \n    list(\n      x = x,\n      y = y,\n      data = dt,\n      data_labels = dt_labels,\n      model = mod\n    )\n  }) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n  \n  ### Pair diagram ----\n  output$pairplot &lt;- plotly::renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    p &lt;- GGally::ggpairs(\n      params$data,\n      axisLabels = \"none\",\n      lower = list(\n        continuous = function(data, mapping, ...) {\n          ggplot(data, mapping) +\n            suppressWarnings(geom_point(\n              aes(text = paste0(\n                \"Department: \", \n                dt_labels[[\"Department\"]],\n                \"&lt;br&gt;Region: \", \n                dt_labels[[\"Region\"]])),\n              color = \"black\"\n            ))\n        }\n      )\n    )\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Coefficientplot ----\n  output$coefficientplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    x &lt;- params$x\n    y &lt;- params$y\n    \n    \n    p &lt;- plot(parameters::model_parameters(params$model))\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Scatterplot ----\n  output$scatterplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    x &lt;- params$x \n    y &lt;- params$y\n    \n    \n    if (length(y) == 1) {\n      p &lt;- ggplot(params$data, \n                  aes(x = .data[[params$x]], \n                      y = .data[[params$y]])) +\n        geom_point(aes(text = paste0(\"Department: \", \n                                     dt_labels[[\"Department\"]],\n                                     \"&lt;br&gt;Region: \", \n                                     dt_labels[[\"Region\"]])),\n                   color = \"black\") +\n        geom_smooth() + \n        geom_smooth(method='lm') +\n        theme_light()\n    } else {\n      p &lt;- ggplot() +\n        theme_void() +\n        annotate(\"text\", \n                 label = \"Cannot create scatterplot.\\nMore than two variables selected.\", \n                 x = 0, y = 0, \n                 size = 5, \n                 colour = \"red\",\n                 hjust = 0.5,\n                 vjust = 0.5) +\n        xlab(NULL)\n      \n    }\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Table: Regression ----\n  output$tableregression &lt;- renderUI({\n    params &lt;- mparams()\n    HTML(modelsummary(\n      dvnames(list(params$model)),\n      gof_omit = \"AIC|BIC|Log|Adj|RMSE\"\n    ))\n  })\n  \n  ### Plot: Normality residuals ----\n  output$normality &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_normality(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Outliers ----\n  output$outliers &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_outliers(params$model), show_labels = FALSE)\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$x &lt;- \"Leverage\"\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Heteroskedasticity ----\n  output$heteroskedasticity &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_heteroskedasticity(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$y &lt;- \"Sqrt. |Std. residuals|\" # ggplotly doesn't support expressions\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  \n  ## 4.3 Map data ----\n  \n  # New code goes here :)\n}\n\nshinyApp(ui, server)",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#further-resources",
    "href": "06-mapping.html#further-resources",
    "title": "Mapping data & advanced visualization",
    "section": "1.2 Further resources",
    "text": "1.2 Further resources\n\nChapter 9 of Robin Lovelace’s “Geocomputation with R”\nThe documentation of Leaflet for R",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#types-of-spatial-data",
    "href": "06-mapping.html#types-of-spatial-data",
    "title": "Mapping data & advanced visualization",
    "section": "2.1 Types of spatial data",
    "text": "2.1 Types of spatial data\n\nGeography can describe the world in two ways:\n\nAs spatially continuous processes (or as raster data)\nAs an ensemble of individual elements (or as vector data)\n\nVector data is also called spatial geometries and can be divided into\n\nPoints (e.g., individual events or places)\nLines (e.g., streets, rivers)\nPolygons (e.g., buildings, districts)\n\n\n\n\n\nThe real world described by layers of raster and vector data (Source)",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#spatial-data-in-r",
    "href": "06-mapping.html#spatial-data-in-r",
    "title": "Mapping data & advanced visualization",
    "section": "2.2 Spatial data in R",
    "text": "2.2 Spatial data in R\n\nIn R, spatial data can be handled using various packages:\n\nsp (vector data) and raster (raster data) used to be the common packages for spatial analysis\nsf (vector data) and terra (raster data) are their more timely successors\n\nBy default, data_guerry is an sp object, but we converted it to an sf dataframe\nsf dataframes consist of a geometry column (class sfc) and multiple features (i.e. non-spatial columns)\nsfc geometries are list-like objects that consist of individual geometries (class sfg) and spatial metadata (e.g. type or dimension)\nsfg objects are matrices consisting purely of coordinates\n\n\n1st_sf(\n2    feature = c(1, 2),\n3    geometry =\n4        st_sfc(\n5            st_point(c(1, 1)),\n            st_point(c(1, 2)),\n          st_point(c(2, 2)),\n            st_point(c(2, 1))\n        )\n)\n\n\n1\n\nCreate an sf dataframe\n\n2\n\nCreate a feature column – essentially a regular non-spatial column\n\n3\n\nCreate a geometry column containing an sfc object\n\n4\n\nsfc = geometry + spatial metadata\n\n5\n\nsfg = raw geometries\n\n\n\n\nSimple feature collection with 4 features and 1 field\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 1 ymin: 1 xmax: 2 ymax: 2\nCRS:           NA\n  feature    geometry\n1       1 POINT (1 1)\n2       2 POINT (1 2)\n3       1 POINT (2 2)\n4       2 POINT (2 1)",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#coordinate-reference-systems",
    "href": "06-mapping.html#coordinate-reference-systems",
    "title": "Mapping data & advanced visualization",
    "section": "2.3 Coordinate reference systems",
    "text": "2.3 Coordinate reference systems\n\nAll spatial data need to have a coordinate reference system (CRS) that locates the coordinates on the planet\nThe geodetic specifics are mostly not necessary, but it’s always good to know a basic distinction\n\nGeodetic CRS\n\nUses angular units (degrees) because they are based on a spheroid\nUsually good for global or national scale visualizations\nExample: WGS84 (World Geodetic System)\n\nProjected CRS\n\nUses metric units (meters) because they are based on a projected model of the earth\nUsually good for local or regional high-precision spatial analysis and visualization\nExample: UTM (Universal Transversal Mercator)\n\n\n\n\n\n\nUTM (Universal Transversal Mercator) - a projected coordinate system. Each zone is a CRS.",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#epsg-codes",
    "href": "06-mapping.html#epsg-codes",
    "title": "Mapping data & advanced visualization",
    "section": "2.4 EPSG codes",
    "text": "2.4 EPSG codes\n\nCRS can be referenced using numeric identifiers called EPSG codes\n\nEPSG database: https://epsg.io/, e.g. EPSG code 4326: https://epsg.io/4326\n\n\n\nSome common CRS\n\n\nName\nEPSG code\nArea\nGeodetic?\nUse\n\n\n\n\nWorld Geodetic System 1984 (WGS84)\n4326\nWorld\nYes\nBasic geographic coordinates, common usage in GPS systems\n\n\nWGS 84 / Pseudo-Mercator\n3857\nWorld\nNo\nGoogle Maps, OpenStreetMap, general web mapping\n\n\nUTM zone 32N\n25832\nCentral Europe\nNo\nSpatial analysis and measuring in Central Europe\n\n\nLAEA Europe\n3035\nEurope\nNo\nMulti-purpose CRS developed by the EU",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#crs-in-r",
    "href": "06-mapping.html#crs-in-r",
    "title": "Mapping data & advanced visualization",
    "section": "2.5 CRS in R",
    "text": "2.5 CRS in R\n\nHow do we work with CRS in R?\n\nConvert to an sf dataframe: st_as_sf(..., crs = 4326)\nAssign a CRS to an existing sf dataframe: st_crs(...) &lt;- 4326 or st_set_crs(…, 4326)\nTransform an existing CRS to a new CRS: st_transform(..., 4326)",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#handling-the-guerry-dataset",
    "href": "06-mapping.html#handling-the-guerry-dataset",
    "title": "Mapping data & advanced visualization",
    "section": "2.6 Handling the Guerry dataset",
    "text": "2.6 Handling the Guerry dataset\n\nLet us take a look back at data_guerry and how to handle it as a spatial dataframe\nGuerry::gfrance85 comes as an sp dataframe, that’s a bit old so we have to convert it\nThe dataset also comes with an invalid CRS, so we need to fix it\n\n\n1data_guerry &lt;- Guerry::gfrance85 %&gt;%\n2  st_as_sf() %&gt;%\n3  as_tibble() %&gt;%\n4  st_as_sf(crs = 27572) %&gt;%\n5  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;% # drop columns\n  select(Region:Department, all_of(names(variable_names))) # select columns\n\n\n1\n\nGuerry::gfrance85 comes as an sp object and it has no CRS information\n\n2\n\n…, so we convert it to an sf dataframe\n\n3\n\nAlso convert it to a tibble to make it look nicer\n\n4\n\nFinally, convert it back to sf and set the CRS to 25572 (which is the native CRS of the Guerry data)\n\n5\n\nHere, we change the region coding that can be used for spatial aggregation",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#spatial-operations",
    "href": "06-mapping.html#spatial-operations",
    "title": "Mapping data & advanced visualization",
    "section": "2.7 Spatial operations",
    "text": "2.7 Spatial operations\n\nFor mapping the Guerry data, a nice addition is to perform spatial aggregation to compare the data across geographical levels\nSpatial operations like spatial aggregations are one of the main advantages of spatial over regular data\nIn Guerry, we have two levels: Departments (smaller) and regions (larger)\nIn the following chunk we perform spatial aggregation outside of the server function\n\n\ndata_guerry_region &lt;- data_guerry %&gt;%\n1    group_by(Region) %&gt;%\n2    summarise(across(\n        .cols = all_of(names(variable_names)),\n        function(x) {\n            if (cur_column() %in% c(\"Area\", \"Pop1831\")) {\n                sum(x)\n            } else {\n                mean(x)\n            }\n        }\n    ))\n\n\n1\n\nDefine a group variable (Region)\n\n2\n\nAggregate Guerry variables and geometries by their grouping variable Region. Features are summed or averaged while geometries are merged.",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#guerry-as-spatial-data",
    "href": "06-mapping.html#guerry-as-spatial-data",
    "title": "Mapping data & advanced visualization",
    "section": "2.8 Guerry as spatial data",
    "text": "2.8 Guerry as spatial data\n\nQuestion: What can we say about the Guerry dataset in terms of spatial information?\n\n\ndata_guerry[\"Literacy\"]\n\nSimple feature collection with 85 features and 1 field\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441\nProjected CRS: NTF (Paris) / Lambert zone II\n# A tibble: 85 × 2\n   Literacy                                                             geometry\n      &lt;int&gt;                                                   &lt;MULTIPOLYGON [m]&gt;\n 1       37 (((801150 2092615, 800669 2093190, 800688 2095430, 800780 2095795, …\n 2       51 (((729326 2521619, 729320 2521230, 729280 2518544, 728751 2517520, …\n 3       13 (((710830 2137350, 711746 2136617, 712430 2135212, 712070 2134132, …\n 4       46 (((882701 1920024, 882408 1920733, 881778 1921200, 881526 1922332, …\n 5       69 (((886504 1922890, 885733 1922978, 885479 1923276, 883061 1925266, …\n 6       27 (((747008 1925789, 746630 1925762, 745723 1925138, 744216 1925236, …\n 7       67 (((818893 2514767, 818614 2514515, 817900 2514467, 817327 2514945, …\n 8       18 (((509103 1747787, 508820 1747513, 508154 1747093, 505861 1746627, …\n 9       59 (((775400 2345600, 775068 2345397, 773587 2345177, 772940 2344780, …\n10       34 (((626230 1810121, 626269 1810496, 627494 1811321, 627681 1812424, …\n# ℹ 75 more rows",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#exercises",
    "href": "06-mapping.html#exercises",
    "title": "Mapping data & advanced visualization",
    "section": "2.9 Exercises",
    "text": "2.9 Exercises\n\n\n\n\n\n\nExercise 1\n\n\n\nExtract the sfc object from the Guerry dataset. What is the difference between sf and sfc?\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nConsult the documentation of st_geometry()\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nst_geometry(data_guerry)\n\nsf objects are dataframes containing of one or more non-spatial feature columns and a geometry column containing an sfc object\nsfc objects are representations of geospatial geometries. They contain all relevant spatial metadata but no contextual feature data\n\n\n\n\n\n\n\n\n\nExercise 2\n\n\n\nExtract the fifth sfg object of the sfc object from exercise 1. What is the difference between the two?\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nObjects of class sfc behave like lists and can be subset in the same fashion\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ngeom &lt;- st_geometry(data_guerry)\ngeom[[1]]\n\nsfg objects contain raw geometries consisting only of coordinates and a geometric topology (i.e. how to connect coordinates to make a polygon)\nsfc objects have spatial metadata including the CRS which makes it possible to where the coordinates are located on the planet\n\n\n\n\n\n\n\n\n\nExercise 3\n\n\n\ndata_guerry currently consists of multi polygons. How can we convert these polygons to point geometries? Explore the function reference of the sf package and find functions (multiple answers possible) that can convert polygons to points in some way.\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nA search for “point” can give you the most obvious functions to fulfill the task, but there’s more!\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nst_point_on_surface(data_guerry) returns a point that is guaranteed to be on the polygon\nst_centroid(data_guerry) returns the geometrical center of the polygon\nst_cast(data_guerry, \"POINT\") or st_cast(data_guerry, \"MULTIPOINT\")\nAll of them return a warning! Why might that be?\nst_sample(data_guerry, size = rep(1, nrow(data_guerry)))\nDoesn’t return a warning, but is random and drops all features\n\n\n\n\n\n\n\n\n\nExercise 4\n\n\n\nCurrently, the Guerry dataframe has the CRS “NTF (Paris) / Lambert zone II”, which is already a good choice. What other CRS could be a good choice for accurate mapping in France?\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nRemember the UTM coordinate system! Scroll back up to see the UTM zones.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nWhile there are many CRS that might be a good choice, one solution that we addressed in this workshop are UTM zones! Taking a look at the figure of UTM zones we can see that UTM zone 31N almost entirely covers the area of France.\n\n\n\n\n\n\n\n\n\n\nExercise 5\n\n\n\nTransform the Guerry dataframe to your new CRS from exercise 4.\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nRemember you can visit https://epsg.io/ to look up EPSG codes.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nUsing the search function on epsg.io we can determine that the EPSG code to transform the Guerry dataset from Lambert zone II to UTM zone 31N is one of 23031, 25831 or 32631.\n\n  st_transform(data_guerry, 23031)",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#integrate-leaflet-in-shiny",
    "href": "06-mapping.html#integrate-leaflet-in-shiny",
    "title": "Mapping data & advanced visualization",
    "section": "3.1 Integrate Leaflet in Shiny",
    "text": "3.1 Integrate Leaflet in Shiny\n\nLeaflet in Shiny works just like any other type of visualization, we need:\n\nA UI output: leaflet::leafletOutput()\nA rendering function: leaflet::renderLeaflet()\n\nIn our app, we add a geographic explorer of the Guerry dataset\n\n\n1tabItem(\n  tabName = \"tab_map\",\n2  fluidRow(\n    column(\n      width = 12,\n      box(\n        id = \"tab_map_box\",\n        status = \"primary\",\n        headerBorder = FALSE,\n        collapsible = FALSE,\n        width = 12,\n3        leaflet::leafletOutput(\"tab_map_map\", height = \"800px\", width = \"100%\")\n      ) # end box\n    ) # end column\n  ) # end fluidRow\n) # end tabItem\n\n\n1\n\nCreate a new tab called tab_map\n\n2\n\nAdd a fluid row containing a column and a box covering the entire page\n\n3\n\nAdd a UI output that will hold the leaflet map. It covers the entire width and 800 pixels in height.",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#leaflet-workhorse",
    "href": "06-mapping.html#leaflet-workhorse",
    "title": "Mapping data & advanced visualization",
    "section": "3.2 Leaflet workhorse",
    "text": "3.2 Leaflet workhorse\n\nThe leaflet package is centered around the workhorse leaflet() which creates an empty map canvas\nEach additional function can be piped into and adds an additional mapping component (similar to ggplot2)\n\naddProviderTiles() adds a base map, in this case we use four base maps that can be chosen from\naddLayersControl() adds a button that lets you switch between map layers\nsetView() sets the center and zoom level of the initial map view\n\n\n\n1output$tab_map_map &lt;- leaflet::renderLeaflet({\n2        leaflet() %&gt;%\n3            addProviderTiles(\"OpenStreetMap.France\", group = \"OSM\") %&gt;%\n            addProviderTiles(\"OpenTopoMap\", group = \"OTM\") %&gt;%\n            addProviderTiles(\"Stamen.TonerLite\", group = \"Stamen Toner\") %&gt;%\n            addProviderTiles(\"GeoportailFrance.orthos\", group = \"Orthophotos\") %&gt;%\n4            addLayersControl(baseGroups = c(\"OSM\", \"OTM\",\n                                                                            \"Stamen Toner\", \"Orthophotos\")) %&gt;%\n5            setView(lng = 3, lat = 47, zoom = 5)\n})\n\n\n1\n\nFill the output tab_map_map with a leaflet map using renderLeaflet\n\n2\n\nAdd an empty map using the power horse leaflet()\n\n3\n\nAdd multiple basemaps: OpenStreetMap, OpenTopoMap, Stamen and ortho photos from the French geo portal\n\n4\n\nAdd a button to control which of the basemaps to show\n\n5\n\nSet the initial center of the map and the zoom level",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#full-code",
    "href": "06-mapping.html#full-code",
    "title": "Mapping data & advanced visualization",
    "section": "3.3 Full code",
    "text": "3.3 Full code\n\n\nFull code including an empty map\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(fresh)\nlibrary(waiter)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(viridis)\nlibrary(leaflet)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(datawizard)\nlibrary(parameters)\nlibrary(performance)\nlibrary(modelsummary)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\nvariable_desc &lt;- list(\n  Crime_pers = list(\n    title = \"Crime against persons\",\n    desc = as.character(p(tags$b(\"Crime against persons:\"), \"Population per crime against persons\", hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Crime_prop = list(\n    title = \"Crime against property\",\n    desc = as.character(p(tags$b(\"Crime against property:\"), \"Population per crime against property\", hr(), helpText(\"Source: Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Literacy = list(\n    title = \"Literacy\",\n    desc = as.character(p(tags$b(\"Percent Read & Write:\"), \"Percent of military conscripts who can read and write\", hr(), helpText(\"Source: Table A2 in Guerry (1833)\"))),\n    lgd = \"Literacy\",\n    unit = \" %\"\n  ),\n  Donations = list(\n    title = \"Donations to the poor\",\n    desc = as.character(p(tags$b(\"Donations to the poor\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bulletin des lois\"))),\n    lgd = \"Donations\",\n    unit = \"\"\n  ),\n  Infants = list(\n    title = \"Illegitimate births\",\n    desc = as.character(p(tags$b(\"Population per illegitimate birth\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bureau des Longitudes, 1817-1821\"))),\n    lgd = \"Pop. per birth\",\n    unit = \"\"\n  ),\n  Suicides = list(\n    title = \"Suicides\",\n    desc = as.character(p(tags$b(\"Population per suicide\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1827-1830\"))),\n    lgd = \"Pop. per suicide\",\n    unit = \"\"\n  ),\n  Wealth = list(\n    title = \"Tax / capita\",\n    desc = as.character(p(tags$b(\"Per capita tax on personal property:\"), \"A ranked index based on taxes on personal and movable property per inhabitant\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Tax / capita\",\n    unit = \"\"\n  ),\n  Commerce = list(\n    title = \"Commerce & Industry\",\n    desc = as.character(p(tags$b(\"Commerce & Industry:\"), \"Commerce and Industry, measured by the rank of the number of patents / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Patents / capita\",\n    unit = \"\"\n  ),\n  Clergy = list(\n    title = \"Clergy\",\n    desc = as.character(p(tags$b(\"Distribution of clergy:\"), \"Distribution of clergy, measured by the rank of the number of Catholic priests in active service / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Almanach officiel du clergy, 1829\"))),\n    lgd = \"Priests / capita\",\n    unit = \"\"\n  ),\n  Crime_parents = list(\n    title = \"Crime against parents\",\n    desc = as.character(p(tags$b(\"Crime against parents:\"), \"Crimes against parents, measured by the rank of the ratio of crimes against parents to all crimes \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Share of crimes\",\n    unit = \" %\"\n  ),\n  Infanticide = list(\n    title = \"Infanticides\",\n    desc = as.character(p(tags$b(\"Infanticides per capita:\"), \"Ranked ratio of number of infanticides to population \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Infanticides / capita\",\n    unit = \"\"\n  ),\n  Donation_clergy = list(\n    title = \"Donations to the clergy\",\n    desc = as.character(p(tags$b(\"Donations to the clergy:\"), \"Ranked ratios of the number of bequests and donations inter vivios to population \\u2013 Average for the years 1815-1824\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Bull. des lois, ordunn. d’autorisation\"))),\n    lgd = \"Donations / capita\",\n    unit = \"\"\n  ),\n  Lottery = list(\n    title = \"Wager on Royal Lottery\",\n    desc = as.character(p(tags$b(\"Per capita wager on Royal Lottery:\"), \"Ranked ratio of the proceeds bet on the royal lottery to population \\u2013 Average for the years 1822-1826\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte rendu par le ministre des finances\"))),\n    lgd = \"Wager / capita\",\n    unit = \"\"\n  ),\n  Desertion = list(\n    title = \"Military desertion\",\n    desc = as.character(p(tags$b(\"Military desertion:\"), \"Military disertion, ratio of the number of young soldiers accused of desertion to the force of the military contingent, minus the deficit produced by the insufficiency of available billets\\u2013 Average of the years 1825-1827\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte du ministère du guerre, 1829 état V\"))),\n    lgd = \"No. of desertions\",\n    unit = \"\"\n  ),\n  Instruction = list(\n    title = \"Instruction\",\n    desc = as.character(p(tags$b(\"Instruction:\"), \"Ranks recorded from Guerry's map of Instruction. Note: this is inversely related to literacy (as defined here)\")),\n    lgd = \"Instruction\",\n    unit = \"\"\n  ),\n  Prostitutes = list(\n    title = \"Prostitutes\",\n    desc = as.character(p(tags$b(\"Prostitutes in Paris:\"), \"Number of prostitutes registered in Paris from 1816 to 1834, classified by the department of their birth\", hr(), helpText(\"Source: Parent-Duchatelet (1836), De la prostitution en Paris\"))),\n    lgd = \"No. of prostitutes\",\n    unit = \"\"\n  ),\n  Distance = list(\n    title = \"Distance to paris\",\n    desc = as.character(p(tags$b(\"Distance to Paris (km):\"), \"Distance of each department centroid to the centroid of the Seine (Paris)\", hr(), helpText(\"Source: Calculated from department centroids\"))),\n    lgd = \"Distance\",\n    unit = \" km\"\n  ),\n  Area = list(\n    title = \"Area\",\n    desc = as.character(p(tags$b(\"Area (1000 km\\u00b2)\"), hr(), helpText(\"Source: Angeville (1836)\"))),\n    lgd = \"Area\",\n    unit = \" km\\u00b2\"\n  ),\n  Pop1831 = list(\n    title = \"Population\",\n    desc = as.character(p(tags$b(\"Population in 1831, in 1000s\"), hr(), helpText(\"Source: Taken from Angeville (1836), Essai sur la Statistique de la Population français\"))),\n    lgd = \"Population (in 1000s)\",\n    unit = \"\"\n  )\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prep data (Tab: Map data) ----\ndata_guerry_region &lt;- data_guerry %&gt;%\n  group_by(Region) %&gt;%\n  summarise(across(\n    .cols = all_of(names(variable_names)),\n    function(x) {\n      if (cur_column() %in% c(\"Area\", \"Pop1831\")) {\n        sum(x)\n      } else {\n        mean(x)\n      }\n    }\n  ))\n\n## Prepare palettes ----\n## Used for mapping\npals &lt;- list(\n  Sequential = RColorBrewer::brewer.pal.info %&gt;%\n    filter(category %in% \"seq\") %&gt;%\n    row.names(),\n  Viridis = c(\"Magma\", \"Inferno\", \"Plasma\", \"Viridis\",\n              \"Cividis\", \"Rocket\", \"Mako\", \"Turbo\")\n)\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      menuItem(tabName = \"tab_map\", text = \"Map data\", icon = icon(\"map\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      ),\n      ### 3.3.3 Tab: Model data ----\n      tabItem(\n        tabName = \"tab_model\",\n        fluidRow(\n          column(\n            width = 6,\n            #### Inputs(s) ----\n            box(\n              width = 12,\n              title = \"Select variables\",\n              status = \"primary\",\n              shinyWidgets::pickerInput(\n                \"model_x\",\n                label = \"Select a dependent variable\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(liveSearch = TRUE),\n                selected = \"Literacy\"\n              ),\n              shinyWidgets::pickerInput(\n                \"model_y\",\n                label = \"Select independent variables\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(\n                  actionsBox = TRUE,\n                  liveSearch = TRUE,\n                  selectedTextFormat = \"count\",\n                  countSelectedText = \"{0} variables selected\",\n                  noneSelectedText = \"No variables selected\"\n                ),\n                multiple = TRUE,\n                selected = \"Commerce\"\n              ),\n              shinyWidgets::prettyCheckbox(\n                \"model_std\",\n                label = \"Standardize variables?\",\n                value = TRUE,\n                status = \"primary\",\n                shape = \"curve\"\n              ),\n              hr(),\n              actionButton(\n                \"refresh\",\n                label = \"Apply changes\",\n                icon = icon(\"refresh\"),\n                flat = TRUE\n              )\n            ),\n            #### Outputs(s) ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model analysis\",\n              side = \"right\",\n              width = 12,\n              ##### Tabpanel: Coefficient plot ----\n              tabPanel(\n                title = \"Plot: Coefficients\",\n                plotly::plotlyOutput(\"coefficientplot\")\n              ),\n              ##### Tabpanel: Scatterplot ----\n              tabPanel(\n                title = \"Plot: Scatterplot\",\n                plotly::plotlyOutput(\"scatterplot\")\n              ),\n              ##### Tabpanel: Table: Regression ----\n              tabPanel(\n                title = \"Table: Model\",\n                htmlOutput(\"tableregression\")\n              )\n            )\n          ),\n          column(\n            width = 6,\n            ##### Box: Pair diagramm ----\n            box(\n              width = 12,\n              title = \"Pair diagram\",\n              status = \"primary\",\n              plotly::plotlyOutput(\"pairplot\")\n            ),\n            ##### TabBox: Model diagnostics ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model diagnostics\",\n              width = 12,\n              side = \"right\",\n              tabPanel(\n                title = \"Normality\",\n                plotly::plotlyOutput(\"normality\")\n              ),\n              tabPanel(\n                title = \"Outliers\",\n                plotly::plotlyOutput(\"outliers\")\n              ),\n              tabPanel(\n                title = \"Heteroskedasticity\",\n                plotly::plotlyOutput(\"heteroskedasticity\")\n              )\n            )\n          )\n        )\n      ),\n      ### 3.3.4 Tab: Map data ----\n      tabItem(\n        tabName = \"tab_map\", # must correspond to related menuItem name\n        fluidRow(\n          column(\n            #### Output(s) ----\n            width = 8,\n            box(\n              id = \"tab_map_box\",\n              status = \"primary\",\n              headerBorder = FALSE,\n              collapsible = FALSE,\n              width = 12,\n              leaflet::leafletOutput(\"tab_map_map\", height = \"800px\", width = \"100%\")\n            ) # end box\n          ) # end column\n        ) # end fluidRow\n      ) # end tabItem\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n  ### Define & estimate model ----\n  mparams &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(data_guerry)[c(x, y)]\n    dt_labels &lt;- sf::st_drop_geometry(data_guerry)[c(\"Department\", \"Region\")]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    form &lt;- as.formula(paste(x, \"~\", paste(y, collapse = \" + \")))\n    mod &lt;- lm(form, data = dt)\n    \n    list(\n      x = x,\n      y = y,\n      data = dt,\n      data_labels = dt_labels,\n      model = mod\n    )\n  }) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n  \n  ### Pair diagram ----\n  output$pairplot &lt;- plotly::renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    p &lt;- GGally::ggpairs(\n      params$data,\n      axisLabels = \"none\",\n      lower = list(\n        continuous = function(data, mapping, ...) {\n          ggplot(data, mapping) +\n            suppressWarnings(geom_point(\n              aes(text = paste0(\n                \"Department: \", \n                dt_labels[[\"Department\"]],\n                \"&lt;br&gt;Region: \", \n                dt_labels[[\"Region\"]])),\n              color = \"black\"\n            ))\n        }\n      )\n    )\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Coefficientplot ----\n  output$coefficientplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    x &lt;- params$x\n    y &lt;- params$y\n    \n    \n    p &lt;- plot(parameters::model_parameters(params$model))\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Scatterplot ----\n  output$scatterplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    x &lt;- params$x \n    y &lt;- params$y\n    \n    \n    if (length(y) == 1) {\n      p &lt;- ggplot(params$data, \n                  aes(x = .data[[params$x]], \n                      y = .data[[params$y]])) +\n        geom_point(aes(text = paste0(\"Department: \", \n                                     dt_labels[[\"Department\"]],\n                                     \"&lt;br&gt;Region: \", \n                                     dt_labels[[\"Region\"]])),\n                   color = \"black\") +\n        geom_smooth() + \n        geom_smooth(method='lm') +\n        theme_light()\n    } else {\n      p &lt;- ggplot() +\n        theme_void() +\n        annotate(\"text\", \n                 label = \"Cannot create scatterplot.\\nMore than two variables selected.\", \n                 x = 0, y = 0, \n                 size = 5, \n                 colour = \"red\",\n                 hjust = 0.5,\n                 vjust = 0.5) +\n        xlab(NULL)\n      \n    }\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Table: Regression ----\n  output$tableregression &lt;- renderUI({\n    params &lt;- mparams()\n    HTML(modelsummary(\n      dvnames(list(params$model)),\n      gof_omit = \"AIC|BIC|Log|Adj|RMSE\"\n    ))\n  })\n  \n  ### Plot: Normality residuals ----\n  output$normality &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_normality(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Outliers ----\n  output$outliers &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_outliers(params$model), show_labels = FALSE)\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$x &lt;- \"Leverage\"\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Heteroskedasticity ----\n  output$heteroskedasticity &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_heteroskedasticity(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$y &lt;- \"Sqrt. |Std. residuals|\" # ggplotly doesn't support expressions\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  \n  ## 4.3 Map data ----\n  output$tab_map_map &lt;- leaflet::renderLeaflet({\n    leaflet() %&gt;%\n      addProviderTiles(\"OpenStreetMap.France\", group = \"OSM\") %&gt;%\n      addProviderTiles(\"OpenTopoMap\", group = \"OTM\") %&gt;%\n      addProviderTiles(\"Stamen.TonerLite\", group = \"Stamen Toner\") %&gt;%\n      addProviderTiles(\"GeoportailFrance.orthos\", group = \"Orthophotos\") %&gt;%\n      addLayersControl(baseGroups = c(\"OSM\", \"OTM\",\n                                      \"Stamen Toner\", \"Orthophotos\")) %&gt;%\n      setView(lng = 3, lat = 47, zoom = 5)\n  })\n}\n\nshinyApp(ui, server)",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#specifics-of-leaflet-mapping",
    "href": "06-mapping.html#specifics-of-leaflet-mapping",
    "title": "Mapping data & advanced visualization",
    "section": "4.1 Specifics of Leaflet mapping",
    "text": "4.1 Specifics of Leaflet mapping\n\nVariables are passed using formulas (i.e. instead of data_guerry$Literacy, we write ~Literacy)\nLeaflet by default only supports WGS84 (EPSG:4326) as CRS\nPalettes are applied using custom functions that are generated in function factories:\n\ncolorNumeric() maps continuous values\ncolorBin() bins continuous values evenly\ncolorQuantile() bins continuous values based on their quantiles\ncolorFactor() maps categorical values\n\nhighlightOptions() adds a nice highlight effect when hovering over a polygon\n\n\noutput$tab_map_map &lt;- leaflet::renderLeaflet({\n1    pal &lt;- colorNumeric(palette = \"Reds\", domain = NULL)\n    \n2    leaflet(data = st_transform(data_guerry, 4326)) %&gt;%\n3        addProviderTiles(\"OpenStreetMap.France\") %&gt;%\n4        setView(lng = 3, lat = 47, zoom = 5) %&gt;%\n5        addPolygons(\n6            fillColor = ~params$pal(Literacy),\n7            fillOpacity = 0.7,\n            weight = 1,\n            color = \"black\",\n            opacity = 0.5,\n8            highlightOptions = highlightOptions(\n                weight = 2,\n                color = \"black\",\n                opacity = 0.5,\n                fillOpacity = 1,\n                bringToFront = TRUE,\n                sendToBack = TRUE\n            )\n        ) %&gt;%\n9        addLegend(\n            position = \"bottomright\",\n10            pal = pal,\n            values = ~Literacy,\n            opacity = 0.9,\n            title = \"Literacy\",\n11            labFormat = labelFormat(suffix = \" %\")\n        )\n})\n\n\n1\n\nDetermine the color palette for mapping. Here, we want to map continious values in red. The output is a function called pal() which we can use later on.\n\n2\n\nCreate an empty map. Add spatial data. Note that leaflet by default only accepts spatial data with EPSG:4326. For anything else, consult leaflet::leafletCRS(), but don’t expect to understand much of what’s going on.\n\n3\n\nAdd a basemap of OpenStreetMap France\n\n4\n\nSet the center and zoom level of the initial view\n\n5\n\nThe addPolygons() function adds polygons to the leaflet map\n\n6\n\nfillColor determines how the polygons should be colored. We pass a formula that contains a call to our generated function pal() (see point 2) that maps colors to the Literacy variable.\n\n7\n\nWe can add additional parameters that control the appearance of the map, e.g. opacity, color or line thickness (weight).\n\n8\n\nhighlightOptions() allows you to add a nice highlight effect when hovering over the polygons\n\n9\n\nUsing addLegend() we add a legend to the bottom right of the Leaflet map\n\n10\n\naddLegend() accepts values in the same way as addPolygons(): pal accepts the generated palette function and values accepts a formula containing the column name in the input dataset.\n\n11\n\nFinally, labelFormat() allows you to change the formatting of the legend label, e.g. if you need to specify whether a number is a percentage, meters or something else",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#full-code-1",
    "href": "06-mapping.html#full-code-1",
    "title": "Mapping data & advanced visualization",
    "section": "4.2 Full code",
    "text": "4.2 Full code\n\n\nFull code including a simple Leaflet map\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(fresh)\nlibrary(waiter)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(viridis)\nlibrary(leaflet)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(datawizard)\nlibrary(parameters)\nlibrary(performance)\nlibrary(modelsummary)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\nvariable_desc &lt;- list(\n  Crime_pers = list(\n    title = \"Crime against persons\",\n    desc = as.character(p(tags$b(\"Crime against persons:\"), \"Population per crime against persons\", hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Crime_prop = list(\n    title = \"Crime against property\",\n    desc = as.character(p(tags$b(\"Crime against property:\"), \"Population per crime against property\", hr(), helpText(\"Source: Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Literacy = list(\n    title = \"Literacy\",\n    desc = as.character(p(tags$b(\"Percent Read & Write:\"), \"Percent of military conscripts who can read and write\", hr(), helpText(\"Source: Table A2 in Guerry (1833)\"))),\n    lgd = \"Literacy\",\n    unit = \" %\"\n  ),\n  Donations = list(\n    title = \"Donations to the poor\",\n    desc = as.character(p(tags$b(\"Donations to the poor\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bulletin des lois\"))),\n    lgd = \"Donations\",\n    unit = \"\"\n  ),\n  Infants = list(\n    title = \"Illegitimate births\",\n    desc = as.character(p(tags$b(\"Population per illegitimate birth\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bureau des Longitudes, 1817-1821\"))),\n    lgd = \"Pop. per birth\",\n    unit = \"\"\n  ),\n  Suicides = list(\n    title = \"Suicides\",\n    desc = as.character(p(tags$b(\"Population per suicide\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1827-1830\"))),\n    lgd = \"Pop. per suicide\",\n    unit = \"\"\n  ),\n  Wealth = list(\n    title = \"Tax / capita\",\n    desc = as.character(p(tags$b(\"Per capita tax on personal property:\"), \"A ranked index based on taxes on personal and movable property per inhabitant\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Tax / capita\",\n    unit = \"\"\n  ),\n  Commerce = list(\n    title = \"Commerce & Industry\",\n    desc = as.character(p(tags$b(\"Commerce & Industry:\"), \"Commerce and Industry, measured by the rank of the number of patents / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Patents / capita\",\n    unit = \"\"\n  ),\n  Clergy = list(\n    title = \"Clergy\",\n    desc = as.character(p(tags$b(\"Distribution of clergy:\"), \"Distribution of clergy, measured by the rank of the number of Catholic priests in active service / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Almanach officiel du clergy, 1829\"))),\n    lgd = \"Priests / capita\",\n    unit = \"\"\n  ),\n  Crime_parents = list(\n    title = \"Crime against parents\",\n    desc = as.character(p(tags$b(\"Crime against parents:\"), \"Crimes against parents, measured by the rank of the ratio of crimes against parents to all crimes \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Share of crimes\",\n    unit = \" %\"\n  ),\n  Infanticide = list(\n    title = \"Infanticides\",\n    desc = as.character(p(tags$b(\"Infanticides per capita:\"), \"Ranked ratio of number of infanticides to population \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Infanticides / capita\",\n    unit = \"\"\n  ),\n  Donation_clergy = list(\n    title = \"Donations to the clergy\",\n    desc = as.character(p(tags$b(\"Donations to the clergy:\"), \"Ranked ratios of the number of bequests and donations inter vivios to population \\u2013 Average for the years 1815-1824\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Bull. des lois, ordunn. d’autorisation\"))),\n    lgd = \"Donations / capita\",\n    unit = \"\"\n  ),\n  Lottery = list(\n    title = \"Wager on Royal Lottery\",\n    desc = as.character(p(tags$b(\"Per capita wager on Royal Lottery:\"), \"Ranked ratio of the proceeds bet on the royal lottery to population \\u2013 Average for the years 1822-1826\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte rendu par le ministre des finances\"))),\n    lgd = \"Wager / capita\",\n    unit = \"\"\n  ),\n  Desertion = list(\n    title = \"Military desertion\",\n    desc = as.character(p(tags$b(\"Military desertion:\"), \"Military disertion, ratio of the number of young soldiers accused of desertion to the force of the military contingent, minus the deficit produced by the insufficiency of available billets\\u2013 Average of the years 1825-1827\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte du ministère du guerre, 1829 état V\"))),\n    lgd = \"No. of desertions\",\n    unit = \"\"\n  ),\n  Instruction = list(\n    title = \"Instruction\",\n    desc = as.character(p(tags$b(\"Instruction:\"), \"Ranks recorded from Guerry's map of Instruction. Note: this is inversely related to literacy (as defined here)\")),\n    lgd = \"Instruction\",\n    unit = \"\"\n  ),\n  Prostitutes = list(\n    title = \"Prostitutes\",\n    desc = as.character(p(tags$b(\"Prostitutes in Paris:\"), \"Number of prostitutes registered in Paris from 1816 to 1834, classified by the department of their birth\", hr(), helpText(\"Source: Parent-Duchatelet (1836), De la prostitution en Paris\"))),\n    lgd = \"No. of prostitutes\",\n    unit = \"\"\n  ),\n  Distance = list(\n    title = \"Distance to paris\",\n    desc = as.character(p(tags$b(\"Distance to Paris (km):\"), \"Distance of each department centroid to the centroid of the Seine (Paris)\", hr(), helpText(\"Source: Calculated from department centroids\"))),\n    lgd = \"Distance\",\n    unit = \" km\"\n  ),\n  Area = list(\n    title = \"Area\",\n    desc = as.character(p(tags$b(\"Area (1000 km\\u00b2)\"), hr(), helpText(\"Source: Angeville (1836)\"))),\n    lgd = \"Area\",\n    unit = \" km\\u00b2\"\n  ),\n  Pop1831 = list(\n    title = \"Population\",\n    desc = as.character(p(tags$b(\"Population in 1831, in 1000s\"), hr(), helpText(\"Source: Taken from Angeville (1836), Essai sur la Statistique de la Population français\"))),\n    lgd = \"Population (in 1000s)\",\n    unit = \"\"\n  )\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prep data (Tab: Map data) ----\ndata_guerry_region &lt;- data_guerry %&gt;%\n  group_by(Region) %&gt;%\n  summarise(across(\n    .cols = all_of(names(variable_names)),\n    function(x) {\n      if (cur_column() %in% c(\"Area\", \"Pop1831\")) {\n        sum(x)\n      } else {\n        mean(x)\n      }\n    }\n  ))\n\n## Prepare palettes ----\n## Used for mapping\npals &lt;- list(\n  Sequential = RColorBrewer::brewer.pal.info %&gt;%\n    filter(category %in% \"seq\") %&gt;%\n    row.names(),\n  Viridis = c(\"Magma\", \"Inferno\", \"Plasma\", \"Viridis\",\n              \"Cividis\", \"Rocket\", \"Mako\", \"Turbo\")\n)\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      menuItem(tabName = \"tab_map\", text = \"Map data\", icon = icon(\"map\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      ),\n      ### 3.3.3 Tab: Model data ----\n      tabItem(\n        tabName = \"tab_model\",\n        fluidRow(\n          column(\n            width = 6,\n            #### Inputs(s) ----\n            box(\n              width = 12,\n              title = \"Select variables\",\n              status = \"primary\",\n              shinyWidgets::pickerInput(\n                \"model_x\",\n                label = \"Select a dependent variable\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(liveSearch = TRUE),\n                selected = \"Literacy\"\n              ),\n              shinyWidgets::pickerInput(\n                \"model_y\",\n                label = \"Select independent variables\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(\n                  actionsBox = TRUE,\n                  liveSearch = TRUE,\n                  selectedTextFormat = \"count\",\n                  countSelectedText = \"{0} variables selected\",\n                  noneSelectedText = \"No variables selected\"\n                ),\n                multiple = TRUE,\n                selected = \"Commerce\"\n              ),\n              shinyWidgets::prettyCheckbox(\n                \"model_std\",\n                label = \"Standardize variables?\",\n                value = TRUE,\n                status = \"primary\",\n                shape = \"curve\"\n              ),\n              hr(),\n              actionButton(\n                \"refresh\",\n                label = \"Apply changes\",\n                icon = icon(\"refresh\"),\n                flat = TRUE\n              )\n            ),\n            #### Outputs(s) ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model analysis\",\n              side = \"right\",\n              width = 12,\n              ##### Tabpanel: Coefficient plot ----\n              tabPanel(\n                title = \"Plot: Coefficients\",\n                plotly::plotlyOutput(\"coefficientplot\")\n              ),\n              ##### Tabpanel: Scatterplot ----\n              tabPanel(\n                title = \"Plot: Scatterplot\",\n                plotly::plotlyOutput(\"scatterplot\")\n              ),\n              ##### Tabpanel: Table: Regression ----\n              tabPanel(\n                title = \"Table: Model\",\n                htmlOutput(\"tableregression\")\n              )\n            )\n          ),\n          column(\n            width = 6,\n            ##### Box: Pair diagramm ----\n            box(\n              width = 12,\n              title = \"Pair diagram\",\n              status = \"primary\",\n              plotly::plotlyOutput(\"pairplot\")\n            ),\n            ##### TabBox: Model diagnostics ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model diagnostics\",\n              width = 12,\n              side = \"right\",\n              tabPanel(\n                title = \"Normality\",\n                plotly::plotlyOutput(\"normality\")\n              ),\n              tabPanel(\n                title = \"Outliers\",\n                plotly::plotlyOutput(\"outliers\")\n              ),\n              tabPanel(\n                title = \"Heteroskedasticity\",\n                plotly::plotlyOutput(\"heteroskedasticity\")\n              )\n            )\n          )\n        )\n      ),\n      ### 3.3.4 Tab: Map data ----\n      tabItem(\n        tabName = \"tab_map\", # must correspond to related menuItem name\n        fluidRow(\n          column(\n            #### Output(s) ----\n            width = 8,\n            box(\n              id = \"tab_map_box\",\n              status = \"primary\",\n              headerBorder = FALSE,\n              collapsible = FALSE,\n              width = 12,\n              leaflet::leafletOutput(\"tab_map_map\", height = \"800px\", width = \"100%\")\n            ) # end box\n          ) # end column\n        ) # end fluidRow\n      ) # end tabItem\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n  ### Define & estimate model ----\n  mparams &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(data_guerry)[c(x, y)]\n    dt_labels &lt;- sf::st_drop_geometry(data_guerry)[c(\"Department\", \"Region\")]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    form &lt;- as.formula(paste(x, \"~\", paste(y, collapse = \" + \")))\n    mod &lt;- lm(form, data = dt)\n    \n    list(\n      x = x,\n      y = y,\n      data = dt,\n      data_labels = dt_labels,\n      model = mod\n    )\n  }) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n  \n  ### Pair diagram ----\n  output$pairplot &lt;- plotly::renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    p &lt;- GGally::ggpairs(\n      params$data,\n      axisLabels = \"none\",\n      lower = list(\n        continuous = function(data, mapping, ...) {\n          ggplot(data, mapping) +\n            suppressWarnings(geom_point(\n              aes(text = paste0(\n                \"Department: \", \n                dt_labels[[\"Department\"]],\n                \"&lt;br&gt;Region: \", \n                dt_labels[[\"Region\"]])),\n              color = \"black\"\n            ))\n        }\n      )\n    )\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Coefficientplot ----\n  output$coefficientplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    x &lt;- params$x\n    y &lt;- params$y\n    \n    \n    p &lt;- plot(parameters::model_parameters(params$model))\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Scatterplot ----\n  output$scatterplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    x &lt;- params$x \n    y &lt;- params$y\n    \n    \n    if (length(y) == 1) {\n      p &lt;- ggplot(params$data, \n                  aes(x = .data[[params$x]], \n                      y = .data[[params$y]])) +\n        geom_point(aes(text = paste0(\"Department: \", \n                                     dt_labels[[\"Department\"]],\n                                     \"&lt;br&gt;Region: \", \n                                     dt_labels[[\"Region\"]])),\n                   color = \"black\") +\n        geom_smooth() + \n        geom_smooth(method='lm') +\n        theme_light()\n    } else {\n      p &lt;- ggplot() +\n        theme_void() +\n        annotate(\"text\", \n                 label = \"Cannot create scatterplot.\\nMore than two variables selected.\", \n                 x = 0, y = 0, \n                 size = 5, \n                 colour = \"red\",\n                 hjust = 0.5,\n                 vjust = 0.5) +\n        xlab(NULL)\n      \n    }\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Table: Regression ----\n  output$tableregression &lt;- renderUI({\n    params &lt;- mparams()\n    HTML(modelsummary(\n      dvnames(list(params$model)),\n      gof_omit = \"AIC|BIC|Log|Adj|RMSE\"\n    ))\n  })\n  \n  ### Plot: Normality residuals ----\n  output$normality &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_normality(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Outliers ----\n  output$outliers &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_outliers(params$model), show_labels = FALSE)\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$x &lt;- \"Leverage\"\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Heteroskedasticity ----\n  output$heteroskedasticity &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_heteroskedasticity(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$y &lt;- \"Sqrt. |Std. residuals|\" # ggplotly doesn't support expressions\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  \n  ## 4.3 Map data ----\n  # Render leaflet for the first time\n  output$tab_map_map &lt;- leaflet::renderLeaflet({\n    pal &lt;- colorNumeric(palette = \"Reds\", domain = NULL)\n    \n    leaflet(data = st_transform(data_guerry, 4326)) %&gt;%\n      addProviderTiles(\"OpenStreetMap.France\", group = \"OSM\") %&gt;%\n      addProviderTiles(\"OpenTopoMap\", group = \"OTM\") %&gt;%\n      addProviderTiles(\"Stamen.TonerLite\", group = \"Stamen Toner\") %&gt;%\n      addProviderTiles(\"GeoportailFrance.orthos\", group = \"Orthophotos\") %&gt;%\n      addLayersControl(baseGroups = c(\"OSM\", \"OTM\", \"Stamen Toner\", \"Orthophotos\")) %&gt;%\n      setView(lng = 3, lat = 47, zoom = 5) %&gt;%\n      addPolygons(\n        fillColor = ~pal(Literacy),\n        fillOpacity = 0.7,\n        weight = 1,\n        color = \"black\",\n        opacity = 0.5,\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"black\",\n          opacity = 0.5,\n          fillOpacity = 1,\n          bringToFront = TRUE,\n          sendToBack = TRUE\n        )\n      ) %&gt;%\n      addLegend(\n        position = \"bottomright\",\n        pal = pal,\n        values = ~Literacy,\n        opacity = 0.9,\n        title = \"Literacy\",\n        labFormat = labelFormat(suffix = \" %\")\n      )\n  })\n}\n\nshinyApp(ui, server)",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#exercises-1",
    "href": "06-mapping.html#exercises-1",
    "title": "Mapping data & advanced visualization",
    "section": "4.3 Exercises",
    "text": "4.3 Exercises\n\n\n\n\n\n\nExercise 1\n\n\n\nClassify the mapped values into deciles (i.e., ten equally sized bins).\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nConsult the documentation of ?colorNumeric(). Particularly watch out for the other three color* functions.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nLegend values can be binned using either the colorBin() or the colorQuantile() function. Since we want to map deciles, we need to use the colorQuantile() function and increase the number of bins to 10.\nInstead of using colorNumeric() to create the palette function\n\npal &lt;- colorNumeric(palette = \"Reds\", domain = NULL)\n\n… we can exchange it with colorQuantile():\n\npal &lt;- colorQuantile(palette = \"Reds\", domain = NULL, n = 10)\n\n\n\n\n\n\n\n\n\n\nExercise 2\n\n\n\nLet the opacity of the polygons scale with the values of the Commerce variable in the Guerry dataset. Also add a label that shows the values of Literacy in the following form: “value: &lt;literacy value here&gt;”.\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nRemember that data columns can be specified using the ~ symbol! This also applies to entire function calls.\nIf you are not sure about how to control opacity and labels, consult ?addPolygons().\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nUsing the Leaflet formulas, we can scale many arguments to the add* functions in any way we want. To scale the fill opacity using the Commerce variable, we can add fillOpacity = ~Commerce / 100. We divide by 100 to adjust the Commerce variable to the scale of opacity values (usually 0-1).\nIn the same way, we can provide hover labels\n\n  leaflet(data = st_transform(data_guerry, 4326)) %&gt;%\n    addProviderTiles(\"OpenStreetMap.France\", group = \"OSM\") %&gt;%\n    addProviderTiles(\"OpenTopoMap\", group = \"OTM\") %&gt;%\n    addProviderTiles(\"Stamen.TonerLite\", group = \"Stamen Toner\") %&gt;%\n    addProviderTiles(\"GeoportailFrance.orthos\", group = \"Orthophotos\") %&gt;%\n    addLayersControl(baseGroups = c(\"OSM\", \"OTM\", \"Stamen Toner\", \"Orthophotos\")) %&gt;%\n    setView(lng = 3, lat = 47, zoom = 5) %&gt;%\n    addPolygons(\n      fillColor = ~pal(Literacy),\n1      fillOpacity = ~Commerce / 100,\n      weight = 1,\n      color = \"black\",\n      opacity = 0.5,\n2      label = ~paste0(\"value: \", Literacy),\n      highlightOptions = highlightOptions(\n        weight = 2,\n        color = \"black\",\n        opacity = 0.5,\n        fillOpacity = 1,\n        bringToFront = TRUE,\n        sendToBack = TRUE\n      )\n    ) %&gt;%\n    addLegend(\n      position = \"bottomright\",\n      pal = pal,\n      values = ~Literacy,\n      opacity = 0.9,\n      title = \"Literacy\",\n      labFormat = labelFormat(suffix = \" %\")\n    )\n\n\n1\n\nScale the fill opacity using the Commerce variable. Since opacity is measured using percentages and Commerce is scaled somewhere around values of 1-100, we need to rescale Commerce by dividing it with 100.\n\n2\n\nWithin a formula expression, we can put any R expression. Thus, to combine values and text, we can just use paste0() on them.\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 3\n\n\n\nHow could we go about adding a second line to the hover label that also shows the value for the Commerce variable? In other words, how can we add a hover label of the following form:\nLiteracy: &lt;literacy value here&gt;\nCommerce: &lt;commerce value here&gt;\nThe solution does not have to be code, ideas are also welcome!\n\n\n\n\n\n\n\n\nTip\n\n\n\nRegular R line breaks (\\n) don’t work in Shiny. Why is that? What can we use instead (remember section 3 about HTML tags)?\n\n\n\n\n\n\n\n\nWarning\n\n\n\n\n\nRegular R line breaks don’t work, because Shiny apps are HTML documents. In section 3, we talked about HTML tags including the br() function producing the &lt;br/&gt; HTML tag. The code for a label with two lines could look something like this:\n\nleaflet() %&gt;%\n  addPolygons(\n    ..., # rest of the arguments\n    label = ~lapply(paste0(\"Literacy: \", Literacy, br(), \"Commerce: \", Commerce), HTML),\n  )\n\nNote: If we are dealing with character vectors containing HTML, we need to wrap them in a call to HTML() so R knows it’s dealing with HTML!",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#reactive-ui",
    "href": "06-mapping.html#reactive-ui",
    "title": "Mapping data & advanced visualization",
    "section": "5.1 Reactive UI",
    "text": "5.1 Reactive UI\n\nIn our app, we add three reactive components:\n\nselectInput() to select a variable to map\nradioButtons() to select an aggregation level, departments or regions\nselectInput() to select a color palette\n\nAdditionally, one new UI output (tab_map_desc) is added that describes the selected variable\n\n\n# Define selectable palettes: All sequential palettes + viridis\npals &lt;- list(\n  Sequential = RColorBrewer::brewer.pal.info %&gt;%\n    filter(category %in% \"seq\") %&gt;%\n    row.names(),\n  Viridis = c(\"Magma\", \"Inferno\", \"Plasma\", \"Viridis\",\n              \"Cividis\", \"Rocket\", \"Mako\", \"Turbo\")\n)\n\n\ntabItem(\n    tabName = \"tab_map\",\n    fluidRow(\n1        column(\n            width = 4,\n            box(\n                title = \"Data selection\",\n                status = \"primary\",\n                width = 12,\n2                selectInput(\n                    \"tab_map_select\",\n                    label = \"Select a variable\",\n                    choices = setNames(variable_names, names(variable_names))\n                )\n            ),\n3            box(\n                title = \"Map configuration\",\n                status = \"primary\",\n                width = 12,\n                radioButtons(\n                    \"tab_map_aggr\",\n                    label = \"Aggregation level\",\n                    choices = c(\"Departments\", \"Regions\"),\n                    selected = \"Departments\"\n                ),\n                selectInput(\n                    \"tab_map_pal\",\n                    label = \"Color palette\",\n                    choices = pals,\n                    selected = \"Reds\"\n                ) # end input\n            ) # end box\n        ), # end column\n        column(\n            width = 8,\n            box(\n                id = \"tab_map_box\",\n                status = \"primary\",\n                headerBorder = FALSE,\n                collapsible = FALSE,\n                width = 12,\n                leaflet::leafletOutput(\"tab_map_map\", height = \"800px\", width = \"100%\")\n            ) # end box\n        ) # end column\n    ) # end fluidRow\n) # end tabItem\n\n\n1\n\nPreviously, the map tab only consisted of one column with a box. Now we add another column that occupies 1/3 of the page where we add our UI inputs\n\n2\n\nAdd a dropdown menu that selects a variable to map\n\n3\n\nAdd a second box. Since both boxes have a width of 12",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#server-side",
    "href": "06-mapping.html#server-side",
    "title": "Mapping data & advanced visualization",
    "section": "5.2 Server side",
    "text": "5.2 Server side\n\nIn the server function, we have a lot to do:\n\nApply the selected aggregation level\nApply the selected palette\nChange hard code to adaptive code\n\n\n\n    # Select polygon based on aggregation level\n1    poly &lt;- reactive({\n        if (identical(input$tab_map_aggr, \"Regions\")) {\n            data_guerry_region\n        } else {\n            data_guerry\n        }\n    })\n    \n    # Select palette based on input\n2    palette &lt;- reactive({\n        pal &lt;- input$tab_map_pal\n        if (pal %in% pals$Viridis) {\n            pal &lt;- viridis::viridis_pal(option = tolower(pal))(5)\n        }\n        pal\n    })\n    \n    # Compile parameters for leaflet rendering\n3    params &lt;- reactive({\n        poly &lt;- st_transform(poly(), 4326)\n        pal &lt;- palette()\n        var &lt;- input$tab_map_select\n\n        values &lt;- as.formula(paste0(\"~\", var))\n        pal &lt;- colorNumeric(palette = pal, domain = NULL)\n\n        list(\n            poly = poly,\n            var = var,\n            pal = pal,\n            values = values\n        )\n    })\n    \n    # Render leaflet for the first time\n    output$tab_map_map &lt;- leaflet::renderLeaflet({\n        # Isolate call to params() to prevent render function to be executed\n        # every time params() is invalidated. No dependency is made.\n4        params &lt;- params()\n        leaflet(data = params$poly) %&gt;%\n            addProviderTiles(\"OpenStreetMap.France\", group = \"OSM\") %&gt;%\n            addProviderTiles(\"OpenTopoMap\", group = \"OTM\") %&gt;%\n            addProviderTiles(\"Stamen.TonerLite\", group = \"Stamen Toner\") %&gt;%\n            addProviderTiles(\"GeoportailFrance.orthos\", group = \"Orthophotos\") %&gt;%\n            addLayersControl(baseGroups = c(\"OSM\", \"OTM\",\n                                                                            \"Stamen Toner\", \"Orthophotos\")) %&gt;%\n            setView(lng = 3, lat = 47, zoom = 5) %&gt;%\n            addPolygons(\n                fillColor = as.formula(paste0(\"~params$pal(\", params$var, \")\")),\n                fillOpacity = 0.7,\n                weight = 1,\n                color = \"black\",\n                opacity = 0.5,\n                highlightOptions = highlightOptions(\n                    weight = 2,\n                    color = \"black\",\n                    opacity = 0.5,\n                    fillOpacity = 1,\n                    bringToFront = TRUE,\n                    sendToBack = TRUE\n                )\n            ) %&gt;%\n            addLegend(\n                position = \"bottomright\",\n                pal = params$pal,\n                values = params$values,\n                opacity = 0.9\n            )\n    })\n\n\n1\n\nIn a reactive expression called poly() we catch the selected aggregation level and decide whether to use the original data_guerry or the aggregated variant data_guerry_region.\n\n2\n\nIn a reactive expression called palette() we catch the selected palette and match it with the available palette names.\n\n3\n\nWe combine all inputs in a reactive expression called params() where we do the remaining data wrangling before the input data goes into leaflet mapping\n\n4\n\nFinally, we do the mapping and replace all previously hard-coded information with our new reactive data. This includes the input dataframe which is now simply params$poly, the fill color which is now a formula that is pasted together from the palette function and the selected variable and finally the palette and values required for the legend.",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#full-code-2",
    "href": "06-mapping.html#full-code-2",
    "title": "Mapping data & advanced visualization",
    "section": "5.3 Full code",
    "text": "5.3 Full code\n\n\nFull code including a reactive Leaflet map\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(fresh)\nlibrary(waiter)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(viridis)\nlibrary(leaflet)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(datawizard)\nlibrary(parameters)\nlibrary(performance)\nlibrary(modelsummary)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\nvariable_desc &lt;- list(\n  Crime_pers = list(\n    title = \"Crime against persons\",\n    desc = as.character(p(tags$b(\"Crime against persons:\"), \"Population per crime against persons\", hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Crime_prop = list(\n    title = \"Crime against property\",\n    desc = as.character(p(tags$b(\"Crime against property:\"), \"Population per crime against property\", hr(), helpText(\"Source: Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Literacy = list(\n    title = \"Literacy\",\n    desc = as.character(p(tags$b(\"Percent Read & Write:\"), \"Percent of military conscripts who can read and write\", hr(), helpText(\"Source: Table A2 in Guerry (1833)\"))),\n    lgd = \"Literacy\",\n    unit = \" %\"\n  ),\n  Donations = list(\n    title = \"Donations to the poor\",\n    desc = as.character(p(tags$b(\"Donations to the poor\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bulletin des lois\"))),\n    lgd = \"Donations\",\n    unit = \"\"\n  ),\n  Infants = list(\n    title = \"Illegitimate births\",\n    desc = as.character(p(tags$b(\"Population per illegitimate birth\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bureau des Longitudes, 1817-1821\"))),\n    lgd = \"Pop. per birth\",\n    unit = \"\"\n  ),\n  Suicides = list(\n    title = \"Suicides\",\n    desc = as.character(p(tags$b(\"Population per suicide\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1827-1830\"))),\n    lgd = \"Pop. per suicide\",\n    unit = \"\"\n  ),\n  Wealth = list(\n    title = \"Tax / capita\",\n    desc = as.character(p(tags$b(\"Per capita tax on personal property:\"), \"A ranked index based on taxes on personal and movable property per inhabitant\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Tax / capita\",\n    unit = \"\"\n  ),\n  Commerce = list(\n    title = \"Commerce & Industry\",\n    desc = as.character(p(tags$b(\"Commerce & Industry:\"), \"Commerce and Industry, measured by the rank of the number of patents / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Patents / capita\",\n    unit = \"\"\n  ),\n  Clergy = list(\n    title = \"Clergy\",\n    desc = as.character(p(tags$b(\"Distribution of clergy:\"), \"Distribution of clergy, measured by the rank of the number of Catholic priests in active service / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Almanach officiel du clergy, 1829\"))),\n    lgd = \"Priests / capita\",\n    unit = \"\"\n  ),\n  Crime_parents = list(\n    title = \"Crime against parents\",\n    desc = as.character(p(tags$b(\"Crime against parents:\"), \"Crimes against parents, measured by the rank of the ratio of crimes against parents to all crimes \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Share of crimes\",\n    unit = \" %\"\n  ),\n  Infanticide = list(\n    title = \"Infanticides\",\n    desc = as.character(p(tags$b(\"Infanticides per capita:\"), \"Ranked ratio of number of infanticides to population \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Infanticides / capita\",\n    unit = \"\"\n  ),\n  Donation_clergy = list(\n    title = \"Donations to the clergy\",\n    desc = as.character(p(tags$b(\"Donations to the clergy:\"), \"Ranked ratios of the number of bequests and donations inter vivios to population \\u2013 Average for the years 1815-1824\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Bull. des lois, ordunn. d’autorisation\"))),\n    lgd = \"Donations / capita\",\n    unit = \"\"\n  ),\n  Lottery = list(\n    title = \"Wager on Royal Lottery\",\n    desc = as.character(p(tags$b(\"Per capita wager on Royal Lottery:\"), \"Ranked ratio of the proceeds bet on the royal lottery to population \\u2013 Average for the years 1822-1826\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte rendu par le ministre des finances\"))),\n    lgd = \"Wager / capita\",\n    unit = \"\"\n  ),\n  Desertion = list(\n    title = \"Military desertion\",\n    desc = as.character(p(tags$b(\"Military desertion:\"), \"Military disertion, ratio of the number of young soldiers accused of desertion to the force of the military contingent, minus the deficit produced by the insufficiency of available billets\\u2013 Average of the years 1825-1827\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte du ministère du guerre, 1829 état V\"))),\n    lgd = \"No. of desertions\",\n    unit = \"\"\n  ),\n  Instruction = list(\n    title = \"Instruction\",\n    desc = as.character(p(tags$b(\"Instruction:\"), \"Ranks recorded from Guerry's map of Instruction. Note: this is inversely related to literacy (as defined here)\")),\n    lgd = \"Instruction\",\n    unit = \"\"\n  ),\n  Prostitutes = list(\n    title = \"Prostitutes\",\n    desc = as.character(p(tags$b(\"Prostitutes in Paris:\"), \"Number of prostitutes registered in Paris from 1816 to 1834, classified by the department of their birth\", hr(), helpText(\"Source: Parent-Duchatelet (1836), De la prostitution en Paris\"))),\n    lgd = \"No. of prostitutes\",\n    unit = \"\"\n  ),\n  Distance = list(\n    title = \"Distance to paris\",\n    desc = as.character(p(tags$b(\"Distance to Paris (km):\"), \"Distance of each department centroid to the centroid of the Seine (Paris)\", hr(), helpText(\"Source: Calculated from department centroids\"))),\n    lgd = \"Distance\",\n    unit = \" km\"\n  ),\n  Area = list(\n    title = \"Area\",\n    desc = as.character(p(tags$b(\"Area (1000 km\\u00b2)\"), hr(), helpText(\"Source: Angeville (1836)\"))),\n    lgd = \"Area\",\n    unit = \" km\\u00b2\"\n  ),\n  Pop1831 = list(\n    title = \"Population\",\n    desc = as.character(p(tags$b(\"Population in 1831, in 1000s\"), hr(), helpText(\"Source: Taken from Angeville (1836), Essai sur la Statistique de la Population français\"))),\n    lgd = \"Population (in 1000s)\",\n    unit = \"\"\n  )\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prep data (Tab: Map data) ----\ndata_guerry_region &lt;- data_guerry %&gt;%\n  group_by(Region) %&gt;%\n  summarise(across(\n    .cols = all_of(names(variable_names)),\n    function(x) {\n      if (cur_column() %in% c(\"Area\", \"Pop1831\")) {\n        sum(x)\n      } else {\n        mean(x)\n      }\n    }\n  ))\n\n## Prepare palettes ----\n## Used for mapping\npals &lt;- list(\n  Sequential = RColorBrewer::brewer.pal.info %&gt;%\n    filter(category %in% \"seq\") %&gt;%\n    row.names(),\n  Viridis = c(\"Magma\", \"Inferno\", \"Plasma\", \"Viridis\",\n              \"Cividis\", \"Rocket\", \"Mako\", \"Turbo\")\n)\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      menuItem(tabName = \"tab_map\", text = \"Map data\", icon = icon(\"map\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      ),\n      ### 3.3.3 Tab: Model data ----\n      tabItem(\n        tabName = \"tab_model\",\n        fluidRow(\n          column(\n            width = 6,\n            #### Inputs(s) ----\n            box(\n              width = 12,\n              title = \"Select variables\",\n              status = \"primary\",\n              shinyWidgets::pickerInput(\n                \"model_x\",\n                label = \"Select a dependent variable\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(liveSearch = TRUE),\n                selected = \"Literacy\"\n              ),\n              shinyWidgets::pickerInput(\n                \"model_y\",\n                label = \"Select independent variables\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(\n                  actionsBox = TRUE,\n                  liveSearch = TRUE,\n                  selectedTextFormat = \"count\",\n                  countSelectedText = \"{0} variables selected\",\n                  noneSelectedText = \"No variables selected\"\n                ),\n                multiple = TRUE,\n                selected = \"Commerce\"\n              ),\n              shinyWidgets::prettyCheckbox(\n                \"model_std\",\n                label = \"Standardize variables?\",\n                value = TRUE,\n                status = \"primary\",\n                shape = \"curve\"\n              ),\n              hr(),\n              actionButton(\n                \"refresh\",\n                label = \"Apply changes\",\n                icon = icon(\"refresh\"),\n                flat = TRUE\n              )\n            ),\n            #### Outputs(s) ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model analysis\",\n              side = \"right\",\n              width = 12,\n              ##### Tabpanel: Coefficient plot ----\n              tabPanel(\n                title = \"Plot: Coefficients\",\n                plotly::plotlyOutput(\"coefficientplot\")\n              ),\n              ##### Tabpanel: Scatterplot ----\n              tabPanel(\n                title = \"Plot: Scatterplot\",\n                plotly::plotlyOutput(\"scatterplot\")\n              ),\n              ##### Tabpanel: Table: Regression ----\n              tabPanel(\n                title = \"Table: Model\",\n                htmlOutput(\"tableregression\")\n              )\n            )\n          ),\n          column(\n            width = 6,\n            ##### Box: Pair diagramm ----\n            box(\n              width = 12,\n              title = \"Pair diagram\",\n              status = \"primary\",\n              plotly::plotlyOutput(\"pairplot\")\n            ),\n            ##### TabBox: Model diagnostics ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model diagnostics\",\n              width = 12,\n              side = \"right\",\n              tabPanel(\n                title = \"Normality\",\n                plotly::plotlyOutput(\"normality\")\n              ),\n              tabPanel(\n                title = \"Outliers\",\n                plotly::plotlyOutput(\"outliers\")\n              ),\n              tabPanel(\n                title = \"Heteroskedasticity\",\n                plotly::plotlyOutput(\"heteroskedasticity\")\n              )\n            )\n          )\n        )\n      ),\n      ### 3.3.4 Tab: Map data ----\n      tabItem(\n        tabName = \"tab_map\", # must correspond to related menuItem name\n        fluidRow(\n          column(\n            #### Inputs(s) ----\n            width = 4, # must be between 1 and 12\n            box(\n              title = \"Data selection\",\n              status = \"primary\",\n              width = 12,\n              selectInput(\n                \"tab_map_select\",\n                label = \"Select a variable\",\n                choices = setNames(names(variable_names), variable_names)\n              )\n            ),\n            box(\n              title = \"Map configuration\",\n              status = \"primary\",\n              width = 12,\n              radioButtons(\n                \"tab_map_aggr\",\n                label = \"Aggregation level\",\n                choices = c(\"Departments\", \"Regions\"),\n                selected = \"Departments\"\n              ),\n              selectInput(\n                \"tab_map_pal\",\n                label = \"Color palette\",\n                choices = pals,\n                selected = \"Reds\"\n              ) # end input\n            ) # end box\n          ), # end column\n          column(\n            #### Output(s) ----\n            width = 8,\n            box(\n              id = \"tab_map_box\",\n              status = \"primary\",\n              headerBorder = FALSE,\n              collapsible = FALSE,\n              width = 12,\n              leaflet::leafletOutput(\"tab_map_map\", height = \"800px\", width = \"100%\")\n            ) # end box\n          ) # end column\n        ) # end fluidRow\n      ) # end tabItem\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n  ### Define & estimate model ----\n  mparams &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(data_guerry)[c(x, y)]\n    dt_labels &lt;- sf::st_drop_geometry(data_guerry)[c(\"Department\", \"Region\")]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    form &lt;- as.formula(paste(x, \"~\", paste(y, collapse = \" + \")))\n    mod &lt;- lm(form, data = dt)\n    \n    list(\n      x = x,\n      y = y,\n      data = dt,\n      data_labels = dt_labels,\n      model = mod\n    )\n  }) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n  \n  ### Pair diagram ----\n  output$pairplot &lt;- plotly::renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    p &lt;- GGally::ggpairs(\n      params$data,\n      axisLabels = \"none\",\n      lower = list(\n        continuous = function(data, mapping, ...) {\n          ggplot(data, mapping) +\n            suppressWarnings(geom_point(\n              aes(text = paste0(\n                \"Department: \", \n                dt_labels[[\"Department\"]],\n                \"&lt;br&gt;Region: \", \n                dt_labels[[\"Region\"]])),\n              color = \"black\"\n            ))\n        }\n      )\n    )\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Coefficientplot ----\n  output$coefficientplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    x &lt;- params$x\n    y &lt;- params$y\n    \n    \n    p &lt;- plot(parameters::model_parameters(params$model))\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Scatterplot ----\n  output$scatterplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    x &lt;- params$x \n    y &lt;- params$y\n    \n    \n    if (length(y) == 1) {\n      p &lt;- ggplot(params$data, \n                  aes(x = .data[[params$x]], \n                      y = .data[[params$y]])) +\n        geom_point(aes(text = paste0(\"Department: \", \n                                     dt_labels[[\"Department\"]],\n                                     \"&lt;br&gt;Region: \", \n                                     dt_labels[[\"Region\"]])),\n                   color = \"black\") +\n        geom_smooth() + \n        geom_smooth(method='lm') +\n        theme_light()\n    } else {\n      p &lt;- ggplot() +\n        theme_void() +\n        annotate(\"text\", \n                 label = \"Cannot create scatterplot.\\nMore than two variables selected.\", \n                 x = 0, y = 0, \n                 size = 5, \n                 colour = \"red\",\n                 hjust = 0.5,\n                 vjust = 0.5) +\n        xlab(NULL)\n      \n    }\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Table: Regression ----\n  output$tableregression &lt;- renderUI({\n    params &lt;- mparams()\n    HTML(modelsummary(\n      dvnames(list(params$model)),\n      gof_omit = \"AIC|BIC|Log|Adj|RMSE\"\n    ))\n  })\n  \n  ### Plot: Normality residuals ----\n  output$normality &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_normality(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Outliers ----\n  output$outliers &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_outliers(params$model), show_labels = FALSE)\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$x &lt;- \"Leverage\"\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Heteroskedasticity ----\n  output$heteroskedasticity &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_heteroskedasticity(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$y &lt;- \"Sqrt. |Std. residuals|\" # ggplotly doesn't support expressions\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  \n  ## 4.3 Map data ----\n  # Select polygon based on aggregation level\n  poly &lt;- reactive({\n    if (identical(input$tab_map_aggr, \"Regions\")) {\n      data_guerry_region\n    } else {\n      data_guerry\n    }\n  })\n  \n  # Select palette based on input\n  palette &lt;- reactive({\n    pal &lt;- input$tab_map_pal\n    if (pal %in% pals$Viridis) {\n      pal &lt;- viridis::viridis_pal(option = tolower(pal))(5)\n    }\n    pal\n  }) %&gt;%\n    bindEvent(input$tab_map_pal)\n  \n  # Compile parameters for leaflet rendering\n  params &lt;- reactive({\n    poly &lt;- st_transform(poly(), 4326)\n    pal &lt;- palette()\n    var &lt;- input$tab_map_select\n    \n    values &lt;- as.formula(paste0(\"~\", var))\n    pal &lt;- colorNumeric(palette = pal, domain = NULL)\n\n    list(\n      poly = poly,\n      var = var,\n      pal = pal,\n      values = values\n    )\n  })\n  \n  # Render leaflet for the first time\n  output$tab_map_map &lt;- leaflet::renderLeaflet({\n    params &lt;- params()\n    leaflet(data = params$poly) %&gt;%\n      addProviderTiles(\"OpenStreetMap.France\", group = \"OSM\") %&gt;%\n      addProviderTiles(\"OpenTopoMap\", group = \"OTM\") %&gt;%\n      addProviderTiles(\"Stamen.TonerLite\", group = \"Stamen Toner\") %&gt;%\n      addProviderTiles(\"GeoportailFrance.orthos\", group = \"Orthophotos\") %&gt;%\n      addLayersControl(baseGroups = c(\"OSM\", \"OTM\",\n                                      \"Stamen Toner\", \"Orthophotos\")) %&gt;%\n      setView(lng = 3, lat = 47, zoom = 5) %&gt;%\n      addPolygons(\n        fillColor = as.formula(paste0(\"~params$pal(\", params$var, \")\")),\n        fillOpacity = 0.7,\n        weight = 1,\n        color = \"black\",\n        opacity = 0.5,\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"black\",\n          opacity = 0.5,\n          fillOpacity = 1,\n          bringToFront = TRUE,\n          sendToBack = TRUE\n        )\n      ) %&gt;%\n      addLegend(\n        position = \"bottomright\",\n        pal = params$pal,\n        values = params$values,\n        opacity = 0.9\n      )\n  })\n}\n\nshinyApp(ui, server)",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#exercises-2",
    "href": "06-mapping.html#exercises-2",
    "title": "Mapping data & advanced visualization",
    "section": "5.4 Exercises",
    "text": "5.4 Exercises\n\n\n\n\n\n\nExercise 1\n\n\n\nAdd a slider to the map configuration box that changes the opacity of the mapped polygons.\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nYou can create a slider input using shiny::sliderInput()\nRemember the workflow that we used before to implement new UI inputs:\n\nCreate a UI widget and assign an input ID\nUse the input ID to access selected values on the server side\nUse the input value in R computations on the server side, e.g. as arguments for function calls\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nOn the UI side, we add a sliderInput(). The slider input has the id tab_map_slider and the label “Opacity”. It is restricted to values between 0 and 1 to correspond to the allowed opacity values.\n\nfluidRow(\n  column(\n    #### Inputs(s) ----\n    width = 4, # must be between 1 and 12\n    box(\n      title = \"Data selection\",\n      status = \"primary\",\n      width = 12,\n      selectInput(\n        \"tab_map_select\",\n        label = \"Select a variable\",\n        choices = setNames(names(variable_names), variable_names)\n      )\n    ),\n    box(\n      title = \"Map configuration\",\n      status = \"primary\",\n      width = 12,\n      radioButtons(\n        \"tab_map_aggr\",\n        label = \"Aggregation level\",\n        choices = c(\"Departments\", \"Regions\"),\n        selected = \"Departments\"\n      ),\n      selectInput(\n        \"tab_map_pal\",\n        label = \"Color palette\",\n        choices = pals,\n        selected = \"Reds\"\n      ),\n1      sliderInput(\n        \"tab_map_slider\",\n        label = \"Opacity\",\n        min = 0,\n        max = 1,\n        value = 0.7,\n        step = 0.05\n      )\n    ) # end box\n  ), # end column\n  column(\n    #### Output(s) ----\n    width = 8,\n    box(\n      id = \"tab_map_box\",\n      status = \"primary\",\n      headerBorder = FALSE,\n      collapsible = FALSE,\n      width = 12,\n      leaflet::leafletOutput(\"tab_map_map\", height = \"800px\", width = \"100%\")\n    ) # end box\n  ) # end column\n) # end fluidRow\n\n\n1\n\nNew slider input!\n\n\n\n\nOn the server side, we then simply add the new input as an argument value for fillOpacity in addPolygons().\n\nleaflet(data = params$poly) %&gt;%\n  addProviderTiles(\"OpenStreetMap.France\", group = \"OSM\") %&gt;%\n  addProviderTiles(\"OpenTopoMap\", group = \"OTM\") %&gt;%\n  addProviderTiles(\"Stamen.TonerLite\", group = \"Stamen Toner\") %&gt;%\n  addProviderTiles(\"GeoportailFrance.orthos\", group = \"Orthophotos\") %&gt;%\n  addLayersControl(baseGroups = c(\"OSM\", \"OTM\",\n                                  \"Stamen Toner\", \"Orthophotos\")) %&gt;%\n  setView(lng = 3, lat = 47, zoom = 5) %&gt;%\n  addPolygons(\n    fillColor = as.formula(paste0(\"~params$pal(\", params$var, \")\")),\n1    fillOpacity = input$tab_map_slider,\n    weight = 1,\n    color = \"black\",\n    opacity = 0.5,\n    highlightOptions = highlightOptions(\n      weight = 2,\n      color = \"black\",\n      opacity = 0.5,\n      fillOpacity = 1,\n      bringToFront = TRUE,\n      sendToBack = TRUE\n    )\n  ) %&gt;%\n  addLegend(\n    position = \"bottomright\",\n    pal = params$pal,\n    values = params$values,\n    opacity = 0.9\n  )\n\n\n1\n\nThe new input is used as an argument to specify the fill opacity!",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#prepare-context-info",
    "href": "06-mapping.html#prepare-context-info",
    "title": "Mapping data & advanced visualization",
    "section": "6.1 Prepare context info",
    "text": "6.1 Prepare context info\n\nAs with many things, it’s useful to prepare data before we use it\nInstead of relying on large switch() expressions, we create a list before running the server\nThe list contains information on title, description, legend and unit\nEach list element can be accessed using the variable name so we can access them reactively\n\n\n\n\n\n\n\nTip\n\n\n\nFor such large data objects, it can be a good idea to place them outside the main code file to increase readability.\n\n\n\n\nCreate a list with context information\nlist(\n  Crime_pers = list(\n    title = \"Crime against persons\",\n    desc = as.character(p(tags$b(\"Crime against persons:\"), \"Population per crime against persons\", hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Crime_prop = list(\n    title = \"Crime against property\",\n    desc = as.character(p(tags$b(\"Crime against property:\"), \"Population per crime against property\", hr(), helpText(\"Source: Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Literacy = list(\n    title = \"Literacy\",\n    desc = as.character(p(tags$b(\"Percent Read & Write:\"), \"Percent of military conscripts who can read and write\", hr(), helpText(\"Source: Table A2 in Guerry (1833)\"))),\n    lgd = \"Literacy\",\n    unit = \" %\"\n  ),\n  Donations = list(\n    title = \"Donations to the poor\",\n    desc = as.character(p(tags$b(\"Donations to the poor\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bulletin des lois\"))),\n    lgd = \"Donations\",\n    unit = \"\"\n  ),\n  Infants = list(\n    title = \"Illegitimate births\",\n    desc = as.character(p(tags$b(\"Population per illegitimate birth\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bureau des Longitudes, 1817-1821\"))),\n    lgd = \"Pop. per birth\",\n    unit = \"\"\n  ),\n  Suicides = list(\n    title = \"Suicides\",\n    desc = as.character(p(tags$b(\"Population per suicide\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1827-1830\"))),\n    lgd = \"Pop. per suicide\",\n    unit = \"\"\n  ),\n  Wealth = list(\n    title = \"Tax / capita\",\n    desc = as.character(p(tags$b(\"Per capita tax on personal property:\"), \"A ranked index based on taxes on personal and movable property per inhabitant\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Tax / capita\",\n    unit = \"\"\n  ),\n  Commerce = list(\n    title = \"Commerce & Industry\",\n    desc = as.character(p(tags$b(\"Commerce & Industry:\"), \"Commerce and Industry, measured by the rank of the number of patents / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Patents / capita\",\n    unit = \"\"\n  ),\n  Clergy = list(\n    title = \"Clergy\",\n    desc = as.character(p(tags$b(\"Distribution of clergy:\"), \"Distribution of clergy, measured by the rank of the number of Catholic priests in active service / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Almanach officiel du clergy, 1829\"))),\n    lgd = \"Priests / capita\",\n    unit = \"\"\n  ),\n  Crime_parents = list(\n    title = \"Crime against parents\",\n    desc = as.character(p(tags$b(\"Crime against parents:\"), \"Crimes against parents, measured by the rank of the ratio of crimes against parents to all crimes \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Share of crimes\",\n    unit = \" %\"\n  ),\n  Infanticide = list(\n    title = \"Infanticides\",\n    desc = as.character(p(tags$b(\"Infanticides per capita:\"), \"Ranked ratio of number of infanticides to population \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Infanticides / capita\",\n    unit = \"\"\n  ),\n  Donation_clergy = list(\n    title = \"Donations to the clergy\",\n    desc = as.character(p(tags$b(\"Donations to the clergy:\"), \"Ranked ratios of the number of bequests and donations inter vivios to population \\u2013 Average for the years 1815-1824\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Bull. des lois, ordunn. d’autorisation\"))),\n    lgd = \"Donations / capita\",\n    unit = \"\"\n  ),\n  Lottery = list(\n    title = \"Wager on Royal Lottery\",\n    desc = as.character(p(tags$b(\"Per capita wager on Royal Lottery:\"), \"Ranked ratio of the proceeds bet on the royal lottery to population \\u2013 Average for the years 1822-1826\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte rendu par le ministre des finances\"))),\n    lgd = \"Wager / capita\",\n    unit = \"\"\n  ),\n  Desertion = list(\n    title = \"Military desertion\",\n    desc = as.character(p(tags$b(\"Military desertion:\"), \"Military disertion, ratio of the number of young soldiers accused of desertion to the force of the military contingent, minus the deficit produced by the insufficiency of available billets\\u2013 Average of the years 1825-1827\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte du ministère du guerre, 1829 état V\"))),\n    lgd = \"No. of desertions\",\n    unit = \"\"\n  ),\n  Insturction = list(\n    title = \"Instruction\",\n    desc = as.character(p(tags$b(\"Instruction:\"), \"Ranks recorded from Guerry's map of Instruction. Note: this is inversely related to literacy (as defined here)\")),\n    lgd = \"Instruction\",\n    unit = \"\"\n  ),\n  Prostitutes = list(\n    title = \"Prostitutes\",\n    desc = as.character(p(tags$b(\"Prostitutes in Paris:\"), \"Number of prostitutes registered in Paris from 1816 to 1834, classified by the department of their birth\", hr(), helpText(\"Source: Parent-Duchatelet (1836),De la prostitution en Paris\"))),\n    lgd = \"No. of prostitutes\",\n    unit = \"\"\n  ),\n  Distance = list(\n    title = \"Distance to paris\",\n    desc = as.character(p(tags$b(\"Distance to Paris (km):\"), \"Distance of each department centroid to the centroid of the Seine (Paris)\", hr(), helpText(\"Source: Calculated from department centroids\"))),\n    lgd = \"Distance\",\n    unit = \" km\"\n  ),\n  Area = list(\n    title = \"Area\",\n    desc = as.character(p(tags$b(\"Area (1000 km^2)\"), hr(), helpText(\"Source: Angeville (1836)\"))),\n    lgd = \"Area\",\n    unit = \" km\\u00b2\"\n  ),\n  Pop1831 = list(\n    title = \"Population\",\n    desc = as.character(p(tags$b(\"Population in 1831, in 1000s\"), hr(), helpText(\"Source: Taken from Angeville (1836), Essai sur la Statistique de la Population français\"))),\n    lgd = \"Population (in 1000s)\",\n    unit = \"\"\n  )\n)",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#add-variable-descriptions",
    "href": "06-mapping.html#add-variable-descriptions",
    "title": "Mapping data & advanced visualization",
    "section": "6.2 Add variable descriptions",
    "text": "6.2 Add variable descriptions\n\nTo give a short description of the selected variable and their source, we add a new UI output\nThe UI output is called tab_map_desc and can hold formatted HTML output\n\n\ntabItem(\n    tabName = \"tab_map\",\n    fluidRow(\n        column(                                     \n            width = 4,                                \n            box(                                      \n                title = \"Data selection\",               \n                status = \"primary\",                     \n                width = 12,                             \n                selectInput(                            \n                    \"tab_map_select\",                         \n                    label = \"Select a variable\",          \n                    choices = setNames(variable_names, names(variable_names))\n                ),                                      \n1                uiOutput(\"tab_map_desc\")\n            ),\n            box(                                      \n                title = \"Map configuration\",            \n                status = \"primary\",                     \n                width = 12,                             \n                radioButtons(                           \n                    \"tab_map_aggr\",                           \n                    label = \"Aggregation level\",          \n                    choices = c(\"Departments\", \"Regions\"),\n                    selected = \"Departments\"              \n                ),                                      \n                selectInput(                            \n                    \"tab_map_pal\",                            \n                    label = \"Color palette\",              \n                    choices = pals,                       \n                    selected = \"Reds\"                     \n                ) # end input\n            ) # end box\n        ), # end column\n        column(\n            width = 8,\n            box(\n                id = \"tab_map_box\",\n                status = \"primary\",\n                headerBorder = FALSE,\n                collapsible = FALSE,\n                width = 12,\n                leaflet::leafletOutput(\"tab_map_map\", height = \"800px\", width = \"100%\")\n            ) # end box\n        ) # end column\n    ) # end fluidRow\n) # end tabItem\n\n\n1\n\nAdd a UI output with the id tab_map_desc. This is where the variable description will go!",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#render-context",
    "href": "06-mapping.html#render-context",
    "title": "Mapping data & advanced visualization",
    "section": "6.3 Render context",
    "text": "6.3 Render context\n\n  # Add a variable description\n1  output$tab_map_desc &lt;- renderUI({\n    HTML(txts[[input$tab_map_select]]$desc)\n  })\n\n    # Select polygon based on aggregation level (B)\n    poly &lt;- reactive({\n        if (identical(input$tab_map_aggr, \"Regions\")) {\n            data_guerry_region\n        } else {\n            data_guerry\n        }\n    })\n    \n    # Select palette based on input (C)\n    palette &lt;- reactive({\n        pal &lt;- input$tab_map_pal\n        if (pal %in% pals$Viridis) {\n            pal &lt;- viridis::viridis_pal(option = tolower(pal))(5)\n        }\n        pal\n    })\n    \n    # Compile parameters for leaflet rendering (D)\n    params &lt;- reactive({\n        poly &lt;- st_transform(poly(), 4326)\n        pal &lt;- palette()\n        var &lt;- input$tab_map_select\n        \n        values &lt;- as.formula(paste0(\"~\", var))\n        pal &lt;- colorNumeric(palette = pal, domain = NULL)\n        \n        list(\n            poly = poly,\n            var = var,\n            pal = pal,\n            values = values,\n            labels = labels\n        )\n    })\n    \n    # Render leaflet for the first time\n    output$tab_map_map &lt;- leaflet::renderLeaflet({\n        # Isolate call to params() to prevent render function to be executed\n        # every time params() is invalidated. No dependency is made.\n        params &lt;- params()\n        leaflet(data = params$poly) %&gt;%\n            addProviderTiles(\"OpenStreetMap.France\", group = \"OSM\") %&gt;%\n            addProviderTiles(\"OpenTopoMap\", group = \"OTM\") %&gt;%\n            addProviderTiles(\"Stamen.TonerLite\", group = \"Stamen Toner\") %&gt;%\n            addProviderTiles(\"GeoportailFrance.orthos\", group = \"Orthophotos\") %&gt;%\n            addLayersControl(baseGroups = c(\"OSM\", \"OTM\",\n                                                                            \"Stamen Toner\", \"Orthophotos\")) %&gt;%\n            setView(lng = 3, lat = 47, zoom = 5) %&gt;%\n            addPolygons(\n                fillColor = as.formula(paste0(\"~params$pal(\", params$var, \")\")),\n                fillOpacity = 0.7,\n                weight = 1,\n                color = \"black\",\n                opacity = 0.5,\n                highlightOptions = highlightOptions(\n                    weight = 2,\n                    color = \"black\",\n                    opacity = 0.5,\n                    fillOpacity = 1,\n                    bringToFront = TRUE,\n                    sendToBack = TRUE\n                )\n            ) %&gt;%\n            addLegend(\n                position = \"bottomright\",\n                pal = params$pal,\n                values = params$values,\n                opacity = 0.9,\n2                title = txts[[params$var]]$lgd,\n                labFormat = labelFormat(suffix = txts[[params$var]]$unit)\n            )\n    })\n\n\n1\n\nTo render the UI, we call the renderUI() function. Here, we can just access the list we created before to access the description based on the selected variable.\n\n2\n\nIn the same way, we can add a title and a unit to the legend using the title and labFormat arguments in addLegend()\n\n\n\n\n\nThe result is arguably nicer to look at, but certainly provides more information to understand the map we created",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#full-code-3",
    "href": "06-mapping.html#full-code-3",
    "title": "Mapping data & advanced visualization",
    "section": "6.4 Full code",
    "text": "6.4 Full code\n\n\nFull code including a reactive Leaflet map with context descriptions\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(fresh)\nlibrary(waiter)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(viridis)\nlibrary(leaflet)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(datawizard)\nlibrary(parameters)\nlibrary(performance)\nlibrary(modelsummary)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\nvariable_desc &lt;- list(\n  Crime_pers = list(\n    title = \"Crime against persons\",\n    desc = as.character(p(tags$b(\"Crime against persons:\"), \"Population per crime against persons\", hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Crime_prop = list(\n    title = \"Crime against property\",\n    desc = as.character(p(tags$b(\"Crime against property:\"), \"Population per crime against property\", hr(), helpText(\"Source: Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Literacy = list(\n    title = \"Literacy\",\n    desc = as.character(p(tags$b(\"Percent Read & Write:\"), \"Percent of military conscripts who can read and write\", hr(), helpText(\"Source: Table A2 in Guerry (1833)\"))),\n    lgd = \"Literacy\",\n    unit = \" %\"\n  ),\n  Donations = list(\n    title = \"Donations to the poor\",\n    desc = as.character(p(tags$b(\"Donations to the poor\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bulletin des lois\"))),\n    lgd = \"Donations\",\n    unit = \"\"\n  ),\n  Infants = list(\n    title = \"Illegitimate births\",\n    desc = as.character(p(tags$b(\"Population per illegitimate birth\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bureau des Longitudes, 1817-1821\"))),\n    lgd = \"Pop. per birth\",\n    unit = \"\"\n  ),\n  Suicides = list(\n    title = \"Suicides\",\n    desc = as.character(p(tags$b(\"Population per suicide\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1827-1830\"))),\n    lgd = \"Pop. per suicide\",\n    unit = \"\"\n  ),\n  Wealth = list(\n    title = \"Tax / capita\",\n    desc = as.character(p(tags$b(\"Per capita tax on personal property:\"), \"A ranked index based on taxes on personal and movable property per inhabitant\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Tax / capita\",\n    unit = \"\"\n  ),\n  Commerce = list(\n    title = \"Commerce & Industry\",\n    desc = as.character(p(tags$b(\"Commerce & Industry:\"), \"Commerce and Industry, measured by the rank of the number of patents / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Patents / capita\",\n    unit = \"\"\n  ),\n  Clergy = list(\n    title = \"Clergy\",\n    desc = as.character(p(tags$b(\"Distribution of clergy:\"), \"Distribution of clergy, measured by the rank of the number of Catholic priests in active service / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Almanach officiel du clergy, 1829\"))),\n    lgd = \"Priests / capita\",\n    unit = \"\"\n  ),\n  Crime_parents = list(\n    title = \"Crime against parents\",\n    desc = as.character(p(tags$b(\"Crime against parents:\"), \"Crimes against parents, measured by the rank of the ratio of crimes against parents to all crimes \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Share of crimes\",\n    unit = \" %\"\n  ),\n  Infanticide = list(\n    title = \"Infanticides\",\n    desc = as.character(p(tags$b(\"Infanticides per capita:\"), \"Ranked ratio of number of infanticides to population \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Infanticides / capita\",\n    unit = \"\"\n  ),\n  Donation_clergy = list(\n    title = \"Donations to the clergy\",\n    desc = as.character(p(tags$b(\"Donations to the clergy:\"), \"Ranked ratios of the number of bequests and donations inter vivios to population \\u2013 Average for the years 1815-1824\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Bull. des lois, ordunn. d’autorisation\"))),\n    lgd = \"Donations / capita\",\n    unit = \"\"\n  ),\n  Lottery = list(\n    title = \"Wager on Royal Lottery\",\n    desc = as.character(p(tags$b(\"Per capita wager on Royal Lottery:\"), \"Ranked ratio of the proceeds bet on the royal lottery to population \\u2013 Average for the years 1822-1826\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte rendu par le ministre des finances\"))),\n    lgd = \"Wager / capita\",\n    unit = \"\"\n  ),\n  Desertion = list(\n    title = \"Military desertion\",\n    desc = as.character(p(tags$b(\"Military desertion:\"), \"Military disertion, ratio of the number of young soldiers accused of desertion to the force of the military contingent, minus the deficit produced by the insufficiency of available billets\\u2013 Average of the years 1825-1827\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte du ministère du guerre, 1829 état V\"))),\n    lgd = \"No. of desertions\",\n    unit = \"\"\n  ),\n  Instruction = list(\n    title = \"Instruction\",\n    desc = as.character(p(tags$b(\"Instruction:\"), \"Ranks recorded from Guerry's map of Instruction. Note: this is inversely related to literacy (as defined here)\")),\n    lgd = \"Instruction\",\n    unit = \"\"\n  ),\n  Prostitutes = list(\n    title = \"Prostitutes\",\n    desc = as.character(p(tags$b(\"Prostitutes in Paris:\"), \"Number of prostitutes registered in Paris from 1816 to 1834, classified by the department of their birth\", hr(), helpText(\"Source: Parent-Duchatelet (1836), De la prostitution en Paris\"))),\n    lgd = \"No. of prostitutes\",\n    unit = \"\"\n  ),\n  Distance = list(\n    title = \"Distance to paris\",\n    desc = as.character(p(tags$b(\"Distance to Paris (km):\"), \"Distance of each department centroid to the centroid of the Seine (Paris)\", hr(), helpText(\"Source: Calculated from department centroids\"))),\n    lgd = \"Distance\",\n    unit = \" km\"\n  ),\n  Area = list(\n    title = \"Area\",\n    desc = as.character(p(tags$b(\"Area (1000 km\\u00b2)\"), hr(), helpText(\"Source: Angeville (1836)\"))),\n    lgd = \"Area\",\n    unit = \" km\\u00b2\"\n  ),\n  Pop1831 = list(\n    title = \"Population\",\n    desc = as.character(p(tags$b(\"Population in 1831, in 1000s\"), hr(), helpText(\"Source: Taken from Angeville (1836), Essai sur la Statistique de la Population français\"))),\n    lgd = \"Population (in 1000s)\",\n    unit = \"\"\n  )\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prep data (Tab: Map data) ----\ndata_guerry_region &lt;- data_guerry %&gt;%\n  group_by(Region) %&gt;%\n  summarise(across(\n    .cols = all_of(names(variable_names)),\n    function(x) {\n      if (cur_column() %in% c(\"Area\", \"Pop1831\")) {\n        sum(x)\n      } else {\n        mean(x)\n      }\n    }\n  ))\n\n## Prepare palettes ----\n## Used for mapping\npals &lt;- list(\n  Sequential = RColorBrewer::brewer.pal.info %&gt;%\n    filter(category %in% \"seq\") %&gt;%\n    row.names(),\n  Viridis = c(\"Magma\", \"Inferno\", \"Plasma\", \"Viridis\",\n              \"Cividis\", \"Rocket\", \"Mako\", \"Turbo\")\n)\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      menuItem(tabName = \"tab_map\", text = \"Map data\", icon = icon(\"map\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      ),\n      ### 3.3.3 Tab: Model data ----\n      tabItem(\n        tabName = \"tab_model\",\n        fluidRow(\n          column(\n            width = 6,\n            #### Inputs(s) ----\n            box(\n              width = 12,\n              title = \"Select variables\",\n              status = \"primary\",\n              shinyWidgets::pickerInput(\n                \"model_x\",\n                label = \"Select a dependent variable\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(liveSearch = TRUE),\n                selected = \"Literacy\"\n              ),\n              shinyWidgets::pickerInput(\n                \"model_y\",\n                label = \"Select independent variables\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(\n                  actionsBox = TRUE,\n                  liveSearch = TRUE,\n                  selectedTextFormat = \"count\",\n                  countSelectedText = \"{0} variables selected\",\n                  noneSelectedText = \"No variables selected\"\n                ),\n                multiple = TRUE,\n                selected = \"Commerce\"\n              ),\n              shinyWidgets::prettyCheckbox(\n                \"model_std\",\n                label = \"Standardize variables?\",\n                value = TRUE,\n                status = \"primary\",\n                shape = \"curve\"\n              ),\n              hr(),\n              actionButton(\n                \"refresh\",\n                label = \"Apply changes\",\n                icon = icon(\"refresh\"),\n                flat = TRUE\n              )\n            ),\n            #### Outputs(s) ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model analysis\",\n              side = \"right\",\n              width = 12,\n              ##### Tabpanel: Coefficient plot ----\n              tabPanel(\n                title = \"Plot: Coefficients\",\n                plotly::plotlyOutput(\"coefficientplot\")\n              ),\n              ##### Tabpanel: Scatterplot ----\n              tabPanel(\n                title = \"Plot: Scatterplot\",\n                plotly::plotlyOutput(\"scatterplot\")\n              ),\n              ##### Tabpanel: Table: Regression ----\n              tabPanel(\n                title = \"Table: Model\",\n                htmlOutput(\"tableregression\")\n              )\n            )\n          ),\n          column(\n            width = 6,\n            ##### Box: Pair diagramm ----\n            box(\n              width = 12,\n              title = \"Pair diagram\",\n              status = \"primary\",\n              plotly::plotlyOutput(\"pairplot\")\n            ),\n            ##### TabBox: Model diagnostics ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model diagnostics\",\n              width = 12,\n              side = \"right\",\n              tabPanel(\n                title = \"Normality\",\n                plotly::plotlyOutput(\"normality\")\n              ),\n              tabPanel(\n                title = \"Outliers\",\n                plotly::plotlyOutput(\"outliers\")\n              ),\n              tabPanel(\n                title = \"Heteroskedasticity\",\n                plotly::plotlyOutput(\"heteroskedasticity\")\n              )\n            )\n          )\n        )\n      ),\n      ### 3.3.4 Tab: Map data ----\n      tabItem(\n        tabName = \"tab_map\", # must correspond to related menuItem name\n        fluidRow(\n          column(\n            #### Inputs(s) ----\n            width = 4, # must be between 1 and 12\n            box(\n              title = \"Data selection\",\n              status = \"primary\",\n              width = 12,\n              selectInput(\n                \"tab_map_select\",\n                label = \"Select a variable\",\n                choices = setNames(names(variable_names), variable_names)\n              ),\n              uiOutput(\"tab_map_desc\")\n            ),\n            box(\n              title = \"Map configuration\",\n              status = \"primary\",\n              width = 12,\n              radioButtons(\n                \"tab_map_aggr\",\n                label = \"Aggregation level\",\n                choices = c(\"Departments\", \"Regions\"),\n                selected = \"Departments\"\n              ),\n              selectInput(\n                \"tab_map_pal\",\n                label = \"Color palette\",\n                choices = pals,\n                selected = \"Reds\"\n              ) # end input\n            ) # end box\n          ), # end column\n          column(\n            #### Output(s) ----\n            width = 8,\n            box(\n              id = \"tab_map_box\",\n              status = \"primary\",\n              headerBorder = FALSE,\n              collapsible = FALSE,\n              width = 12,\n              leaflet::leafletOutput(\"tab_map_map\", height = \"800px\", width = \"100%\")\n            ) # end box\n          ) # end column\n        ) # end fluidRow\n      ) # end tabItem\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n  ### Define & estimate model ----\n  mparams &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(data_guerry)[c(x, y)]\n    dt_labels &lt;- sf::st_drop_geometry(data_guerry)[c(\"Department\", \"Region\")]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    form &lt;- as.formula(paste(x, \"~\", paste(y, collapse = \" + \")))\n    mod &lt;- lm(form, data = dt)\n    \n    list(\n      x = x,\n      y = y,\n      data = dt,\n      data_labels = dt_labels,\n      model = mod\n    )\n  }) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n  \n  ### Pair diagram ----\n  output$pairplot &lt;- plotly::renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    p &lt;- GGally::ggpairs(\n      params$data,\n      axisLabels = \"none\",\n      lower = list(\n        continuous = function(data, mapping, ...) {\n          ggplot(data, mapping) +\n            suppressWarnings(geom_point(\n              aes(text = paste0(\n                \"Department: \", \n                dt_labels[[\"Department\"]],\n                \"&lt;br&gt;Region: \", \n                dt_labels[[\"Region\"]])),\n              color = \"black\"\n            ))\n        }\n      )\n    )\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Coefficientplot ----\n  output$coefficientplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    x &lt;- params$x\n    y &lt;- params$y\n    \n    \n    p &lt;- plot(parameters::model_parameters(params$model))\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Scatterplot ----\n  output$scatterplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    x &lt;- params$x \n    y &lt;- params$y\n    \n    \n    if (length(y) == 1) {\n      p &lt;- ggplot(params$data, \n                  aes(x = .data[[params$x]], \n                      y = .data[[params$y]])) +\n        geom_point(aes(text = paste0(\"Department: \", \n                                     dt_labels[[\"Department\"]],\n                                     \"&lt;br&gt;Region: \", \n                                     dt_labels[[\"Region\"]])),\n                   color = \"black\") +\n        geom_smooth() + \n        geom_smooth(method='lm') +\n        theme_light()\n    } else {\n      p &lt;- ggplot() +\n        theme_void() +\n        annotate(\"text\", \n                 label = \"Cannot create scatterplot.\\nMore than two variables selected.\", \n                 x = 0, y = 0, \n                 size = 5, \n                 colour = \"red\",\n                 hjust = 0.5,\n                 vjust = 0.5) +\n        xlab(NULL)\n      \n    }\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Table: Regression ----\n  output$tableregression &lt;- renderUI({\n    params &lt;- mparams()\n    HTML(modelsummary(\n      dvnames(list(params$model)),\n      gof_omit = \"AIC|BIC|Log|Adj|RMSE\"\n    ))\n  })\n  \n  ### Plot: Normality residuals ----\n  output$normality &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_normality(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Outliers ----\n  output$outliers &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_outliers(params$model), show_labels = FALSE)\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$x &lt;- \"Leverage\"\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Heteroskedasticity ----\n  output$heteroskedasticity &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_heteroskedasticity(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$y &lt;- \"Sqrt. |Std. residuals|\" # ggplotly doesn't support expressions\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  \n  ## 4.3 Map data ----\n  \n  # Render description of selected variable\n  output$tab_map_desc &lt;- renderUI({\n    HTML(variable_desc[[input$tab_map_select]]$desc)\n  })\n  \n  # Select polygon based on aggregation level\n  poly &lt;- reactive({\n    if (identical(input$tab_map_aggr, \"Regions\")) {\n      data_guerry_region\n    } else {\n      data_guerry\n    }\n  })\n  \n  # Select palette based on input\n  palette &lt;- reactive({\n    pal &lt;- input$tab_map_pal\n    if (pal %in% pals$Viridis) {\n      pal &lt;- viridis::viridis_pal(option = tolower(pal))(5)\n    }\n    pal\n  }) %&gt;%\n    bindEvent(input$tab_map_pal)\n  \n  # Compile parameters for leaflet rendering\n  params &lt;- reactive({\n    poly &lt;- st_transform(poly(), 4326)\n    pal &lt;- palette()\n    var &lt;- input$tab_map_select\n    \n    values &lt;- as.formula(paste0(\"~\", var))\n    pal &lt;- colorNumeric(palette = pal, domain = NULL)\n    \n    list(\n      poly = poly,\n      var = var,\n      pal = pal,\n      values = values\n    )\n  })\n  \n  # Render leaflet for the first time\n  output$tab_map_map &lt;- leaflet::renderLeaflet({\n    params &lt;- params()\n    leaflet(data = params$poly) %&gt;%\n      addProviderTiles(\"OpenStreetMap.France\", group = \"OSM\") %&gt;%\n      addProviderTiles(\"OpenTopoMap\", group = \"OTM\") %&gt;%\n      addProviderTiles(\"Stamen.TonerLite\", group = \"Stamen Toner\") %&gt;%\n      addProviderTiles(\"GeoportailFrance.orthos\", group = \"Orthophotos\") %&gt;%\n      addLayersControl(baseGroups = c(\"OSM\", \"OTM\",\n                                      \"Stamen Toner\", \"Orthophotos\")) %&gt;%\n      setView(lng = 3, lat = 47, zoom = 5) %&gt;%\n      addPolygons(\n        fillColor = as.formula(paste0(\"~params$pal(\", params$var, \")\")),\n        fillOpacity = 0.7,\n        weight = 1,\n        color = \"black\",\n        opacity = 0.5,\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"black\",\n          opacity = 0.5,\n          fillOpacity = 1,\n          bringToFront = TRUE,\n          sendToBack = TRUE\n        )\n      ) %&gt;%\n      addLegend(\n        position = \"bottomright\",\n        pal = params$pal,\n        values = params$values,\n        opacity = 0.9,\n        title = variable_desc[[params$var]]$lgd,\n        labFormat = labelFormat(suffix = variable_desc[[params$var]]$unit)\n      )\n  })\n}\n\nshinyApp(ui, server)",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#how-to-add-labels",
    "href": "06-mapping.html#how-to-add-labels",
    "title": "Mapping data & advanced visualization",
    "section": "7.1 How to add labels",
    "text": "7.1 How to add labels\n\nAdding labels is itself not a difficult task: You can just provide the values vector we use as data input\nLabels then contain a single value with no information as to what you’re looking at\n\n\nleaflet() %&gt;%\n    addPolygons(\n        ..., # rest of the args\n        label = ~values\n    )",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#advanced-label-layout-using-html",
    "href": "06-mapping.html#advanced-label-layout-using-html",
    "title": "Mapping data & advanced visualization",
    "section": "7.2 Advanced label layout using HTML",
    "text": "7.2 Advanced label layout using HTML\n\nThis is enough, but not very pretty and it doesn’t provide potentially important metadata like region names\nIn our app, we use a table layout containing information about region, department and variable value\nYou can create generic HTML tables using the table tag (tags$table) together with the tr (table row, tags$tr) and td (table data, tags$td)\n\n\n1tags$table(\n2    tags$tr(\n3        tags$td(\"Cell 1\"),\n        tags$td(\"Cell 2\"),\n        tags$td(\"Cell 3\")\n    ),\n    tags$tr(\n        tags$td(\"Cell 4\"),\n        tags$td(\"Cell 5\"),\n        tags$td(\"Cell 6\")\n    ),\n    tags$tr(\n        tags$td(\"Cell 7\"),\n        tags$td(\"Cell 8\"),\n        tags$td(\"Cell 9\")\n    )\n)\n\n\n1\n\nDefine the table environment\n\n2\n\nDefine a table row\n\n3\n\nDefine three data cells\n\n\n\n\n\n\n\nCell 1\nCell 2\nCell 3\n\n\nCell 4\nCell 5\nCell 6\n\n\nCell 7\nCell 8\nCell 9\n\n\n\n\n\n\n\nIn the following chunk we use mapply() to map region, department and variable value into a nicely aligned grid:\n\n\nparams &lt;- reactive({\n  poly &lt;- st_transform(poly(), 4326)\n  pal &lt;- palette()\n  var &lt;- input$tab_map_select\n\n  values &lt;- as.formula(paste0(\"~\", var))\n  pal &lt;- colorNumeric(palette = pal, domain = NULL)\n  \n1  reg &lt;- poly[[\"Region\"]]\n  dep &lt;- poly[[\"Department\"]]\n  val &lt;- poly[[var]]\n  \n  # If aggregated on region level, department will be NULL\n2  if (is.null(dep)) {\n    dep &lt;- rep(NA, nrow(poly))\n  }\n\n  # Create labels that are nicely aligned in a grid\n  # If aggregated on region level, omit department name (because it is NULL)\n3  labels &lt;- mapply(\n    function(reg, dep, val) {\n4      HTML(as.character(tags$table(\n        # Add region row\n5        tags$tr(\n          style = \"line-height: 10px\", # more compact layout\n6          tags$td(tags$b(\"Region: \")),\n7          tags$td(reg)\n        ),\n        # Add department row if available\n        if (!is.na(dep)) {\n          tags$tr(\n            style = \"line-height: 10px\",\n            tags$td(tags$b(\"Department: \")),\n            tags$td(dep)\n          )\n        },\n        # Add value row\n        tags$tr(\n          style = \"line-height: 10px\",\n          tags$td(tags$b(paste0(txts[[var]]$lgd, \": \"))),\n          tags$td(round(val, 2))\n        )\n      )))\n    },\n    reg = reg, dep = dep, val = val,\n    SIMPLIFY = FALSE,\n    USE.NAMES = FALSE\n  )\n\n  list(\n    poly = poly,\n    var = var,\n    pal = pal,\n    values = values,\n8    labels = labels\n  )\n  \n  # Render leaflet for the first time\n  output$tab_map_map &lt;- leaflet::renderLeaflet({\n    params &lt;- params()\n    leaflet(data = params$poly) %&gt;%\n      addProviderTiles(\"OpenStreetMap.France\", group = \"OSM\") %&gt;%\n      addProviderTiles(\"OpenTopoMap\", group = \"OTM\") %&gt;%\n      addProviderTiles(\"Stamen.TonerLite\", group = \"Stamen Toner\") %&gt;%\n      addProviderTiles(\"GeoportailFrance.orthos\", group = \"Orthophotos\") %&gt;%\n      addLayersControl(baseGroups = c(\"OSM\", \"OTM\",\n                                      \"Stamen Toner\", \"Orthophotos\")) %&gt;%\n      setView(lng = 3, lat = 47, zoom = 5) %&gt;%\n      addPolygons(\n        fillColor = as.formula(paste0(\"~params$pal(\", params$var, \")\")),\n        fillOpacity = 0.7,\n        weight = 1,\n        color = \"black\",\n        opacity = 0.5,\n9        label = params$labels,\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"black\",\n          opacity = 0.5,\n          fillOpacity = 1,\n          bringToFront = TRUE,\n          sendToBack = TRUE\n        )\n      ) %&gt;%\n      addLegend(\n        position = \"bottomright\",\n        pal = params$pal,\n        values = params$values,\n        opacity = 0.9,\n        title = txts[[params$var]]$lgd,\n        labFormat = labelFormat(suffix = txts[[params$var]]$unit)\n      )\n  })\n})\n\n\n1\n\nStore all relevant information, this includes: the region names, the department names and the variable values\n\n2\n\nIn case the map is aggregated, the department names are going to be NULL. To prevent errors down the line, we replace it with NA the same length as the other vectors.\n\n3\n\nThen, we apply a function to the three vectors parallely, so that we can work with all label values at the same time\n\n4\n\nCreate a table environment\n\n5\n\nCreate three rows, one for each vector: regions, departments and values\n\n6\n\nThe first cell is the left-hand side (e.g. “Department” or “Region”)\n\n7\n\nThe second cell is the right-hand side (e.g. the department name)\n\n8\n\nAdd the newly created labels to the params() list\n\n9\n\nDon’t forget to pass the labels to the leaflet maps using the labels parameter!",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#full-code-4",
    "href": "06-mapping.html#full-code-4",
    "title": "Mapping data & advanced visualization",
    "section": "7.3 Full code",
    "text": "7.3 Full code\n\n\nFull code including a reactive Leaflet map with pretty hover labels\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(fresh)\nlibrary(waiter)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(viridis)\nlibrary(leaflet)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(datawizard)\nlibrary(parameters)\nlibrary(performance)\nlibrary(modelsummary)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\nvariable_desc &lt;- list(\n  Crime_pers = list(\n    title = \"Crime against persons\",\n    desc = as.character(p(tags$b(\"Crime against persons:\"), \"Population per crime against persons\", hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Crime_prop = list(\n    title = \"Crime against property\",\n    desc = as.character(p(tags$b(\"Crime against property:\"), \"Population per crime against property\", hr(), helpText(\"Source: Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Literacy = list(\n    title = \"Literacy\",\n    desc = as.character(p(tags$b(\"Percent Read & Write:\"), \"Percent of military conscripts who can read and write\", hr(), helpText(\"Source: Table A2 in Guerry (1833)\"))),\n    lgd = \"Literacy\",\n    unit = \" %\"\n  ),\n  Donations = list(\n    title = \"Donations to the poor\",\n    desc = as.character(p(tags$b(\"Donations to the poor\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bulletin des lois\"))),\n    lgd = \"Donations\",\n    unit = \"\"\n  ),\n  Infants = list(\n    title = \"Illegitimate births\",\n    desc = as.character(p(tags$b(\"Population per illegitimate birth\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bureau des Longitudes, 1817-1821\"))),\n    lgd = \"Pop. per birth\",\n    unit = \"\"\n  ),\n  Suicides = list(\n    title = \"Suicides\",\n    desc = as.character(p(tags$b(\"Population per suicide\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1827-1830\"))),\n    lgd = \"Pop. per suicide\",\n    unit = \"\"\n  ),\n  Wealth = list(\n    title = \"Tax / capita\",\n    desc = as.character(p(tags$b(\"Per capita tax on personal property:\"), \"A ranked index based on taxes on personal and movable property per inhabitant\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Tax / capita\",\n    unit = \"\"\n  ),\n  Commerce = list(\n    title = \"Commerce & Industry\",\n    desc = as.character(p(tags$b(\"Commerce & Industry:\"), \"Commerce and Industry, measured by the rank of the number of patents / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Patents / capita\",\n    unit = \"\"\n  ),\n  Clergy = list(\n    title = \"Clergy\",\n    desc = as.character(p(tags$b(\"Distribution of clergy:\"), \"Distribution of clergy, measured by the rank of the number of Catholic priests in active service / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Almanach officiel du clergy, 1829\"))),\n    lgd = \"Priests / capita\",\n    unit = \"\"\n  ),\n  Crime_parents = list(\n    title = \"Crime against parents\",\n    desc = as.character(p(tags$b(\"Crime against parents:\"), \"Crimes against parents, measured by the rank of the ratio of crimes against parents to all crimes \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Share of crimes\",\n    unit = \" %\"\n  ),\n  Infanticide = list(\n    title = \"Infanticides\",\n    desc = as.character(p(tags$b(\"Infanticides per capita:\"), \"Ranked ratio of number of infanticides to population \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Infanticides / capita\",\n    unit = \"\"\n  ),\n  Donation_clergy = list(\n    title = \"Donations to the clergy\",\n    desc = as.character(p(tags$b(\"Donations to the clergy:\"), \"Ranked ratios of the number of bequests and donations inter vivios to population \\u2013 Average for the years 1815-1824\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Bull. des lois, ordunn. d’autorisation\"))),\n    lgd = \"Donations / capita\",\n    unit = \"\"\n  ),\n  Lottery = list(\n    title = \"Wager on Royal Lottery\",\n    desc = as.character(p(tags$b(\"Per capita wager on Royal Lottery:\"), \"Ranked ratio of the proceeds bet on the royal lottery to population \\u2013 Average for the years 1822-1826\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte rendu par le ministre des finances\"))),\n    lgd = \"Wager / capita\",\n    unit = \"\"\n  ),\n  Desertion = list(\n    title = \"Military desertion\",\n    desc = as.character(p(tags$b(\"Military desertion:\"), \"Military disertion, ratio of the number of young soldiers accused of desertion to the force of the military contingent, minus the deficit produced by the insufficiency of available billets\\u2013 Average of the years 1825-1827\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte du ministère du guerre, 1829 état V\"))),\n    lgd = \"No. of desertions\",\n    unit = \"\"\n  ),\n  Instruction = list(\n    title = \"Instruction\",\n    desc = as.character(p(tags$b(\"Instruction:\"), \"Ranks recorded from Guerry's map of Instruction. Note: this is inversely related to literacy (as defined here)\")),\n    lgd = \"Instruction\",\n    unit = \"\"\n  ),\n  Prostitutes = list(\n    title = \"Prostitutes\",\n    desc = as.character(p(tags$b(\"Prostitutes in Paris:\"), \"Number of prostitutes registered in Paris from 1816 to 1834, classified by the department of their birth\", hr(), helpText(\"Source: Parent-Duchatelet (1836), De la prostitution en Paris\"))),\n    lgd = \"No. of prostitutes\",\n    unit = \"\"\n  ),\n  Distance = list(\n    title = \"Distance to paris\",\n    desc = as.character(p(tags$b(\"Distance to Paris (km):\"), \"Distance of each department centroid to the centroid of the Seine (Paris)\", hr(), helpText(\"Source: Calculated from department centroids\"))),\n    lgd = \"Distance\",\n    unit = \" km\"\n  ),\n  Area = list(\n    title = \"Area\",\n    desc = as.character(p(tags$b(\"Area (1000 km\\u00b2)\"), hr(), helpText(\"Source: Angeville (1836)\"))),\n    lgd = \"Area\",\n    unit = \" km\\u00b2\"\n  ),\n  Pop1831 = list(\n    title = \"Population\",\n    desc = as.character(p(tags$b(\"Population in 1831, in 1000s\"), hr(), helpText(\"Source: Taken from Angeville (1836), Essai sur la Statistique de la Population français\"))),\n    lgd = \"Population (in 1000s)\",\n    unit = \"\"\n  )\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prep data (Tab: Map data) ----\ndata_guerry_region &lt;- data_guerry %&gt;%\n  group_by(Region) %&gt;%\n  summarise(across(\n    .cols = all_of(names(variable_names)),\n    function(x) {\n      if (cur_column() %in% c(\"Area\", \"Pop1831\")) {\n        sum(x)\n      } else {\n        mean(x)\n      }\n    }\n  ))\n\n## Prepare palettes ----\n## Used for mapping\npals &lt;- list(\n  Sequential = RColorBrewer::brewer.pal.info %&gt;%\n    filter(category %in% \"seq\") %&gt;%\n    row.names(),\n  Viridis = c(\"Magma\", \"Inferno\", \"Plasma\", \"Viridis\",\n              \"Cividis\", \"Rocket\", \"Mako\", \"Turbo\")\n)\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      menuItem(tabName = \"tab_map\", text = \"Map data\", icon = icon(\"map\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      ),\n      ### 3.3.3 Tab: Model data ----\n      tabItem(\n        tabName = \"tab_model\",\n        fluidRow(\n          column(\n            width = 6,\n            #### Inputs(s) ----\n            box(\n              width = 12,\n              title = \"Select variables\",\n              status = \"primary\",\n              shinyWidgets::pickerInput(\n                \"model_x\",\n                label = \"Select a dependent variable\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(liveSearch = TRUE),\n                selected = \"Literacy\"\n              ),\n              shinyWidgets::pickerInput(\n                \"model_y\",\n                label = \"Select independent variables\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(\n                  actionsBox = TRUE,\n                  liveSearch = TRUE,\n                  selectedTextFormat = \"count\",\n                  countSelectedText = \"{0} variables selected\",\n                  noneSelectedText = \"No variables selected\"\n                ),\n                multiple = TRUE,\n                selected = \"Commerce\"\n              ),\n              shinyWidgets::prettyCheckbox(\n                \"model_std\",\n                label = \"Standardize variables?\",\n                value = TRUE,\n                status = \"primary\",\n                shape = \"curve\"\n              ),\n              hr(),\n              actionButton(\n                \"refresh\",\n                label = \"Apply changes\",\n                icon = icon(\"refresh\"),\n                flat = TRUE\n              )\n            ),\n            #### Outputs(s) ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model analysis\",\n              side = \"right\",\n              width = 12,\n              ##### Tabpanel: Coefficient plot ----\n              tabPanel(\n                title = \"Plot: Coefficients\",\n                plotly::plotlyOutput(\"coefficientplot\")\n              ),\n              ##### Tabpanel: Scatterplot ----\n              tabPanel(\n                title = \"Plot: Scatterplot\",\n                plotly::plotlyOutput(\"scatterplot\")\n              ),\n              ##### Tabpanel: Table: Regression ----\n              tabPanel(\n                title = \"Table: Model\",\n                htmlOutput(\"tableregression\")\n              )\n            )\n          ),\n          column(\n            width = 6,\n            ##### Box: Pair diagramm ----\n            box(\n              width = 12,\n              title = \"Pair diagram\",\n              status = \"primary\",\n              plotly::plotlyOutput(\"pairplot\")\n            ),\n            ##### TabBox: Model diagnostics ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model diagnostics\",\n              width = 12,\n              side = \"right\",\n              tabPanel(\n                title = \"Normality\",\n                plotly::plotlyOutput(\"normality\")\n              ),\n              tabPanel(\n                title = \"Outliers\",\n                plotly::plotlyOutput(\"outliers\")\n              ),\n              tabPanel(\n                title = \"Heteroskedasticity\",\n                plotly::plotlyOutput(\"heteroskedasticity\")\n              )\n            )\n          )\n        )\n      ),\n      ### 3.3.4 Tab: Map data ----\n      tabItem(\n        tabName = \"tab_map\", # must correspond to related menuItem name\n        fluidRow(\n          column(\n            #### Inputs(s) ----\n            width = 4, # must be between 1 and 12\n            box(\n              title = \"Data selection\",\n              status = \"primary\",\n              width = 12,\n              selectInput(\n                \"tab_map_select\",\n                label = \"Select a variable\",\n                choices = setNames(names(variable_names), variable_names)\n              ),\n              uiOutput(\"tab_map_desc\")\n            ),\n            box(\n              title = \"Map configuration\",\n              status = \"primary\",\n              width = 12,\n              radioButtons(\n                \"tab_map_aggr\",\n                label = \"Aggregation level\",\n                choices = c(\"Departments\", \"Regions\"),\n                selected = \"Departments\"\n              ),\n              selectInput(\n                \"tab_map_pal\",\n                label = \"Color palette\",\n                choices = pals,\n                selected = \"Reds\"\n              ) # end input\n            ) # end box\n          ), # end column\n          column(\n            #### Output(s) ----\n            width = 8,\n            box(\n              id = \"tab_map_box\",\n              status = \"primary\",\n              headerBorder = FALSE,\n              collapsible = FALSE,\n              width = 12,\n              leaflet::leafletOutput(\"tab_map_map\", height = \"800px\", width = \"100%\")\n            ) # end box\n          ) # end column\n        ) # end fluidRow\n      ) # end tabItem\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n  ### Define & estimate model ----\n  mparams &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(data_guerry)[c(x, y)]\n    dt_labels &lt;- sf::st_drop_geometry(data_guerry)[c(\"Department\", \"Region\")]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    form &lt;- as.formula(paste(x, \"~\", paste(y, collapse = \" + \")))\n    mod &lt;- lm(form, data = dt)\n    \n    list(\n      x = x,\n      y = y,\n      data = dt,\n      data_labels = dt_labels,\n      model = mod\n    )\n  }) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n  \n  ### Pair diagram ----\n  output$pairplot &lt;- plotly::renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    p &lt;- GGally::ggpairs(\n      params$data,\n      axisLabels = \"none\",\n      lower = list(\n        continuous = function(data, mapping, ...) {\n          ggplot(data, mapping) +\n            suppressWarnings(geom_point(\n              aes(text = paste0(\n                \"Department: \", \n                dt_labels[[\"Department\"]],\n                \"&lt;br&gt;Region: \", \n                dt_labels[[\"Region\"]])),\n              color = \"black\"\n            ))\n        }\n      )\n    )\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Coefficientplot ----\n  output$coefficientplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    x &lt;- params$x\n    y &lt;- params$y\n    \n    \n    p &lt;- plot(parameters::model_parameters(params$model))\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Scatterplot ----\n  output$scatterplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    x &lt;- params$x \n    y &lt;- params$y\n    \n    \n    if (length(y) == 1) {\n      p &lt;- ggplot(params$data, \n                  aes(x = .data[[params$x]], \n                      y = .data[[params$y]])) +\n        geom_point(aes(text = paste0(\"Department: \", \n                                     dt_labels[[\"Department\"]],\n                                     \"&lt;br&gt;Region: \", \n                                     dt_labels[[\"Region\"]])),\n                   color = \"black\") +\n        geom_smooth() + \n        geom_smooth(method='lm') +\n        theme_light()\n    } else {\n      p &lt;- ggplot() +\n        theme_void() +\n        annotate(\"text\", \n                 label = \"Cannot create scatterplot.\\nMore than two variables selected.\", \n                 x = 0, y = 0, \n                 size = 5, \n                 colour = \"red\",\n                 hjust = 0.5,\n                 vjust = 0.5) +\n        xlab(NULL)\n      \n    }\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Table: Regression ----\n  output$tableregression &lt;- renderUI({\n    params &lt;- mparams()\n    HTML(modelsummary(\n      dvnames(list(params$model)),\n      gof_omit = \"AIC|BIC|Log|Adj|RMSE\"\n    ))\n  })\n  \n  ### Plot: Normality residuals ----\n  output$normality &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_normality(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Outliers ----\n  output$outliers &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_outliers(params$model), show_labels = FALSE)\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$x &lt;- \"Leverage\"\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Heteroskedasticity ----\n  output$heteroskedasticity &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_heteroskedasticity(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$y &lt;- \"Sqrt. |Std. residuals|\" # ggplotly doesn't support expressions\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  \n  ## 4.3 Map data ----\n  \n  # Render description of selected variable\n  output$tab_map_desc &lt;- renderUI({\n    HTML(variable_desc[[input$tab_map_select]]$desc)\n  })\n  \n  # Select polygon based on aggregation level\n  poly &lt;- reactive({\n    if (identical(input$tab_map_aggr, \"Regions\")) {\n      data_guerry_region\n    } else {\n      data_guerry\n    }\n  })\n  \n  # Select palette based on input\n  palette &lt;- reactive({\n    pal &lt;- input$tab_map_pal\n    if (pal %in% pals$Viridis) {\n      pal &lt;- viridis::viridis_pal(option = tolower(pal))(5)\n    }\n    pal\n  }) %&gt;%\n    bindEvent(input$tab_map_pal)\n  \n  # Compile parameters for leaflet rendering\n  params &lt;- reactive({\n    poly &lt;- st_transform(poly(), 4326)\n    pal &lt;- palette()\n    var &lt;- input$tab_map_select\n    \n    values &lt;- as.formula(paste0(\"~\", var))\n    pal &lt;- colorNumeric(palette = pal, domain = NULL)\n    \n    reg &lt;- poly[[\"Region\"]]\n    dep &lt;- poly[[\"Department\"]]\n    val &lt;- poly[[var]]\n    \n    if (is.null(dep)) {\n      dep &lt;- rep(NA, nrow(poly))\n    }\n    \n    # Create labels that are nicely aligned in a grid\n    labels &lt;- mapply(\n      function(reg, dep, val) {\n        HTML(as.character(tags$table(\n          tags$tr(\n            style = \"line-height: 10px\",\n            tags$td(tags$b(\"Region: \")),\n            tags$td(reg)\n          ),\n          if (!is.na(dep)) {\n            tags$tr(\n              style = \"line-height: 10px\",\n              tags$td(tags$b(\"Department: \")),\n              tags$td(dep)\n            )\n          },\n          tags$tr(\n            style = \"line-height: 10px\",\n            tags$td(tags$b(paste0(variable_desc[[var]]$lgd, \": \"))),\n            tags$td(round(val, 2))\n          )\n        )))\n      },\n      reg = reg, dep = dep, val = val,\n      SIMPLIFY = FALSE,\n      USE.NAMES = FALSE\n    )\n    \n    list(\n      poly = poly,\n      var = var,\n      pal = pal,\n      values = values,\n      labels = labels\n    )\n  })\n  \n  # Render leaflet for the first time\n  output$tab_map_map &lt;- leaflet::renderLeaflet({\n    params &lt;- params()\n    leaflet(data = params$poly) %&gt;%\n      addProviderTiles(\"OpenStreetMap.France\", group = \"OSM\") %&gt;%\n      addProviderTiles(\"OpenTopoMap\", group = \"OTM\") %&gt;%\n      addProviderTiles(\"Stamen.TonerLite\", group = \"Stamen Toner\") %&gt;%\n      addProviderTiles(\"GeoportailFrance.orthos\", group = \"Orthophotos\") %&gt;%\n      addLayersControl(baseGroups = c(\"OSM\", \"OTM\",\n                                      \"Stamen Toner\", \"Orthophotos\")) %&gt;%\n      setView(lng = 3, lat = 47, zoom = 5) %&gt;%\n      addPolygons(\n        fillColor = as.formula(paste0(\"~params$pal(\", params$var, \")\")),\n        fillOpacity = 0.7,\n        weight = 1,\n        color = \"black\",\n        opacity = 0.5,\n        label = params$labels,\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"black\",\n          opacity = 0.5,\n          fillOpacity = 1,\n          bringToFront = TRUE,\n          sendToBack = TRUE\n        )\n      ) %&gt;%\n      addLegend(\n        position = \"bottomright\",\n        pal = params$pal,\n        values = params$values,\n        opacity = 0.9,\n        title = variable_desc[[params$var]]$lgd,\n        labFormat = labelFormat(suffix = variable_desc[[params$var]]$unit)\n      )\n  })\n}\n\nshinyApp(ui, server)",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#what-are-proxies",
    "href": "06-mapping.html#what-are-proxies",
    "title": "Mapping data & advanced visualization",
    "section": "8.1 What are proxies?",
    "text": "8.1 What are proxies?\n\nSolution: Proxies\nProxy objects are representations of existing widgets that can manipulate widgets in place",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#proxies-in-shiny-extensions",
    "href": "06-mapping.html#proxies-in-shiny-extensions",
    "title": "Mapping data & advanced visualization",
    "section": "8.2 Proxies in Shiny extensions",
    "text": "8.2 Proxies in Shiny extensions\n\nMany Shiny extensions provide proxy functions:\n\nDT::dataTableProxy()\nplotly::plotlyProxy()\nleaflet::leafletProxy()",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#proxy-workflow",
    "href": "06-mapping.html#proxy-workflow",
    "title": "Mapping data & advanced visualization",
    "section": "8.3 Proxy workflow",
    "text": "8.3 Proxy workflow\n\nInitialize an isolated output widget (i.e., no dependencies) / output$tab_map_map\nCreate an observer that updates input dependencies / observe()\nInvalidate an input\nRemove existing features and add new ones\n\n\n\n\nReactive graph for proxies",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#isolate-reactive-objects",
    "href": "06-mapping.html#isolate-reactive-objects",
    "title": "Mapping data & advanced visualization",
    "section": "8.4 Isolate reactive objects",
    "text": "8.4 Isolate reactive objects\n\nTo create an isolated output widget, we use the isolate() function from Shiny\n\nThe params() reactive is executed only once, but does take a dependency\n\n\n\n  # Render leaflet for the first time\n  output$tab_map_map &lt;- leaflet::renderLeaflet({\n1    params &lt;- isolate(params())\n    leaflet(data = params$poly) %&gt;%\n      addProviderTiles(\"OpenStreetMap.France\", group = \"OSM\") %&gt;%\n      addProviderTiles(\"OpenTopoMap\", group = \"OTM\") %&gt;%\n      addProviderTiles(\"Stamen.TonerLite\", group = \"Stamen Toner\") %&gt;%\n      addProviderTiles(\"GeoportailFrance.orthos\", group = \"Orthophotos\") %&gt;%\n      addLayersControl(baseGroups = c(\"OSM\", \"OTM\",\n                                      \"Stamen Toner\", \"Orthophotos\")) %&gt;%\n      setView(lng = 3, lat = 47, zoom = 5) %&gt;%\n      addPolygons(\n        fillColor = as.formula(paste0(\"~params$pal(\", params$var, \")\")),\n        fillOpacity = 0.7,\n        weight = 1,\n        color = \"black\",\n        opacity = 0.5,\n        label = params$labels,\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"black\",\n          opacity = 0.5,\n          fillOpacity = 1,\n          bringToFront = TRUE,\n          sendToBack = TRUE\n        )\n      ) %&gt;%\n      addLegend(\n        position = \"bottomright\",\n        pal = params$pal,\n        values = params$values,\n        opacity = 0.9,\n        title = variable_desc[[params$var]]$lgd,\n        labFormat = labelFormat(suffix = variable_desc[[params$var]]$unit)\n      )\n  })\n\n\n1\n\nMost of the code remains the same. However, we isolate the call to params() to prevent the rendering function to execute every time params() is invalidated. No dependency is taken!",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#implement-proxies",
    "href": "06-mapping.html#implement-proxies",
    "title": "Mapping data & advanced visualization",
    "section": "8.5 Implement proxies",
    "text": "8.5 Implement proxies\n\nInstead, we create an observer that updates the map layers in place\nFirst, all existing features that are to be changed are cleared\nSecond, new features are added in the usual piping manner\n\n\n1  observe({\n2    params &lt;- params()\n3    leafletProxy(\"tab_map_map\", data = params$poly) %&gt;%\n4      clearShapes() %&gt;%\n      clearControls() %&gt;%\n5      addPolygons(\n        fillColor = as.formula(paste0(\"~params$pal(\", params$var, \")\")),\n        fillOpacity = 0.7,\n        weight = 1,\n        color = \"black\",\n        opacity = 0.5,\n        label = params$labels,\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"black\",\n          opacity = 0.5,\n          fillOpacity = 1,\n          bringToFront = TRUE,\n          sendToBack = TRUE\n        )\n      ) %&gt;%\n      addLegend(\n        position = \"bottomright\",\n        na.label = \"No data\",\n        pal = params$pal,\n        values = params$values,\n        opacity = 0.9,\n        title = variable_desc[[params$var]]$lgd,\n        labFormat = labelFormat(suffix = variable_desc[[params$var]]$unit)\n      )\n  })\n\n\n1\n\nProxies work with observers. There is no need to use a rendering function as the widget is re-rendered but an existing widget is updated.\n\n2\n\nparams() can be called without isolation here!\n\n3\n\nCreate a leaflet proxy. Proxies update map values without re-rendering the entire map, thus increasing performance.\n\n4\n\nRemove existing layers because we don’t want to stack layers infinitely\n\n5\n\nAdd new layers in the same way you would with a normal leaflet map",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#what-changed",
    "href": "06-mapping.html#what-changed",
    "title": "Mapping data & advanced visualization",
    "section": "8.6 What changed?",
    "text": "8.6 What changed?\n\nThe output now:\n\nDoes not re-render from scratch - saving time and resources\nDoes not reset the map - making exploration more seamless",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#full-code-5",
    "href": "06-mapping.html#full-code-5",
    "title": "Mapping data & advanced visualization",
    "section": "8.7 Full code",
    "text": "8.7 Full code\n\n\nFull code including a reactive Leaflet proxies\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(fresh)\nlibrary(waiter)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(viridis)\nlibrary(leaflet)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(datawizard)\nlibrary(parameters)\nlibrary(performance)\nlibrary(modelsummary)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\nvariable_desc &lt;- list(\n  Crime_pers = list(\n    title = \"Crime against persons\",\n    desc = as.character(p(tags$b(\"Crime against persons:\"), \"Population per crime against persons\", hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Crime_prop = list(\n    title = \"Crime against property\",\n    desc = as.character(p(tags$b(\"Crime against property:\"), \"Population per crime against property\", hr(), helpText(\"Source: Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Literacy = list(\n    title = \"Literacy\",\n    desc = as.character(p(tags$b(\"Percent Read & Write:\"), \"Percent of military conscripts who can read and write\", hr(), helpText(\"Source: Table A2 in Guerry (1833)\"))),\n    lgd = \"Literacy\",\n    unit = \" %\"\n  ),\n  Donations = list(\n    title = \"Donations to the poor\",\n    desc = as.character(p(tags$b(\"Donations to the poor\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bulletin des lois\"))),\n    lgd = \"Donations\",\n    unit = \"\"\n  ),\n  Infants = list(\n    title = \"Illegitimate births\",\n    desc = as.character(p(tags$b(\"Population per illegitimate birth\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bureau des Longitudes, 1817-1821\"))),\n    lgd = \"Pop. per birth\",\n    unit = \"\"\n  ),\n  Suicides = list(\n    title = \"Suicides\",\n    desc = as.character(p(tags$b(\"Population per suicide\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1827-1830\"))),\n    lgd = \"Pop. per suicide\",\n    unit = \"\"\n  ),\n  Wealth = list(\n    title = \"Tax / capita\",\n    desc = as.character(p(tags$b(\"Per capita tax on personal property:\"), \"A ranked index based on taxes on personal and movable property per inhabitant\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Tax / capita\",\n    unit = \"\"\n  ),\n  Commerce = list(\n    title = \"Commerce & Industry\",\n    desc = as.character(p(tags$b(\"Commerce & Industry:\"), \"Commerce and Industry, measured by the rank of the number of patents / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Patents / capita\",\n    unit = \"\"\n  ),\n  Clergy = list(\n    title = \"Clergy\",\n    desc = as.character(p(tags$b(\"Distribution of clergy:\"), \"Distribution of clergy, measured by the rank of the number of Catholic priests in active service / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Almanach officiel du clergy, 1829\"))),\n    lgd = \"Priests / capita\",\n    unit = \"\"\n  ),\n  Crime_parents = list(\n    title = \"Crime against parents\",\n    desc = as.character(p(tags$b(\"Crime against parents:\"), \"Crimes against parents, measured by the rank of the ratio of crimes against parents to all crimes \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Share of crimes\",\n    unit = \" %\"\n  ),\n  Infanticide = list(\n    title = \"Infanticides\",\n    desc = as.character(p(tags$b(\"Infanticides per capita:\"), \"Ranked ratio of number of infanticides to population \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Infanticides / capita\",\n    unit = \"\"\n  ),\n  Donation_clergy = list(\n    title = \"Donations to the clergy\",\n    desc = as.character(p(tags$b(\"Donations to the clergy:\"), \"Ranked ratios of the number of bequests and donations inter vivios to population \\u2013 Average for the years 1815-1824\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Bull. des lois, ordunn. d’autorisation\"))),\n    lgd = \"Donations / capita\",\n    unit = \"\"\n  ),\n  Lottery = list(\n    title = \"Wager on Royal Lottery\",\n    desc = as.character(p(tags$b(\"Per capita wager on Royal Lottery:\"), \"Ranked ratio of the proceeds bet on the royal lottery to population \\u2013 Average for the years 1822-1826\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte rendu par le ministre des finances\"))),\n    lgd = \"Wager / capita\",\n    unit = \"\"\n  ),\n  Desertion = list(\n    title = \"Military desertion\",\n    desc = as.character(p(tags$b(\"Military desertion:\"), \"Military disertion, ratio of the number of young soldiers accused of desertion to the force of the military contingent, minus the deficit produced by the insufficiency of available billets\\u2013 Average of the years 1825-1827\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte du ministère du guerre, 1829 état V\"))),\n    lgd = \"No. of desertions\",\n    unit = \"\"\n  ),\n  Instruction = list(\n    title = \"Instruction\",\n    desc = as.character(p(tags$b(\"Instruction:\"), \"Ranks recorded from Guerry's map of Instruction. Note: this is inversely related to literacy (as defined here)\")),\n    lgd = \"Instruction\",\n    unit = \"\"\n  ),\n  Prostitutes = list(\n    title = \"Prostitutes\",\n    desc = as.character(p(tags$b(\"Prostitutes in Paris:\"), \"Number of prostitutes registered in Paris from 1816 to 1834, classified by the department of their birth\", hr(), helpText(\"Source: Parent-Duchatelet (1836), De la prostitution en Paris\"))),\n    lgd = \"No. of prostitutes\",\n    unit = \"\"\n  ),\n  Distance = list(\n    title = \"Distance to paris\",\n    desc = as.character(p(tags$b(\"Distance to Paris (km):\"), \"Distance of each department centroid to the centroid of the Seine (Paris)\", hr(), helpText(\"Source: Calculated from department centroids\"))),\n    lgd = \"Distance\",\n    unit = \" km\"\n  ),\n  Area = list(\n    title = \"Area\",\n    desc = as.character(p(tags$b(\"Area (1000 km\\u00b2)\"), hr(), helpText(\"Source: Angeville (1836)\"))),\n    lgd = \"Area\",\n    unit = \" km\\u00b2\"\n  ),\n  Pop1831 = list(\n    title = \"Population\",\n    desc = as.character(p(tags$b(\"Population in 1831, in 1000s\"), hr(), helpText(\"Source: Taken from Angeville (1836), Essai sur la Statistique de la Population français\"))),\n    lgd = \"Population (in 1000s)\",\n    unit = \"\"\n  )\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prep data (Tab: Map data) ----\ndata_guerry_region &lt;- data_guerry %&gt;%\n  group_by(Region) %&gt;%\n  summarise(across(\n    .cols = all_of(names(variable_names)),\n    function(x) {\n      if (cur_column() %in% c(\"Area\", \"Pop1831\")) {\n        sum(x)\n      } else {\n        mean(x)\n      }\n    }\n  ))\n\n## Prepare palettes ----\n## Used for mapping\npals &lt;- list(\n  Sequential = RColorBrewer::brewer.pal.info %&gt;%\n    filter(category %in% \"seq\") %&gt;%\n    row.names(),\n  Viridis = c(\"Magma\", \"Inferno\", \"Plasma\", \"Viridis\",\n              \"Cividis\", \"Rocket\", \"Mako\", \"Turbo\")\n)\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      menuItem(tabName = \"tab_map\", text = \"Map data\", icon = icon(\"map\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      ),\n      ### 3.3.3 Tab: Model data ----\n      tabItem(\n        tabName = \"tab_model\",\n        fluidRow(\n          column(\n            width = 6,\n            #### Inputs(s) ----\n            box(\n              width = 12,\n              title = \"Select variables\",\n              status = \"primary\",\n              shinyWidgets::pickerInput(\n                \"model_x\",\n                label = \"Select a dependent variable\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(liveSearch = TRUE),\n                selected = \"Literacy\"\n              ),\n              shinyWidgets::pickerInput(\n                \"model_y\",\n                label = \"Select independent variables\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(\n                  actionsBox = TRUE,\n                  liveSearch = TRUE,\n                  selectedTextFormat = \"count\",\n                  countSelectedText = \"{0} variables selected\",\n                  noneSelectedText = \"No variables selected\"\n                ),\n                multiple = TRUE,\n                selected = \"Commerce\"\n              ),\n              shinyWidgets::prettyCheckbox(\n                \"model_std\",\n                label = \"Standardize variables?\",\n                value = TRUE,\n                status = \"primary\",\n                shape = \"curve\"\n              ),\n              hr(),\n              actionButton(\n                \"refresh\",\n                label = \"Apply changes\",\n                icon = icon(\"refresh\"),\n                flat = TRUE\n              )\n            ),\n            #### Outputs(s) ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model analysis\",\n              side = \"right\",\n              width = 12,\n              ##### Tabpanel: Coefficient plot ----\n              tabPanel(\n                title = \"Plot: Coefficients\",\n                plotly::plotlyOutput(\"coefficientplot\")\n              ),\n              ##### Tabpanel: Scatterplot ----\n              tabPanel(\n                title = \"Plot: Scatterplot\",\n                plotly::plotlyOutput(\"scatterplot\")\n              ),\n              ##### Tabpanel: Table: Regression ----\n              tabPanel(\n                title = \"Table: Model\",\n                htmlOutput(\"tableregression\")\n              )\n            )\n          ),\n          column(\n            width = 6,\n            ##### Box: Pair diagramm ----\n            box(\n              width = 12,\n              title = \"Pair diagram\",\n              status = \"primary\",\n              plotly::plotlyOutput(\"pairplot\")\n            ),\n            ##### TabBox: Model diagnostics ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model diagnostics\",\n              width = 12,\n              side = \"right\",\n              tabPanel(\n                title = \"Normality\",\n                plotly::plotlyOutput(\"normality\")\n              ),\n              tabPanel(\n                title = \"Outliers\",\n                plotly::plotlyOutput(\"outliers\")\n              ),\n              tabPanel(\n                title = \"Heteroskedasticity\",\n                plotly::plotlyOutput(\"heteroskedasticity\")\n              )\n            )\n          )\n        )\n      ),\n      ### 3.3.4 Tab: Map data ----\n      tabItem(\n        tabName = \"tab_map\", # must correspond to related menuItem name\n        fluidRow(\n          column(\n            #### Inputs(s) ----\n            width = 4, # must be between 1 and 12\n            box(\n              title = \"Data selection\",\n              status = \"primary\",\n              width = 12,\n              selectInput(\n                \"tab_map_select\",\n                label = \"Select a variable\",\n                choices = setNames(names(variable_names), variable_names)\n              ),\n              uiOutput(\"tab_map_desc\")\n            ),\n            box(\n              title = \"Map configuration\",\n              status = \"primary\",\n              width = 12,\n              radioButtons(\n                \"tab_map_aggr\",\n                label = \"Aggregation level\",\n                choices = c(\"Departments\", \"Regions\"),\n                selected = \"Departments\"\n              ),\n              selectInput(\n                \"tab_map_pal\",\n                label = \"Color palette\",\n                choices = pals,\n                selected = \"Reds\"\n              ) # end input\n            ) # end box\n          ), # end column\n          column(\n            #### Output(s) ----\n            width = 8,\n            box(\n              id = \"tab_map_box\",\n              status = \"primary\",\n              headerBorder = FALSE,\n              collapsible = FALSE,\n              width = 12,\n              leaflet::leafletOutput(\"tab_map_map\", height = \"800px\", width = \"100%\")\n            ) # end box\n          ) # end column\n        ) # end fluidRow\n      ) # end tabItem\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n  ### Define & estimate model ----\n  mparams &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(data_guerry)[c(x, y)]\n    dt_labels &lt;- sf::st_drop_geometry(data_guerry)[c(\"Department\", \"Region\")]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    form &lt;- as.formula(paste(x, \"~\", paste(y, collapse = \" + \")))\n    mod &lt;- lm(form, data = dt)\n    \n    list(\n      x = x,\n      y = y,\n      data = dt,\n      data_labels = dt_labels,\n      model = mod\n    )\n  }) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n  \n  ### Pair diagram ----\n  output$pairplot &lt;- plotly::renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    p &lt;- GGally::ggpairs(\n      params$data,\n      axisLabels = \"none\",\n      lower = list(\n        continuous = function(data, mapping, ...) {\n          ggplot(data, mapping) +\n            suppressWarnings(geom_point(\n              aes(text = paste0(\n                \"Department: \", \n                dt_labels[[\"Department\"]],\n                \"&lt;br&gt;Region: \", \n                dt_labels[[\"Region\"]])),\n              color = \"black\"\n            ))\n        }\n      )\n    )\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Coefficientplot ----\n  output$coefficientplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    x &lt;- params$x\n    y &lt;- params$y\n    \n    \n    p &lt;- plot(parameters::model_parameters(params$model))\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Scatterplot ----\n  output$scatterplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    x &lt;- params$x \n    y &lt;- params$y\n    \n    \n    if (length(y) == 1) {\n      p &lt;- ggplot(params$data, \n                  aes(x = .data[[params$x]], \n                      y = .data[[params$y]])) +\n        geom_point(aes(text = paste0(\"Department: \", \n                                     dt_labels[[\"Department\"]],\n                                     \"&lt;br&gt;Region: \", \n                                     dt_labels[[\"Region\"]])),\n                   color = \"black\") +\n        geom_smooth() + \n        geom_smooth(method='lm') +\n        theme_light()\n    } else {\n      p &lt;- ggplot() +\n        theme_void() +\n        annotate(\"text\", \n                 label = \"Cannot create scatterplot.\\nMore than two variables selected.\", \n                 x = 0, y = 0, \n                 size = 5, \n                 colour = \"red\",\n                 hjust = 0.5,\n                 vjust = 0.5) +\n        xlab(NULL)\n      \n    }\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Table: Regression ----\n  output$tableregression &lt;- renderUI({\n    params &lt;- mparams()\n    HTML(modelsummary(\n      dvnames(list(params$model)),\n      gof_omit = \"AIC|BIC|Log|Adj|RMSE\"\n    ))\n  })\n  \n  ### Plot: Normality residuals ----\n  output$normality &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_normality(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Outliers ----\n  output$outliers &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_outliers(params$model), show_labels = FALSE)\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$x &lt;- \"Leverage\"\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Heteroskedasticity ----\n  output$heteroskedasticity &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_heteroskedasticity(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$y &lt;- \"Sqrt. |Std. residuals|\" # ggplotly doesn't support expressions\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  \n  ## 4.3 Map data ----\n  \n  # Render description of selected variable\n  output$tab_map_desc &lt;- renderUI({\n    HTML(variable_desc[[input$tab_map_select]]$desc)\n  })\n  \n  # Select polygon based on aggregation level\n  poly &lt;- reactive({\n    if (identical(input$tab_map_aggr, \"Regions\")) {\n      data_guerry_region\n    } else {\n      data_guerry\n    }\n  })\n  \n  # Select palette based on input\n  palette &lt;- reactive({\n    pal &lt;- input$tab_map_pal\n    if (pal %in% pals$Viridis) {\n      pal &lt;- viridis::viridis_pal(option = tolower(pal))(5)\n    }\n    pal\n  }) %&gt;%\n    bindEvent(input$tab_map_pal)\n  \n  # Compile parameters for leaflet rendering\n  params &lt;- reactive({\n    poly &lt;- st_transform(poly(), 4326)\n    pal &lt;- palette()\n    var &lt;- input$tab_map_select\n    \n    values &lt;- as.formula(paste0(\"~\", var))\n    pal &lt;- colorNumeric(palette = pal, domain = NULL)\n    \n    reg &lt;- poly[[\"Region\"]]\n    dep &lt;- poly[[\"Department\"]]\n    val &lt;- poly[[var]]\n    \n    if (is.null(dep)) {\n      dep &lt;- rep(NA, nrow(poly))\n    }\n    \n    # Create labels that are nicely aligned in a grid\n    labels &lt;- mapply(\n      function(reg, dep, val) {\n        HTML(as.character(tags$table(\n          tags$tr(\n            style = \"line-height: 10px\",\n            tags$td(tags$b(\"Region: \")),\n            tags$td(reg)\n          ),\n          if (!is.na(dep)) {\n            tags$tr(\n              style = \"line-height: 10px\",\n              tags$td(tags$b(\"Department: \")),\n              tags$td(dep)\n            )\n          },\n          tags$tr(\n            style = \"line-height: 10px\",\n            tags$td(tags$b(paste0(variable_desc[[var]]$lgd, \": \"))),\n            tags$td(round(val, 2))\n          )\n        )))\n      },\n      reg = reg, dep = dep, val = val,\n      SIMPLIFY = FALSE,\n      USE.NAMES = FALSE\n    )\n    \n    list(\n      poly = poly,\n      var = var,\n      pal = pal,\n      values = values,\n      labels = labels\n    )\n  })\n  \n  # Render leaflet for the first time\n  output$tab_map_map &lt;- leaflet::renderLeaflet({\n    # Isolate call to params() to prevent render function to be executed\n    # every time params() is invalidated. No dependency is made.\n    params &lt;- isolate(params())\n    leaflet(data = params$poly) %&gt;%\n      addProviderTiles(\"OpenStreetMap.France\", group = \"OSM\") %&gt;%\n      addProviderTiles(\"OpenTopoMap\", group = \"OTM\") %&gt;%\n      addProviderTiles(\"Stamen.TonerLite\", group = \"Stamen Toner\") %&gt;%\n      addProviderTiles(\"GeoportailFrance.orthos\", group = \"Orthophotos\") %&gt;%\n      addLayersControl(baseGroups = c(\"OSM\", \"OTM\",\n                                      \"Stamen Toner\", \"Orthophotos\")) %&gt;%\n      setView(lng = 3, lat = 47, zoom = 5) %&gt;%\n      addPolygons(\n        fillColor = as.formula(paste0(\"~params$pal(\", params$var, \")\")),\n        fillOpacity = 0.7,\n        weight = 1,\n        color = \"black\",\n        opacity = 0.5,\n        label = params$labels,\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"black\",\n          opacity = 0.5,\n          fillOpacity = 1,\n          bringToFront = TRUE,\n          sendToBack = TRUE\n        )\n      ) %&gt;%\n      addLegend(\n        position = \"bottomright\",\n        pal = params$pal,\n        values = params$values,\n        opacity = 0.9,\n        title = variable_desc[[params$var]]$lgd,\n        labFormat = labelFormat(suffix = variable_desc[[params$var]]$unit)\n      )\n  })\n  \n  # Create a leaflet proxy. Proxies update map values without re-rendering the\n  # entire map, thus increasing performance.\n  observe({\n    params &lt;- params()\n    leafletProxy(\"tab_map_map\", data = params$poly) %&gt;%\n      clearShapes() %&gt;%\n      clearControls() %&gt;%\n      addPolygons(\n        fillColor = as.formula(paste0(\"~params$pal(\", params$var, \")\")),\n        fillOpacity = 0.7,\n        weight = 1,\n        color = \"black\",\n        opacity = 0.5,\n        label = params$labels,\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"black\",\n          opacity = 0.5,\n          fillOpacity = 1,\n          bringToFront = TRUE,\n          sendToBack = TRUE\n        )\n      ) %&gt;%\n      addLegend(\n        position = \"bottomright\",\n        na.label = \"No data\",\n        pal = params$pal,\n        values = params$values,\n        opacity = 0.9,\n        title = variable_desc[[params$var]]$lgd,\n        labFormat = labelFormat(suffix = variable_desc[[params$var]]$unit)\n      )\n  })\n}\n\nshinyApp(ui, server)",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#leaflet-events",
    "href": "06-mapping.html#leaflet-events",
    "title": "Mapping data & advanced visualization",
    "section": "9.1 Leaflet events",
    "text": "9.1 Leaflet events\n\nLeaflet events are accessed like so:\n\n\ninput$&lt;Map ID&gt;_&lt;Object type&gt;_&lt;Event type&gt;\n\n\nMap ID refers to the ID given to the Leaflet widget, in our case this is map_exp",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#leaflet-object-types",
    "href": "06-mapping.html#leaflet-object-types",
    "title": "Mapping data & advanced visualization",
    "section": "9.2 Leaflet object types",
    "text": "9.2 Leaflet object types\n\nObject type refers to a geometry type, can be one of:\n\nmarker for points\nshape for polygons and lines\ngeojson and topojson for data that was passed in GeoJSON or TopoJSON format",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#leaflet-event-types",
    "href": "06-mapping.html#leaflet-event-types",
    "title": "Mapping data & advanced visualization",
    "section": "9.3 Leaflet event types",
    "text": "9.3 Leaflet event types\n\nEvent type refers to the action that is performed on the geometry, one of:\n\nclick\nmouseover\nmouseout",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#other-events",
    "href": "06-mapping.html#other-events",
    "title": "Mapping data & advanced visualization",
    "section": "9.4 Other events",
    "text": "9.4 Other events\n\nAdditionally, Leaflet has some more general events:\n\ninput$&lt;Map ID&gt;_click triggers when the background of the map is clicked\ninput$&lt;Map ID&gt;_bounds provides the bounding box of the current view\ninput$&lt;Map ID&gt;_zoom provides the current zoom level\ninput$&lt;Map ID&gt;_center provides the center point of the current view\n\nQuestion: When does input$tab_map_map_marker_click trigger?",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#events-in-practice",
    "href": "06-mapping.html#events-in-practice",
    "title": "Mapping data & advanced visualization",
    "section": "9.5 Events in practice",
    "text": "9.5 Events in practice\n\nThe output of these Leaflet events usually contain an ID, Latitude and Longitude:\n\n\ninput$tab_map_map_shape_click\n\n$id\nNULL\n\n$.nonce\n[1] 0.05045395\n\n$lat\n[1] 49.0032\n\n$lng\n[1] -1.140568",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#clear-objects",
    "href": "06-mapping.html#clear-objects",
    "title": "Mapping data & advanced visualization",
    "section": "9.6 Clear objects",
    "text": "9.6 Clear objects\n\nIn the following code chunk, we add a marker whenever we click on a polygon on the Leaflet map\n\nCapture the click input\nRemove previous markers\nAdd a new marker using the click coordinates\n\n\n\nobserve({\n1    click &lt;- input$tab_map_map_shape_click\n2    req(click)\n3    leafletProxy(\"tab_map_map\") %&gt;%\n4        clearMarkers() %&gt;%\n5        addMarkers(lng = click$lng, lat = click$lat)\n})\n\n\n1\n\nStore event object. The event is invalidated when a user clicks on a shape in the tab_map_map leaflet widget\n\n2\n\nCancel the observer when the click object is not “truthy” (see ?isTruthy). If nothing is clicked, the observer should not be run.\n\n3\n\nCreate a Leaflet proxy\n\n4\n\nClear the previous marker\n\n5\n\nAdd a new marker\n\n\n\n\n\n\nHere, we remove all markers in order to add a new one, but we can also be more careful in deleting elements\n\nleaflet::clear functions remove all elements of a geometry type\nleaflet::remove functions remove one element by layer ID\n\n\n\n\n\n\n\n\nNote\n\n\n\nleaflet::remove functions need a layer ID to work! You can set them using the layerId argument in leaflet::add functions, e.g. leaflet::addMarkers(..., layerId = \"marker1\")\n\n\n\n# Add a new marker\nobserve({\n    click &lt;- input$tab_map_map_shape_click\n    req(click)\n1    id &lt;- paste0(click$lng, click$lat)\n    leafletProxy(\"tab_map_map\") %&gt;%\n2        addMarkers(lng = click$lng, lat = click$lat, layerId = id)\n})\n\n# Delete an existing marker\nobserve({\n    click &lt;- input$tab_map_map_marker_click\n    req(click)\n    leafletProxy(\"tab_map_map\") %&gt;%\n3        removeMarker(click$id)\n})\n\n\n1\n\nGenerate an ID from long/lat so we know exactly what element we are talking about\n\n2\n\nPass the generated ID to a marker that we add\n\n3\n\nWhen clicking on a new marker again, we can know exactly what marker to delete and do not need to delete everything\n\n\n\n\n\n\n\n\n\n\n\nBonus for the daring\n\n\n\n\n\n\nYou can create your own input events with a little bit of JavaScript!\nIn the code chunk below, we add a “mousemove” event, that triggers every time the mouse is moved on the Leaflet map\nNote the use of htmlwidgets::onRender() to execute a piece of JavaScript when the Leaflet widget renders\nNote the use of Shiny.onInputChange to create input events\nFurther reading: Joe Cheng - “Communicating with Shiny via JavaScript”\n\n\noutput$tab_map_map &lt;- renderLeaflet({\n    leaflet() %&gt;%\n        htmlwidgets::onRender(\"function(el, x) {\n      this.on('mousemove', function(e) {\n        var lng = e.latlng.lng;\n        var lat = e.latlng.lat;\n        var coord = [lng, lat];            // capture long and lat\n        Shiny.onInputChange('tab_map_map', coord)   // send coordinates to Shiny\n      });\n      this.on('mouseout', function(e) {\n        Shiny.onInputChange('tab_map_map', null)    // reset coordinates when mouse leaves map\n      })\n    }\")\n})",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#full-code-6",
    "href": "06-mapping.html#full-code-6",
    "title": "Mapping data & advanced visualization",
    "section": "9.7 Full code",
    "text": "9.7 Full code\n\n\nFull code including Shiny events\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(fresh)\nlibrary(waiter)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(viridis)\nlibrary(leaflet)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(datawizard)\nlibrary(parameters)\nlibrary(performance)\nlibrary(modelsummary)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\nvariable_desc &lt;- list(\n  Crime_pers = list(\n    title = \"Crime against persons\",\n    desc = as.character(p(tags$b(\"Crime against persons:\"), \"Population per crime against persons\", hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Crime_prop = list(\n    title = \"Crime against property\",\n    desc = as.character(p(tags$b(\"Crime against property:\"), \"Population per crime against property\", hr(), helpText(\"Source: Compte général, 1825-1830\"))),\n    lgd = \"Pop. per crime\",\n    unit = \"\"\n  ),\n  Literacy = list(\n    title = \"Literacy\",\n    desc = as.character(p(tags$b(\"Percent Read & Write:\"), \"Percent of military conscripts who can read and write\", hr(), helpText(\"Source: Table A2 in Guerry (1833)\"))),\n    lgd = \"Literacy\",\n    unit = \" %\"\n  ),\n  Donations = list(\n    title = \"Donations to the poor\",\n    desc = as.character(p(tags$b(\"Donations to the poor\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bulletin des lois\"))),\n    lgd = \"Donations\",\n    unit = \"\"\n  ),\n  Infants = list(\n    title = \"Illegitimate births\",\n    desc = as.character(p(tags$b(\"Population per illegitimate birth\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Bureau des Longitudes, 1817-1821\"))),\n    lgd = \"Pop. per birth\",\n    unit = \"\"\n  ),\n  Suicides = list(\n    title = \"Suicides\",\n    desc = as.character(p(tags$b(\"Population per suicide\"), hr(), helpText(\"Source: Table A2 in Guerry (1833). Compte général, 1827-1830\"))),\n    lgd = \"Pop. per suicide\",\n    unit = \"\"\n  ),\n  Wealth = list(\n    title = \"Tax / capita\",\n    desc = as.character(p(tags$b(\"Per capita tax on personal property:\"), \"A ranked index based on taxes on personal and movable property per inhabitant\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Tax / capita\",\n    unit = \"\"\n  ),\n  Commerce = list(\n    title = \"Commerce & Industry\",\n    desc = as.character(p(tags$b(\"Commerce & Industry:\"), \"Commerce and Industry, measured by the rank of the number of patents / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833)\"))),\n    lgd = \"Patents / capita\",\n    unit = \"\"\n  ),\n  Clergy = list(\n    title = \"Clergy\",\n    desc = as.character(p(tags$b(\"Distribution of clergy:\"), \"Distribution of clergy, measured by the rank of the number of Catholic priests in active service / population\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Almanach officiel du clergy, 1829\"))),\n    lgd = \"Priests / capita\",\n    unit = \"\"\n  ),\n  Crime_parents = list(\n    title = \"Crime against parents\",\n    desc = as.character(p(tags$b(\"Crime against parents:\"), \"Crimes against parents, measured by the rank of the ratio of crimes against parents to all crimes \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Share of crimes\",\n    unit = \" %\"\n  ),\n  Infanticide = list(\n    title = \"Infanticides\",\n    desc = as.character(p(tags$b(\"Infanticides per capita:\"), \"Ranked ratio of number of infanticides to population \\u2013 Average for the years 1825-1830\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte général\"))),\n    lgd = \"Infanticides / capita\",\n    unit = \"\"\n  ),\n  Donation_clergy = list(\n    title = \"Donations to the clergy\",\n    desc = as.character(p(tags$b(\"Donations to the clergy:\"), \"Ranked ratios of the number of bequests and donations inter vivios to population \\u2013 Average for the years 1815-1824\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Bull. des lois, ordunn. d’autorisation\"))),\n    lgd = \"Donations / capita\",\n    unit = \"\"\n  ),\n  Lottery = list(\n    title = \"Wager on Royal Lottery\",\n    desc = as.character(p(tags$b(\"Per capita wager on Royal Lottery:\"), \"Ranked ratio of the proceeds bet on the royal lottery to population \\u2013 Average for the years 1822-1826\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte rendu par le ministre des finances\"))),\n    lgd = \"Wager / capita\",\n    unit = \"\"\n  ),\n  Desertion = list(\n    title = \"Military desertion\",\n    desc = as.character(p(tags$b(\"Military desertion:\"), \"Military disertion, ratio of the number of young soldiers accused of desertion to the force of the military contingent, minus the deficit produced by the insufficiency of available billets\\u2013 Average of the years 1825-1827\", hr(), helpText(\"Source: Table A1 in Guerry (1833). Compte du ministère du guerre, 1829 état V\"))),\n    lgd = \"No. of desertions\",\n    unit = \"\"\n  ),\n  Instruction = list(\n    title = \"Instruction\",\n    desc = as.character(p(tags$b(\"Instruction:\"), \"Ranks recorded from Guerry's map of Instruction. Note: this is inversely related to literacy (as defined here)\")),\n    lgd = \"Instruction\",\n    unit = \"\"\n  ),\n  Prostitutes = list(\n    title = \"Prostitutes\",\n    desc = as.character(p(tags$b(\"Prostitutes in Paris:\"), \"Number of prostitutes registered in Paris from 1816 to 1834, classified by the department of their birth\", hr(), helpText(\"Source: Parent-Duchatelet (1836), De la prostitution en Paris\"))),\n    lgd = \"No. of prostitutes\",\n    unit = \"\"\n  ),\n  Distance = list(\n    title = \"Distance to paris\",\n    desc = as.character(p(tags$b(\"Distance to Paris (km):\"), \"Distance of each department centroid to the centroid of the Seine (Paris)\", hr(), helpText(\"Source: Calculated from department centroids\"))),\n    lgd = \"Distance\",\n    unit = \" km\"\n  ),\n  Area = list(\n    title = \"Area\",\n    desc = as.character(p(tags$b(\"Area (1000 km\\u00b2)\"), hr(), helpText(\"Source: Angeville (1836)\"))),\n    lgd = \"Area\",\n    unit = \" km\\u00b2\"\n  ),\n  Pop1831 = list(\n    title = \"Population\",\n    desc = as.character(p(tags$b(\"Population in 1831, in 1000s\"), hr(), helpText(\"Source: Taken from Angeville (1836), Essai sur la Statistique de la Population français\"))),\n    lgd = \"Population (in 1000s)\",\n    unit = \"\"\n  )\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prep data (Tab: Map data) ----\ndata_guerry_region &lt;- data_guerry %&gt;%\n  group_by(Region) %&gt;%\n  summarise(across(\n    .cols = all_of(names(variable_names)),\n    function(x) {\n      if (cur_column() %in% c(\"Area\", \"Pop1831\")) {\n        sum(x)\n      } else {\n        mean(x)\n      }\n    }\n  ))\n\n## Prepare palettes ----\n## Used for mapping\npals &lt;- list(\n  Sequential = RColorBrewer::brewer.pal.info %&gt;%\n    filter(category %in% \"seq\") %&gt;%\n    row.names(),\n  Viridis = c(\"Magma\", \"Inferno\", \"Plasma\", \"Viridis\",\n              \"Cividis\", \"Rocket\", \"Mako\", \"Turbo\")\n)\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      menuItem(tabName = \"tab_map\", text = \"Map data\", icon = icon(\"map\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      ),\n      ### 3.3.3 Tab: Model data ----\n      tabItem(\n        tabName = \"tab_model\",\n        fluidRow(\n          column(\n            width = 6,\n            #### Inputs(s) ----\n            box(\n              width = 12,\n              title = \"Select variables\",\n              status = \"primary\",\n              shinyWidgets::pickerInput(\n                \"model_x\",\n                label = \"Select a dependent variable\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(liveSearch = TRUE),\n                selected = \"Literacy\"\n              ),\n              shinyWidgets::pickerInput(\n                \"model_y\",\n                label = \"Select independent variables\",\n                choices = setNames(names(variable_names), variable_names),\n                options = shinyWidgets::pickerOptions(\n                  actionsBox = TRUE,\n                  liveSearch = TRUE,\n                  selectedTextFormat = \"count\",\n                  countSelectedText = \"{0} variables selected\",\n                  noneSelectedText = \"No variables selected\"\n                ),\n                multiple = TRUE,\n                selected = \"Commerce\"\n              ),\n              shinyWidgets::prettyCheckbox(\n                \"model_std\",\n                label = \"Standardize variables?\",\n                value = TRUE,\n                status = \"primary\",\n                shape = \"curve\"\n              ),\n              hr(),\n              actionButton(\n                \"refresh\",\n                label = \"Apply changes\",\n                icon = icon(\"refresh\"),\n                flat = TRUE\n              )\n            ),\n            #### Outputs(s) ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model analysis\",\n              side = \"right\",\n              width = 12,\n              ##### Tabpanel: Coefficient plot ----\n              tabPanel(\n                title = \"Plot: Coefficients\",\n                plotly::plotlyOutput(\"coefficientplot\")\n              ),\n              ##### Tabpanel: Scatterplot ----\n              tabPanel(\n                title = \"Plot: Scatterplot\",\n                plotly::plotlyOutput(\"scatterplot\")\n              ),\n              ##### Tabpanel: Table: Regression ----\n              tabPanel(\n                title = \"Table: Model\",\n                htmlOutput(\"tableregression\")\n              )\n            )\n          ),\n          column(\n            width = 6,\n            ##### Box: Pair diagramm ----\n            box(\n              width = 12,\n              title = \"Pair diagram\",\n              status = \"primary\",\n              plotly::plotlyOutput(\"pairplot\")\n            ),\n            ##### TabBox: Model diagnostics ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model diagnostics\",\n              width = 12,\n              side = \"right\",\n              tabPanel(\n                title = \"Normality\",\n                plotly::plotlyOutput(\"normality\")\n              ),\n              tabPanel(\n                title = \"Outliers\",\n                plotly::plotlyOutput(\"outliers\")\n              ),\n              tabPanel(\n                title = \"Heteroskedasticity\",\n                plotly::plotlyOutput(\"heteroskedasticity\")\n              )\n            )\n          )\n        )\n      ),\n      ### 3.3.4 Tab: Map data ----\n      tabItem(\n        tabName = \"tab_map\", # must correspond to related menuItem name\n        fluidRow(\n          column(\n            #### Inputs(s) ----\n            width = 4, # must be between 1 and 12\n            box(\n              title = \"Data selection\",\n              status = \"primary\",\n              width = 12,\n              selectInput(\n                \"tab_map_select\",\n                label = \"Select a variable\",\n                choices = setNames(names(variable_names), variable_names)\n              ),\n              uiOutput(\"tab_map_desc\")\n            ),\n            box(\n              title = \"Map configuration\",\n              status = \"primary\",\n              width = 12,\n              radioButtons(\n                \"tab_map_aggr\",\n                label = \"Aggregation level\",\n                choices = c(\"Departments\", \"Regions\"),\n                selected = \"Departments\"\n              ),\n              selectInput(\n                \"tab_map_pal\",\n                label = \"Color palette\",\n                choices = pals,\n                selected = \"Reds\"\n              ) # end input\n            ) # end box\n          ), # end column\n          column(\n            #### Output(s) ----\n            width = 8,\n            box(\n              id = \"tab_map_box\",\n              status = \"primary\",\n              headerBorder = FALSE,\n              collapsible = FALSE,\n              width = 12,\n              leaflet::leafletOutput(\"tab_map_map\", height = \"800px\", width = \"100%\")\n            ) # end box\n          ) # end column\n        ) # end fluidRow\n      ) # end tabItem\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n  ### Define & estimate model ----\n  mparams &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(data_guerry)[c(x, y)]\n    dt_labels &lt;- sf::st_drop_geometry(data_guerry)[c(\"Department\", \"Region\")]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    form &lt;- as.formula(paste(x, \"~\", paste(y, collapse = \" + \")))\n    mod &lt;- lm(form, data = dt)\n    \n    list(\n      x = x,\n      y = y,\n      data = dt,\n      data_labels = dt_labels,\n      model = mod\n    )\n  }) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n  \n  ### Pair diagram ----\n  output$pairplot &lt;- plotly::renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    p &lt;- GGally::ggpairs(\n      params$data,\n      axisLabels = \"none\",\n      lower = list(\n        continuous = function(data, mapping, ...) {\n          ggplot(data, mapping) +\n            suppressWarnings(geom_point(\n              aes(text = paste0(\n                \"Department: \", \n                dt_labels[[\"Department\"]],\n                \"&lt;br&gt;Region: \", \n                dt_labels[[\"Region\"]])),\n              color = \"black\"\n            ))\n        }\n      )\n    )\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Coefficientplot ----\n  output$coefficientplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    x &lt;- params$x\n    y &lt;- params$y\n    \n    \n    p &lt;- plot(parameters::model_parameters(params$model))\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Scatterplot ----\n  output$scatterplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    x &lt;- params$x \n    y &lt;- params$y\n    \n    \n    if (length(y) == 1) {\n      p &lt;- ggplot(params$data, \n                  aes(x = .data[[params$x]], \n                      y = .data[[params$y]])) +\n        geom_point(aes(text = paste0(\"Department: \", \n                                     dt_labels[[\"Department\"]],\n                                     \"&lt;br&gt;Region: \", \n                                     dt_labels[[\"Region\"]])),\n                   color = \"black\") +\n        geom_smooth() + \n        geom_smooth(method='lm') +\n        theme_light()\n    } else {\n      p &lt;- ggplot() +\n        theme_void() +\n        annotate(\"text\", \n                 label = \"Cannot create scatterplot.\\nMore than two variables selected.\", \n                 x = 0, y = 0, \n                 size = 5, \n                 colour = \"red\",\n                 hjust = 0.5,\n                 vjust = 0.5) +\n        xlab(NULL)\n      \n    }\n    \n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      geom_point(color = \"white\") +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Table: Regression ----\n  output$tableregression &lt;- renderUI({\n    params &lt;- mparams()\n    HTML(modelsummary(\n      dvnames(list(params$model)),\n      gof_omit = \"AIC|BIC|Log|Adj|RMSE\"\n    ))\n  })\n  \n  ### Plot: Normality residuals ----\n  output$normality &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_normality(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Outliers ----\n  output$outliers &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_outliers(params$model), show_labels = FALSE)\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$x &lt;- \"Leverage\"\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Heteroskedasticity ----\n  output$heteroskedasticity &lt;- renderPlotly({\n    params &lt;- mparams()\n    p &lt;- plot(performance::check_heteroskedasticity(params$model))\n    if (isTRUE(input$dark_mode)) p &lt;- p +\n      dark_theme_gray() +\n      theme(plot.background = element_rect(fill = \"#343a40\"))\n    p$labels$y &lt;- \"Sqrt. |Std. residuals|\" # ggplotly doesn't support expressions\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  \n  ## 4.3 Map data ----\n  \n  # Render description of selected variable\n  output$tab_map_desc &lt;- renderUI({\n    HTML(variable_desc[[input$tab_map_select]]$desc)\n  })\n  \n  # Select polygon based on aggregation level\n  poly &lt;- reactive({\n    if (identical(input$tab_map_aggr, \"Regions\")) {\n      data_guerry_region\n    } else {\n      data_guerry\n    }\n  })\n  \n  # Select palette based on input\n  palette &lt;- reactive({\n    pal &lt;- input$tab_map_pal\n    if (pal %in% pals$Viridis) {\n      pal &lt;- viridis::viridis_pal(option = tolower(pal))(5)\n    }\n    pal\n  }) %&gt;%\n    bindEvent(input$tab_map_pal)\n  \n  # Compile parameters for leaflet rendering\n  params &lt;- reactive({\n    poly &lt;- st_transform(poly(), 4326)\n    pal &lt;- palette()\n    var &lt;- input$tab_map_select\n    \n    values &lt;- as.formula(paste0(\"~\", var))\n    pal &lt;- colorNumeric(palette = pal, domain = NULL)\n    \n    reg &lt;- poly[[\"Region\"]]\n    dep &lt;- poly[[\"Department\"]]\n    val &lt;- poly[[var]]\n    \n    if (is.null(dep)) {\n      dep &lt;- rep(NA, nrow(poly))\n    }\n    \n    # Create labels that are nicely aligned in a grid\n    labels &lt;- mapply(\n      function(reg, dep, val) {\n        HTML(as.character(tags$table(\n          tags$tr(\n            style = \"line-height: 10px\",\n            tags$td(tags$b(\"Region: \")),\n            tags$td(reg)\n          ),\n          if (!is.na(dep)) {\n            tags$tr(\n              style = \"line-height: 10px\",\n              tags$td(tags$b(\"Department: \")),\n              tags$td(dep)\n            )\n          },\n          tags$tr(\n            style = \"line-height: 10px\",\n            tags$td(tags$b(paste0(variable_desc[[var]]$lgd, \": \"))),\n            tags$td(round(val, 2))\n          )\n        )))\n      },\n      reg = reg, dep = dep, val = val,\n      SIMPLIFY = FALSE,\n      USE.NAMES = FALSE\n    )\n    \n    list(\n      poly = poly,\n      var = var,\n      pal = pal,\n      values = values,\n      labels = labels\n    )\n  })\n  \n  # Render leaflet for the first time\n  output$tab_map_map &lt;- leaflet::renderLeaflet({\n    # Isolate call to params() to prevent render function to be executed\n    # every time params() is invalidated. No dependency is made.\n    params &lt;- isolate(params())\n    leaflet(data = params$poly) %&gt;%\n      addProviderTiles(\"OpenStreetMap.France\", group = \"OSM\") %&gt;%\n      addProviderTiles(\"OpenTopoMap\", group = \"OTM\") %&gt;%\n      addProviderTiles(\"Stamen.TonerLite\", group = \"Stamen Toner\") %&gt;%\n      addProviderTiles(\"GeoportailFrance.orthos\", group = \"Orthophotos\") %&gt;%\n      addLayersControl(baseGroups = c(\"OSM\", \"OTM\",\n                                      \"Stamen Toner\", \"Orthophotos\")) %&gt;%\n      setView(lng = 3, lat = 47, zoom = 5) %&gt;%\n      addPolygons(\n        fillColor = as.formula(paste0(\"~params$pal(\", params$var, \")\")),\n        fillOpacity = 0.7,\n        weight = 1,\n        color = \"black\",\n        opacity = 0.5,\n        label = params$labels,\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"black\",\n          opacity = 0.5,\n          fillOpacity = 1,\n          bringToFront = TRUE,\n          sendToBack = TRUE\n        )\n      ) %&gt;%\n      addLegend(\n        position = \"bottomright\",\n        pal = params$pal,\n        values = params$values,\n        opacity = 0.9,\n        title = variable_desc[[params$var]]$lgd,\n        labFormat = labelFormat(suffix = variable_desc[[params$var]]$unit)\n      )\n  })\n  \n  # Create a leaflet proxy. Proxies update map values without re-rendering the\n  # entire map, thus increasing performance.\n  observe({\n    params &lt;- params()\n    leafletProxy(\"tab_map_map\", data = params$poly) %&gt;%\n      clearShapes() %&gt;%\n      clearControls() %&gt;%\n      addPolygons(\n        fillColor = as.formula(paste0(\"~params$pal(\", params$var, \")\")),\n        fillOpacity = 0.7,\n        weight = 1,\n        color = \"black\",\n        opacity = 0.5,\n        label = params$labels,\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"black\",\n          opacity = 0.5,\n          fillOpacity = 1,\n          bringToFront = TRUE,\n          sendToBack = TRUE\n        )\n      ) %&gt;%\n      addLegend(\n        position = \"bottomright\",\n        na.label = \"No data\",\n        pal = params$pal,\n        values = params$values,\n        opacity = 0.9,\n        title = variable_desc[[params$var]]$lgd,\n        labFormat = labelFormat(suffix = variable_desc[[params$var]]$unit)\n      )\n  })\n  \n  \n  # Add a new marker\n  observe({\n    click &lt;- input$tab_map_map_shape_click\n    req(click)\n    id &lt;- paste0(click$lng, click$lat)\n    leafletProxy(\"tab_map_map\") %&gt;%\n      addMarkers(lng = click$lng, lat = click$lat, layerId = id)\n  })\n  \n  # Delete an existing marker\n  observe({\n    click &lt;- input$tab_map_map_marker_click\n    req(click)\n    leafletProxy(\"tab_map_map\") %&gt;%\n      removeMarker(click$id)\n  })\n}\n\nshinyApp(ui, server)",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "06-mapping.html#exercises-3",
    "href": "06-mapping.html#exercises-3",
    "title": "Mapping data & advanced visualization",
    "section": "9.8 Exercises",
    "text": "9.8 Exercises\n\n\n\n\n\n\nExercise 9\n\n\n\nWhen does the event input$map_shape_mouseout send information to the server?\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nA Leaflet input event is structured as follows: input$&lt;mapid&gt;_&lt;geometry type&gt;_&lt;event type&gt;.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nmap_exp refers to the target leaflet map\nshape refers to the target map object (in this case a polygon or a line)\nmouseout refers to the event type\ninput$map_exp_shape_mouseout triggers whenever we move out of the boundaries of a polygon on the Leaflet map with the ID map_exp\n\n\n\n\n\n\n\n\n\nExercise 10\n\n\n\nPrint the current mouse coordinates to the console every time a polygon on the map is clicked.\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nYou can access click coordinates using the map event input$tab_map_map_shape_click\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nTo capture the the mouse coordinates we need to access the Leaflet event input$tab_map_map_shape_click. Printing to the console is done in an observer as it triggers side effects and does not create a reactive object.\n\nobserve({\n    click &lt;- input$tab_map_map_shape_click\n    cat(paste(\n        \"Click on tab_map_map detected\",\n        paste(\"Lon:\", click$lng),\n        paste(\"Lat:\", click$lat),\n        \"\\n\",\n        sep = \"\\n\"\n    ))\n})",
    "crumbs": [
      "Mapping data & advanced visualization"
    ]
  },
  {
    "objectID": "08-deployment.html",
    "href": "08-deployment.html",
    "title": "Strengthen & Deploy",
    "section": "",
    "text": "You will learn how to:",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "08-deployment.html#strengthen",
    "href": "08-deployment.html#strengthen",
    "title": "Strengthen & Deploy",
    "section": "1.1 Strengthen",
    "text": "1.1 Strengthen\n\nBefore it’s time to deploy, it’s a good idea to make sure your app passes the test of publicity\nDepending on the use case and target group, a deployed app should be:\n\nfast: remote communication can make your app slower than on a local host\nscalable: a high workload can crash your app\nstable: errors also crash your app",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "08-deployment.html#tools-to-strengthen",
    "href": "08-deployment.html#tools-to-strengthen",
    "title": "Strengthen & Deploy",
    "section": "1.2 Tools to strengthen",
    "text": "1.2 Tools to strengthen\n\nThere are a lot of Shiny extensions that help in strengthening a Shiny app, some of which we will address:\n\nprofvis: Profiles a Shiny app and creates performance visualizations\nreactlog: Logs reactivity of your Shiny app and creates a dynamic reactive graph\nshinyloadtest: Simulates a workload of users and determines how well your app is suitable for such a workload\nshinytest: Creates snapshots and compares the visual appearance of them in subsequent runs\nshiny::testServer(): Performs programmatic tests using the Shiny server logic of an app",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "08-deployment.html#further-resources",
    "href": "08-deployment.html#further-resources",
    "title": "Strengthen & Deploy",
    "section": "1.3 Further resources",
    "text": "1.3 Further resources\n\nChapters 11 and 13 of Colin Fay’s Engineering Production-Grade Shiny Apps\nChapters 21 and 23 of Hadley Wickham’s Mastering Shiny",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "08-deployment.html#using-the-profvis-package",
    "href": "08-deployment.html#using-the-profvis-package",
    "title": "Strengthen & Deploy",
    "section": "2.1 Using the profvis package",
    "text": "2.1 Using the profvis package\n\nSimply run your app within a profvis::profvis() call:\n\n\nprofvis({runApp()})\n\n\n\n\n\n\n\nNote\n\n\n\nIt is necessary to use runApp(), shinyApp() does not suffice!\n\n\n\nThen, perform some tasks in the Shiny app\nClose the app, and an HTML file will open that looks something like below:",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "08-deployment.html#interactive-debugging",
    "href": "08-deployment.html#interactive-debugging",
    "title": "Strengthen & Deploy",
    "section": "3.1 Interactive debugging",
    "text": "3.1 Interactive debugging\n\nInteractive debugging comes from base R and works just like that\nPut a call to browser() somewhere in your server function\nCode execution is interrupted on the spot and you can explore the server function in a “frozen” state\n\n\n\n\nAccessing input in Shiny browser call",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "08-deployment.html#logging",
    "href": "08-deployment.html#logging",
    "title": "Strengthen & Deploy",
    "section": "3.2 Logging",
    "text": "3.2 Logging\n\nIn base R, print debugging is frowned upon\nIn Shiny, print debugging can be a nice way to understand errors along a reactivity path (or to understand reactivity in general)",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "08-deployment.html#where-am-i",
    "href": "08-deployment.html#where-am-i",
    "title": "Strengthen & Deploy",
    "section": "3.3 Where am I?",
    "text": "3.3 Where am I?\n\nThat is a question you might ask yourself occasionally when encountering errors in Shiny\nThe whereami package can tell you exactly where you are\nMany R packages enable general logging (logging, logger, log4r), but whereami is especially suitable for Shiny\n\n\n\n\nLogs from logger\n\n\n\n\n\nLogs from whereami",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "08-deployment.html#reactivity-logging",
    "href": "08-deployment.html#reactivity-logging",
    "title": "Strengthen & Deploy",
    "section": "3.4 Reactivity logging",
    "text": "3.4 Reactivity logging\n\nReactivity logging means capturing and visualizing reactive dependencies in Shiny apps\nUseful for detecting overreactiveness and reactive instabilities\nReactivity logging can be done using the reactlog package\n\n\n3.4.1 Using the reactlog package\n\nRun reactlog::reactlog_enable() before running the Shiny app or set options(shiny.reactlog = TRUE)\nDo stuff in your Shiny app (particularly something that triggers dependencies!)\nRun shiny::reactlogShow() or reactlog::reactlog_show() after closing the app\nAlternatively, press Strg + F3 while the app is running",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "08-deployment.html#where-to-deploy",
    "href": "08-deployment.html#where-to-deploy",
    "title": "Strengthen & Deploy",
    "section": "4.1 Where to deploy",
    "text": "4.1 Where to deploy\n\nShiny app hosting\n\n\nName\nUse\nRequirements\n\n\n\n\nshinyapps.io\nCasual to professional applications\nrsconnect R package\n\n\nPosit Connect\nProfessional to corporate applications\nrsconnect R package\n\n\nShiny Server\nSetting up self-hosted Shiny servers\nShiny Server on a Linux server\n\n\nShinyProxy / Heroku\nDeployment of containerized applications\nDocker",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "08-deployment.html#shinyapps.io",
    "href": "08-deployment.html#shinyapps.io",
    "title": "Strengthen & Deploy",
    "section": "4.2 shinyapps.io",
    "text": "4.2 shinyapps.io\n\nA common choice for more casual Shiny apps is shinyapps.io\n\nIt requires not much technical knowledge to deploy\nIt does not require a pre-existing infrastructure (e.g., a server)\nIt offers a free plan\n\n\n\n\n\nShinyapps.io plans",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "08-deployment.html#rsconnect",
    "href": "08-deployment.html#rsconnect",
    "title": "Strengthen & Deploy",
    "section": "4.3 rsconnect",
    "text": "4.3 rsconnect\n\nBoth for Posit Connect and shinyapps.io you need the rsconnect package\nrsconnect enables the communication between the Posit services and R\n\n\n\nrsconnect is built around the deployApp(), deployAPI() and deployDoc() functions",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "08-deployment.html#creating-an-account",
    "href": "08-deployment.html#creating-an-account",
    "title": "Strengthen & Deploy",
    "section": "4.4 Creating an account",
    "text": "4.4 Creating an account\n\nBefore being able to deploy to Shinyapps, we need an account\nAccounts can be created per Email or using Google, Github or Clever\n\n\n\n\nShinyapps.io sign-up",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "08-deployment.html#connecting-r-to-shinyapps.io",
    "href": "08-deployment.html#connecting-r-to-shinyapps.io",
    "title": "Strengthen & Deploy",
    "section": "4.5 Connecting R to shinyapps.io",
    "text": "4.5 Connecting R to shinyapps.io\n\nJust with any interface, linking works using Tokens and Secrets\nOn your shinyapps dashboard, navigate to Account -&gt; Tokens on the sidebar\nClick on “Add Token”\nClick on “Show” next to your newly created token\nPaste the code into your console and execute\n\n\n\n\nShinyapps token to connect with rsconnect",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "08-deployment.html#deploy",
    "href": "08-deployment.html#deploy",
    "title": "Strengthen & Deploy",
    "section": "4.6 Deploy!",
    "text": "4.6 Deploy!\n\nTo verify that the verification process was successful we run:\n\n\nrsconnect::accounts()\n\n\nFinally, to deploy an app, we simply run deployApp() to deploy an app.R in the current working directory to shinyapps.io:\n\n\nrsconnect::deployApp()",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "08-dos-and-donts.html",
    "href": "08-dos-and-donts.html",
    "title": "Good practices when building your own app",
    "section": "",
    "text": "Learning outcomes:\n\nGood practices for Shiny programming\nTypical pitfalls to watch out for\nUseful everyday Shiny workflows",
    "crumbs": [
      "Good practices when building your own app"
    ]
  },
  {
    "objectID": "08-dos-and-donts.html#paul",
    "href": "08-dos-and-donts.html#paul",
    "title": "Good practices when building your own app",
    "section": "1 Paul",
    "text": "1 Paul\n\n1.1 Use Large Language Models (LLMs)",
    "crumbs": [
      "Good practices when building your own app"
    ]
  },
  {
    "objectID": "08-dos-and-donts.html#jonas",
    "href": "08-dos-and-donts.html#jonas",
    "title": "Good practices when building your own app",
    "section": "2 Jonas",
    "text": "2 Jonas\n\n2.1 Use the browser inspector\n\nBrowser inspectors are an extremely powerful tool that goes far beyond the scope of this workshop\nIt can be used to take a deep look at a website\n\nWhat colors and fonts are used?\nHow would the Shiny app look like on different screen sizes?\nHow would the Shiny app look like to color-blind people?\nHow are UI elements translated to HTML and CSS?\nHow are widths and heights translated to pixels?\nWhich HTTP requests are sent when running the Shiny app?\nDoes my website evoke any client-side errors?\n… and a lot more\n\nEvery popular browser has its own implementation of an inspector\n\nFirefox Page Inspector\nChrome DevTools\nOpera Web Inspector\nEdge Inspect Tool\nSafari Web Inspector\n\nInspectors are useful for:\n\nConveying an understanding of essential HTML and CSS\nFine-tuning the UI of a Shiny app\nImplementing corporate designs\n\nInspectors are excessive if:\n\nThe goal is primarily to get a functioning app\nExploring a new elaborate tool beyond Shiny is a bit too much\n\n\n\n\n2.2 Organize your code\n\nShiny code becomes messy really quick!\nIt is even more important than in normal code to keep code clean and tidy\nWhy should I organize my code?\n\nIt is easier for colleagues to quickly grasp what your code does\nIt is easier for you to get back to your project after some time\nProgramming with organized code is much faster and much more fun\n\n\n\n2.2.1 What does code organisation entail?\n\n2.2.1.1 Functional programming\n\nWrap code in functions if:\n\nIt is repeated more than two times\nIt is complex and might profit from abstraction\n\nBad:\n\n\nexp(mean(log(iris$Sepal.Length)))\nexp(mean(log(iris$Sepal.Width)))\nexp(mean(log(iris$Petal.Length)))\nexp(mean(log(iris$Petal.Width)))\n\n\nGood:\n\n\ngeometric_mean &lt;- function(x) exp(mean(log(x)))\nsummarize(iris, across(where(is.numeric), geometric_mean))\n\n\n\n2.2.1.2 Stick to a style guide\n\nAdopting a consistent coding style drastically improves readability for yourself and contributors\nThe styler and lintr packages automatically check your code for style inconsistencies, bad practictes, and possible syntactic/semantic errors\nThe following code is valid, but deciphering what’s going on might take a while\n\n\nui&lt;-fluidPage(selectInput(\"var\"\n            ,\"Variable\",names(mtcars))\n  ,numericInput(\"bins\",\"bins\",10,min= 1),plotOutput(\"hist\"))\nserver&lt;-\nfunction(\ninput,output,session\n) {\n  data&lt;-\n    reactive(\n             mtcars[[input$var]]\n    )\n  output$hist&lt;-\n    renderPlot(\n    {hist(data()\n          ,breaks=input$bins\n          ,main=input$var)},res =96\n)}\n\n\n\n2.2.1.3 Annotate your code\n\nEven in smaller apps, Shiny code is multiple hundred lines long\nRStudio annotations can help navigate large R code files\n\n\n# Header 1 ----\n## Header 1.1 ----\n### Header 1.1.1 ----\n### Header 1.1.2 ----\n# Header 2 ----\n\n\n\n\nExample of an RStudio outline\n\n\n\n\n2.2.1.4 Modularize your Shiny code\n\nIf your Shiny app is divided into multiple tabs or sections, it might make sense to wrap it into modules\nBy modularizing, you divide a large Shiny app into multiple smaller pieces that are isolated from each other\nModularization is a very advanced topic and there is an entire chapter in Mastering Shiny – but it is good to know that it’s possible\n\n\n\n\nExample of a modularized app\n\n\n\n\n2.2.1.5 Build your Shiny app as a package\n\nThis tip is particularly useful for larger apps\nThe idea is to build a robust scaffold around the Shiny app\nA number of R packages specialize on this task: Rhino golem, and leprechaun\nBenefits:\n\nAutomatically handles dependencies, no more library and there is no package called ‘xxx’\nFacilitates sharing Shiny apps without deployment\nSupports multiple Shiny apps in one app\nEnables testing workflows and thus more robust code\nAll R code files in one place",
    "crumbs": [
      "Good practices when building your own app"
    ]
  },
  {
    "objectID": "06-visualization.html",
    "href": "06-visualization.html",
    "title": "Modelling and visualizing data",
    "section": "",
    "text": "You will learn how to:",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "06-visualization.html#good-practice-examples",
    "href": "06-visualization.html#good-practice-examples",
    "title": "Modelling and visualizing data",
    "section": "1.1 Good practice examples",
    "text": "1.1 Good practice examples\n\nExamples of these concepts can be seen in many Shiny apps, one example is Edward Parker’s COVID-19 tracker\n\n\n\n\n\n\n\nExercise\n\n\n\nExplore the COVID-19 tracker. Do you think this is a good Shiny app? If so, why? If not, why not?\n\n\n\n\n\nCOVID-19 Tracker",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "06-visualization.html#current-app-state",
    "href": "06-visualization.html#current-app-state",
    "title": "Modelling and visualizing data",
    "section": "1.2 Current app state",
    "text": "1.2 Current app state\n\nUnlike the previous sections, we will extend the existing app code step by step\nThe code chunk below includes the current app state including the intro and table tabs\nQuick recap:\n\nIn section 3, we added an introduction tab that contains background info on the app\nIn section 4, we added a table tab using the DT package\nIn this section, we will add a tab that analyzes Guerry using all sorts of visualization\n\n\n\n\nFull code for the current app state\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(dplyr)\nlibrary(GGally)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prep data (Tab: Map data) ----\ndata_guerry_region &lt;- data_guerry %&gt;%\n  group_by(Region) %&gt;%\n  summarise(across(\n    .cols = all_of(names(variable_names)),\n    function(x) {\n      if (cur_column() %in% c(\"Area\", \"Pop1831\")) {\n        sum(x)\n      } else {\n        mean(x)\n      }\n    }\n  ))\n\n## Prepare palettes ----\n## Used for mapping\npals &lt;- list(\n  Sequential = RColorBrewer::brewer.pal.info %&gt;%\n    filter(category %in% \"seq\") %&gt;%\n    row.names(),\n  Viridis = c(\"Magma\", \"Inferno\", \"Plasma\", \"Viridis\",\n              \"Cividis\", \"Rocket\", \"Mako\", \"Turbo\")\n)\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      )\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n\n  # New code goes here :)\n}\n\nshinyApp(ui, server)",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "06-visualization.html#further-resources",
    "href": "06-visualization.html#further-resources",
    "title": "Modelling and visualizing data",
    "section": "1.3 Further resources",
    "text": "1.3 Further resources\n\nChapter “Graphics” in Hadley Wickham’s Mastering Shiny\n“Server-side linking with shiny” in Carson Sievert’s Plotly book",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "06-visualization.html#a-new-section-for-the-guerry-app",
    "href": "06-visualization.html#a-new-section-for-the-guerry-app",
    "title": "Modelling and visualizing data",
    "section": "2.1 A new section for the Guerry app",
    "text": "2.1 A new section for the Guerry app\n\nTo exemplify what Shiny can do with visualizations, we add a new tab to the app called “Model data”\nThe goal is to explore the relationships among Guerry variables\nQuestion: If you think about a Shiny app that explores the relationships within a dataset, what types of visualizations come into your mind first?",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "06-visualization.html#setting-up-the-ui-element",
    "href": "06-visualization.html#setting-up-the-ui-element",
    "title": "Modelling and visualizing data",
    "section": "2.2 Setting up the UI element",
    "text": "2.2 Setting up the UI element\n\nTaking our Shiny app as an example, we add another tab:\n\n\n1model &lt;- tabItem(\n    \"tab_model\",\n2    fluidRow(\n        column(\n            width = 6,\n        box(\n                width = 12,\n                title = \"Pair diagram\",\n                status = \"primary\",\n3                plotOutput(\"pairplot\")\n            )\n        )\n    )\n)\n\n\n1\n\nCreate a tab item called “tab_model”\n\n2\n\nCreate an initial layout containing a fluid row with one column and one box\n\n3\n\nCreate a plot output widget\n\n\n\n\n\nThe newly created tab Item has the tab name tab_model\nWe already created other tabs item called tab_intro and tab_tabulate, so we can tell where our new tab item goes:\n\n\ndashboardPage(\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n1  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = \"chart-line\")\n    )\n  ),\n2  body = dashboardBody(\n    # Note: Tab contents omitted to maintain readability!\n    tabItems(\n      tabItem(tabName = \"tab_intro\"),\n      tabItem(tabname = \"tab_tabulate\"),\n      model\n    )\n  )\n)\n\n\n1\n\nCreate the respective menu items in the sidebar. Don’t forget to match the tab names!\n\n2\n\nCreate the tab items within the body. The function tabItems() contains all tab objects. We add our newly created tab_model object after the introduction. Again, the order and names of tabItem()s corresponds to the order and names of menuItem()s!",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "06-visualization.html#filling-with-contents",
    "href": "06-visualization.html#filling-with-contents",
    "title": "Modelling and visualizing data",
    "section": "2.3 Filling with contents",
    "text": "2.3 Filling with contents\n\nPretty easy so far!\nOn the server side we do the plotting\nHere, we use ggpairs from the GGally package, but you can use anything that produces a plot\n\n\n1output$pairplot &lt;- renderPlot({\n2    dt &lt;- st_drop_geometry(guerry[c(\"Literacy\", \"Commerce\")])\n3    GGally::ggpairs(dt, axisLabels = \"none\")\n})\n\n\n1\n\nThe renderPlot() function accepts an expression that produces a plot\n\n2\n\nClean the data before plotting\n\n3\n\nggpairs() creates a ggplot2 object which starts a plotting device in its print method",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "06-visualization.html#full-code",
    "href": "06-visualization.html#full-code",
    "title": "Modelling and visualizing data",
    "section": "2.4 Full code",
    "text": "2.4 Full code\n\n\nFull code for basic plotting\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(dplyr)\nlibrary(GGally)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prep data (Tab: Map data) ----\ndata_guerry_region &lt;- data_guerry %&gt;%\n  group_by(Region) %&gt;%\n  summarise(across(\n    .cols = all_of(names(variable_names)),\n    function(x) {\n      if (cur_column() %in% c(\"Area\", \"Pop1831\")) {\n        sum(x)\n      } else {\n        mean(x)\n      }\n    }\n  ))\n\n## Prepare palettes ----\n## Used for mapping\npals &lt;- list(\n  Sequential = RColorBrewer::brewer.pal.info %&gt;%\n    filter(category %in% \"seq\") %&gt;%\n    row.names(),\n  Viridis = c(\"Magma\", \"Inferno\", \"Plasma\", \"Viridis\",\n              \"Cividis\", \"Rocket\", \"Mako\", \"Turbo\")\n)\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      ),\n      ### 3.3.3 Tab: Model data ----\n      tabItem(\n        tabName = \"tab_model\",\n        fluidRow(\n          column(\n            width = 6,\n            ##### Box: Pair diagramm ----\n            box(\n              width = 12,\n              title = \"Pair diagram\",\n              status = \"primary\",\n              plotOutput(\"pairplot\")\n            )\n          )\n        )\n      )\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n  ### Pair diagram ----\n  output$pairplot &lt;- renderPlot({\n    dt &lt;- st_drop_geometry(data_guerry[c(\"Literacy\", \"Commerce\")])\n    GGally::ggpairs(dt, axisLabels = \"none\") \n  })\n}\n\nshinyApp(ui, server)",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "06-visualization.html#limitations",
    "href": "06-visualization.html#limitations",
    "title": "Modelling and visualizing data",
    "section": "2.5 Limitations",
    "text": "2.5 Limitations\n\nThe code to create a plot in a Shiny app is quite simple so far, but has not many advantages over plain plotting in the R console\nTo really make it shine, we need three features:\n\nReactivity\nInteractivity\nContextuality",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "06-visualization.html#adding-ui-inputs",
    "href": "06-visualization.html#adding-ui-inputs",
    "title": "Modelling and visualizing data",
    "section": "3.1 Adding UI inputs",
    "text": "3.1 Adding UI inputs\n\nHere, we add three user inputs\n\nselectInput() to select a single x variable (defaults to Literacy)\nselectizeInput() to select multiple y variables (defaults to Commerce)\ncheckboxInput() to determine whether to standardize or not\n\n\n\n\n\n\n\n\nNote\n\n\n\nTo avoid overreactivity, we add an actionButton() which needs to be pressed for the user input to take effect.\n\n\n\nmodel &lt;- tabItem(\n    \"tab_model\",\n1    fluidRow(\n        column(\n            width = 6,\n            #### Box: Select variables ----\n      box(\n                width = 12,\n                title = \"Select variables\",\n                status = \"primary\",\n2                selectInput(\n                    \"model_x\",\n                    label = \"Select a dependent variable\",\n                    choices = setNames(names(variable_names), variable_names),\n                    selected = \"Literacy\"\n                ),\n3                selectizeInput(\n                    \"model_y\",\n                    label = \"Select independent variables\",\n                    choices = setNames(names(variable_names), variable_names),\n                    multiple = TRUE,\n                    selected = \"Commerce\"\n                ),\n4                checkboxInput(\n                    \"model_std\",\n                    label = \"Standardize variables?\",\n                    value = TRUE\n                ),\n                hr(),\n5                actionButton(\n                    \"refresh\",\n                    label = \"Apply changes\",\n                    icon = icon(\"refresh\"),\n                    flat = TRUE\n                )\n            )\n        ),\n        #### Box: Pair diagramm ----\n        column(\n            width = 6,\n        box(\n                width = 12,\n                title = \"Pair diagram\",\n                status = \"primary\",\n                plotOutput(\"pairplot\")\n            )\n        )\n    )\n)\n\n\n1\n\nCreate a new column + box to hold our new input UI\n\n2\n\nCreate a selectInput() to select a single x variable. By passing a named list to the choices argument, the list names are shown to the user and the list values are sent to the server!\n\n3\n\nCreate a selectizeInput() to select multiple y variables\n\n4\n\nCreate a checkboxInput() to let users decide whether to standardize variables or not\n\n5\n\nCreate an actionButton() that needs to be pressed for changes to take effect",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "06-visualization.html#accessing-the-new-ui-inputs",
    "href": "06-visualization.html#accessing-the-new-ui-inputs",
    "title": "Modelling and visualizing data",
    "section": "3.2 Accessing the new UI inputs",
    "text": "3.2 Accessing the new UI inputs\n\nOn the server side, we need to deal with the new inputs\nQuestion: Which new UI inputs did we add? How can we access them on the server side?\nWe add a new reactive that cleans the data\n\n\n\n\n\n\n\nNote\n\n\n\nbindEvent ensures that the user input is only applied when the actionButton() is pressed! You can try to remove this safety measure and observe how the plot struggles to keep up when selecting multiple variables.\n\n\n\n1dat &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(guerry)[c(x, y)]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    dt\n}) %&gt;%\n2    bindEvent(input$refresh, ignoreNULL = FALSE)\n\noutput$pairplot &lt;- renderPlot({\n3    GGally::ggpairs(dat(), axisLabels = \"none\")\n})\n\n\n1\n\nCreate a reactive expression that takes care of data cleaning and stores the cleaned data in a reactive object called dat\n\n2\n\nExecute the reactive expression (and thus update dat), if and only if the refresh button is pressed\n\n3\n\nCreate a pairs plot using the newly created dat() object. This is the same as the dt dataframe that we used before with the difference that dat() updates every time input$model_x, input$model_y or input$model_std are changed.\n\n\n\n\n\n\nThe plot now reacts to user input and updates its appearance when the user selection changes!",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "06-visualization.html#full-code-1",
    "href": "06-visualization.html#full-code-1",
    "title": "Modelling and visualizing data",
    "section": "3.3 Full code",
    "text": "3.3 Full code\n\n\nFull code for reactive plotting\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(GGally)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      ),\n      ### 3.3.3 Tab: Model data ----\n      tabItem(\n        tabName = \"tab_model\",\n        fluidRow(\n          column(\n            width = 6,\n            #### Inputs(s) ----\n            box(\n              width = 12,\n              title = \"Select variables\",\n              status = \"primary\",\n              selectInput(\n                \"model_x\",\n                label = \"Select a dependent variable\",\n                choices = setNames(names(variable_names), variable_names),\n                selected = \"Literacy\"\n              ),\n              selectizeInput(\n                \"model_y\",\n                label = \"Select independent variables\",\n                choices = setNames(names(variable_names), variable_names),\n                multiple = TRUE,\n                selected = \"Commerce\"\n              ),\n              checkboxInput(\n                \"model_std\",\n                label = \"Standardize variables?\",\n                value = TRUE\n              ),\n              hr(),\n              actionButton(\n                \"refresh\",\n                label = \"Apply changes\",\n                icon = icon(\"refresh\"),\n                flat = TRUE\n              )\n            )\n          ),\n          column(\n            width = 6,\n            ##### Box: Pair diagramm ----\n            box(\n              width = 12,\n              title = \"Pair diagram\",\n              status = \"primary\",\n              plotOutput(\"pairplot\")\n            )\n            # A fourth box can go here :)\n          )\n        )\n      )\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n  ### Define & estimate model ----\n  dat &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(data_guerry)[c(x, y)]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    \n    dt\n  }) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n  \n  ### Pair diagram ----\n  output$pairplot &lt;- renderPlot({\n    GGally::ggpairs(dat(), axisLabels = \"none\")\n  })\n}\n\nshinyApp(ui, server)",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "06-visualization.html#plotly",
    "href": "06-visualization.html#plotly",
    "title": "Modelling and visualizing data",
    "section": "3 Plotly",
    "text": "3 Plotly\n\nPlotly is an open-source library to create charts that can be interacted with in various way\nIt supports several languages including R and Python\nPlotly is arguably the most renowned R package for interactive plotting\nIt even motivated an entire book: https://plotly-r.com/\n\n\n3.1 Plotly’s grammar of graphics\n\nSimilar to ggplot2, R plotly defines its own grammar of graphics\nA plotly canvas is created with plot_ly()\nAdditional plot elements can be added through pipes %&gt;% or |&gt;\n\n\ness_geo &lt;- readRDS(\"data/ess_trust_geo.rds\")\ness_geo &lt;- mutate(\n  ess_geo,\n  region = case_match(\n    country,\n    c(\"AT\", \"BE\", \"CH\", \"DE\", \"NL\", \"PL\", \"CZ\") ~ \"Central\",\n    c(\"BG\", \"EE\", \"HR\", \"HU\", \"LT\", \"LV\", \"PL\", \"SI\", \"SK\") ~ \"Eastern\",\n    c(\"ES\", \"IT\", \"PT\", \"RS\", \"ME\") ~ \"Southern\",\n    c(\"IS\", \"SE\", \"FI\", \"GB\", \"IE\", \"DK\") ~ \"Northern\"\n  )\n)\n\nplot_ly(\n  sf::st_drop_geometry(ess_geo),\n1  x = ~trust_eu,\n  y = ~left_right,\n  z = ~age,\n  color = ~region,\n  text = ~country\n) %&gt;%\n2  add_markers() %&gt;%\n3  layout(scene = list(\n    xaxis = list(title = 'Trust in the EU'),\n    yaxis = list(title = 'Left-right placement'),\n    zaxis = list(title = 'Age')\n  ))\n\n\n1\n\nVariables such as x, y, z and color are defined as formulas in a call to plot_ly. This is comparable to calling ggplot(aes(x, y, z, color)).\n\n2\n\nThe plot type is added through a pipe. This is comparable to ggplot2 functions such as geom_point or geom_bar.\n\n3\n\nVisual sugar is then added by calling layout and manually editing the axis titles.\n\n\n\n\n\n\n\n\n\n\n3.2 Quick and dirty interactivity\n\nOne important advantage of plotly is that you do not need to learn its grammar\nggplot2 plots can very easily be converted to an interactive plotly plot:\n\n\np &lt;- ggplot(iris) +\n  geom_point(aes(Sepal.Width, Sepal.Length))\np\n\n\n\n\n\n\n\n\n\nggplotly(p)\n\n\n\n\n\n\n\n3.3 Extending plotly\n\n3.3.1 Customization\n\nWe can extend Plotly objects using three functions:\n\nlayout() changes the plot organisation (think ggplot2::theme()), e.g.:\n\ncolors, sizes, fonts, positions, titles, ratios and alignment of all kinds of plot elements\nupdatemenus adds buttons or drop down menus that can change the plot style or layout (see here for examples)\nsliders adds sliders that can be useful for time series (see here for examples)\n\nconfig() changes interactivity configurations, e.g.:\n\nThe modeBarButtons options and displaylogo control the buttons in the mode bar\ntoImageButtonOptions controls the format of plot downloads\nscrollZoom enables or disables zooming by scrolling\n\nstyle() changes data-level attributes (think ggplot2::scale_), e.g.:\n\nhoverinfo controls whether tooltips are shown on hover\nmode controls whether to show points, lines and/or text in a scatter plot\nhovertext modifies the tooltips texts shown on hover\n\n\n\n\n\n3.3.2 Schema\n\nThe actual number of options is immense!\nYou can explore all options by calling plotly::schema()\n\n\nschema()\n\n\n\n\n\n\n\n\n3.3.3 Example\n\np &lt;- ggplot(iris) +\n  geom_point(aes(Sepal.Width, Sepal.Length))\n\nggplotly(p) %&gt;%\n  config(\n1    modeBarButtonsToRemove = c(\n      \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n      \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n    ),\n\n2    displaylogo = FALSE,\n\n3    toImageButtonOptions = list(\n      format = \"svg\",\n      filename = \"plot\",\n      height = NULL,\n      width = NULL\n    ),\n\n4    scrollZoom = TRUE\n  )\n\n\n1\n\nRemoves specified buttons from the modebar.\n\n2\n\nRemoves the Plotly logo.\n\n3\n\nChanges the output of snapshots taken of the plot. Setting height and width to NULL keeps the aspect ratio of the plot as it is shown in the app.\n\n4\n\nEnables zooming through scrolling.\n\n\n\n\n\n\n\n\n\n\n\n3.4 Plotly and Shiny\n\nSince plotly does not produce static plots like ggplot2, it cannot be served by plotOutput and renderPlot\nPlotly defines two new functions:\n\nplotlyOutput on the UI side\nrenderPlotly on the server side\n\n\nUI:\n\nmainPanel(\n  tabsetPanel(\n    type = \"tabs\",\n    \n    ### Table tab ----\n    tabPanel(\n      title = \"Table\",\n      div(\n        style = \"height: 600px; overflow-y: auto;\",\n        tableOutput(\"table\")\n      )\n    ),\n    \n    ### Plot tab ----\n    tabPanel(\n      title = \"Plot\",\n      plotlyOutput(\"plot\", height = 600)\n    )\n  )\n)\n\nServer:\n\noutput$plot &lt;- renderPlotly({\n  xvar &lt;- input$xvar\n  yvar &lt;- input$yvar\n  plot_data &lt;- filtered() %&gt;%\n    drop_na() %&gt;%\n    mutate(across(where(is.numeric), .fns = as.ordered))\n  \n  p &lt;- ggplot(plot_data) +\n    aes(x = .data[[xvar]], y = .data[[yvar]], group = .data[[xvar]]) +\n    geom_violin(fill = \"lightblue\", show.legend = FALSE) +\n    theme_classic()\n  ggplotly(p)\n})\n\n\n\nComplete code (important lines are highlighted)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(shiny)\nlibrary(plotly)\nlibrary(leaflet)\nlibrary(haven)\n\ness &lt;- readRDS(\"../../../data/ess_trust.rds\")\ness_geo &lt;- readRDS(\"../../../data/ess_trust_geo.rds\")\n\n# UI ----\nui &lt;- fluidPage(\n  titlePanel(\"European Social Survey - round 10\"),\n  \n  ## Sidebar ----\n  sidebarLayout(\n    sidebarPanel(\n      ### select dependent variable\n      selectInput(\n        \"xvar\",\n        label = \"Select a dependent variable\",\n        choices = c(\n          \"Trust in country's parliament\" = \"trust_parliament\",\n          \"Trust in the legal system\" = \"trust_legal\",\n          \"Trust in the police\" = \"trust_police\",\n          \"Trust in politicians\" = \"trust_politicians\",\n          \"Trust in political parties\" = \"trust_parties\",\n          \"Trust in the European Parliament\" = \"trust_eu\",\n          \"Trust in the United Nations\" = \"trust_un\"\n        )\n      ),\n      \n      ### select a variable ----\n      selectInput(\n        \"yvar\",\n        label = \"Select an independent variable\",\n        choices = c(\n          \"Placement on the left-right scale\" = \"left_right\",\n          \"Age\" = \"age\",\n          \"Feeling about household's income\" = \"income_feeling\",\n          \"How often do you use the internet?\" = \"internet_use\",\n          \"How happy are you?\" = \"happiness\"\n        )\n      ),\n      \n      ### select a country ----\n      selectizeInput(\n        \"countries\",\n        label = \"Filter by country\",\n        choices = unique(ess$country),\n        selected = \"FR\",\n        multiple = TRUE\n      ),\n      \n      ### filter values ----\n      sliderInput(\n        \"range\",\n        label = \"Set a value range\",\n        min = min(ess$trust_parliament, na.rm = TRUE),\n        max = max(ess$trust_parliament, na.rm = TRUE),\n        value = range(ess$trust_parliament, na.rm = TRUE),\n        step = 1\n      )\n    ),\n    \n    ## Main panel ----\n    mainPanel(\n      tabsetPanel(\n        type = \"tabs\",\n        \n        ### Table tab ----\n        tabPanel(\n          title = \"Table\",\n          div(\n            style = \"height: 600px; overflow-y: auto;\",\n            tableOutput(\"table\")\n          )\n        ),\n        \n        ### Plot tab ----\n        tabPanel(\n          title = \"Plot\",\n          plotlyOutput(\"plot\", height = 600)\n        ),\n        \n        ### Map tab ----\n        tabPanel(\n          title = \"Map\",\n          leafletOutput(\"map\", height = 600)\n        )\n      )\n    )\n  )\n)\n\n\n# Server ----\nserver &lt;- function(input, output, session) {\n  # update slider ----\n  observe({\n    var &lt;- na.omit(ess[[input$xvar]])\n    is_ordered &lt;- is.ordered(var)\n    var &lt;- as.numeric(var)\n    updateSliderInput(\n      inputId = \"range\",\n      min = min(var),\n      max = max(var),\n      value = range(var),\n      step = if (is_ordered) 1\n    )\n  }) %&gt;%\n    bindEvent(input$xvar)\n  \n  # filter data ----\n  filtered &lt;- reactive({\n    req(input$countries, cancelOutput = TRUE)\n    \n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    range &lt;- input$range\n    \n    # select country\n    ess &lt;- ess[ess$country %in% input$countries, ]\n    \n    # select variable\n    ess &lt;- ess[c(\"idno\", \"country\", xvar, yvar)]\n    \n    # apply range\n    ess &lt;- ess[ess[[xvar]] &gt; range[1] & ess[[xvar]] &lt; range[2], ]\n    ess\n  })\n  \n  # render table ----\n  output$table &lt;- renderTable({\n    filtered()\n  }, height = 400)\n  \n  # render plot ----\n  output$plot &lt;- renderPlotly({\n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    plot_data &lt;- filtered() %&gt;%\n      drop_na() %&gt;%\n      mutate(across(where(is.numeric), .fns = as.ordered))\n    \n    p &lt;- ggplot(plot_data) +\n      aes(x = .data[[xvar]], y = .data[[yvar]], group = .data[[xvar]]) +\n      geom_violin(fill = \"lightblue\", show.legend = FALSE) +\n      theme_classic()\n    ggplotly(p)\n  })\n}\n\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "06-visualization.html#plotly-and-shiny",
    "href": "06-visualization.html#plotly-and-shiny",
    "title": "Modelling and visualizing data",
    "section": "4.2 Plotly and Shiny",
    "text": "4.2 Plotly and Shiny\n\nPlotly requires similar components as plain plotting:\n\nplotlyOutput() creates the UI component\nrenderPlotly() does the plotting and updates the UI component\n\n\n\nmodel &lt;- tabItem(\n    \"tab_model\",\n    fluidRow(\n        column(\n            width = 6,\n            #### Box: Select variables ----\n      box(\n                width = 12,\n                title = \"Select variables\",\n                status = \"primary\",\n                selectInput(\n                    \"model_x\",\n                    label = \"Select a dependent variable\",\n                    choices = setNames(names(variable_names), variable_names),\n                    selected = \"Literacy\"\n                ),\n                selectizeInput(\n                    \"model_y\",\n                    label = \"Select independent variables\",\n                    choices = setNames(names(variable_names), variable_names),\n                    multiple = TRUE,\n                    selected = \"Commerce\"\n                ),\n                checkboxInput(\n                    \"model_std\",\n                    label = \"Standardize variables?\",\n                    value = TRUE\n                ),\n                hr(),\n                actionButton(\n                    \"refresh\",\n                    label = \"Apply changes\",\n                    icon = icon(\"refresh\"),\n                    flat = TRUE\n                )\n            )\n        ),\n        #### Box: Pair diagramm ----\n        column(\n            width = 6,\n        box(\n                width = 12,\n                title = \"Pair diagram\",\n                status = \"primary\",\n1                plotly::plotlyOutput(\"pairplot\")\n            )\n        )\n    )\n)\n\n\n1\n\nThis is the only thing that changes on the UI side when implementing Plotly. Plotly does not produce regular static plots and thus needs a special output widget.",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "06-visualization.html#ggplotly-on-the-server-side",
    "href": "06-visualization.html#ggplotly-on-the-server-side",
    "title": "Modelling and visualizing data",
    "section": "4.3 ggplotly on the server side",
    "text": "4.3 ggplotly on the server side\n\nPlotly introduces a very comprehensive plotting system centered around the plot_ly() function\nLucky for us, all we have to do is call ggplotly() on our ggplot object to convert it to a plotly object\n\n\ndat &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(guerry)[c(x, y)]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    dt\n}) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n\n1output$pairplot &lt;- plotly::renderPlotly({\n    p &lt;- GGally::ggpairs(dat(), axisLabels = \"none\")\n2    plotly::ggplotly(p)\n})\n\n\n1\n\nAs Plotly plots are not static plots, we need to use a special rendering function called plotly::renderPlotly()\n\n2\n\nJust as on the UI side, we need not change much on the server side. Just wrap your ggplot2 object in a call to plotly::ggplotly().",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "06-visualization.html#extending-plotly",
    "href": "06-visualization.html#extending-plotly",
    "title": "Modelling and visualizing data",
    "section": "4.4 Extending Plotly",
    "text": "4.4 Extending Plotly\n\nSo far we made ggplot2 plots and converted them to Plotly charts using a single function call\nMany aspects of Plotly charts remain out of control as we are not using the plot_ly() function\n\n\n4.4.1 Plotly’s customization functions\n\nWe can extend Plotly objects using three functions:\n\nlayout() changes the plot organisation (think ggplot2::theme()), e.g.:\n\ncolors, sizes, fonts, positions, titles, ratios and alignment of all kinds of plot elements\nupdatemenus adds buttons or drop down menus that can change the plot style or layout (see here for examples)\nsliders adds sliders that can be useful for time series (see here for examples)\n\nconfig() changes interactivity configurations, e.g.:\n\nThe modeBarButtons options and displaylogo control the buttons in the mode bar\ntoImageButtonOptions controls the format of plot downloads\nscrollZoom enables or disables zooming by scrolling\n\nstyle() changes data-level attributes (think ggplot2::scale_), e.g.:\n\nhoverinfo controls whether tooltips are shown on hover\nmode controls whether to show points, lines and/or text in a scatter plot\nhovertext modifies the tooltips texts shown on hover\n\n\n\n\n\n4.4.2 Schema\n\nThe actual number of options is immense!\nYou can explore all options by calling plotly::schema()\n\n\nplotly::schema()\n\n\n\n\n\n\n\n\n4.4.3 Example\n\nFor our app, we can clean up the mode bar and enhance the plot download\n\n\nggplotly(p) %&gt;%\n  config(\n1    modeBarButtonsToRemove = c(\n        \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n            \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n        ),\n2    displaylogo = FALSE,\n3        toImageButtonOptions = list(\n            format = \"svg\",\n            filename = \"guerry_plot\",\n            height = NULL,\n            width = NULL\n        ),\n4        scrollZoom = TRUE\n    )\n\n\n1\n\nRemoves specified buttons from the modebar\n\n2\n\nRemoves the Plotly logo\n\n3\n\nChanges the output of snapshots taken of the plot. Setting height and width to NULL keeps the aspect ratio of the plot as it is shown in the app.\n\n4\n\nEnables zooming through scrolling",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "06-visualization.html#full-code-2",
    "href": "06-visualization.html#full-code-2",
    "title": "Modelling and visualizing data",
    "section": "4.5 Full code",
    "text": "4.5 Full code\n\n\nFull code for interactive visualization\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(GGally)\nlibrary(datawizard)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      ),\n      ### 3.3.3 Tab: Model data ----\n      tabItem(\n        tabName = \"tab_model\",\n        fluidRow(\n          column(\n            width = 6,\n            #### Inputs(s) ----\n            box(\n              width = 12,\n              title = \"Select variables\",\n              status = \"primary\",\n              selectInput(\n                \"model_x\",\n                label = \"Select a dependent variable\",\n                choices = setNames(names(variable_names), variable_names),\n                selected = \"Literacy\"\n              ),\n              selectizeInput(\n                \"model_y\",\n                label = \"Select independent variables\",\n                choices = setNames(names(variable_names), variable_names),\n                multiple = TRUE,\n                selected = \"Commerce\"\n              ),\n              checkboxInput(\n                \"model_std\",\n                label = \"Standardize variables?\",\n                value = TRUE\n              ),\n              hr(),\n              actionButton(\n                \"refresh\",\n                label = \"Apply changes\",\n                icon = icon(\"refresh\"),\n                flat = TRUE\n              )\n            )\n          ),\n          column(\n            width = 6,\n            ##### Box: Pair diagramm ----\n            box(\n              width = 12,\n              title = \"Pair diagram\",\n              status = \"primary\",\n              plotly::plotlyOutput(\"pairplot\")\n            )\n            # A fourth box can go here :)\n          )\n        )\n      )\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n  ### Define & estimate model ----\n  dat &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(data_guerry)[c(x, y)]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    \n    dt\n  }) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n  \n  ### Pair diagram ----\n  output$pairplot &lt;- plotly::renderPlotly({\n    p &lt;- GGally::ggpairs(dat(), axisLabels = \"none\")\n    \n    ggplotly(p) %&gt;%\n      config(\n        modeBarButtonsToRemove = plotly_buttons,\n        displaylogo = FALSE,\n        toImageButtonOptions = list(\n          format = \"svg\",\n          filename = \"guerry_plot\",\n          height = NULL,\n          width = NULL\n        ),\n        scrollZoom = TRUE\n      )\n  })\n}\n\nshinyApp(ui, server)",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "06-visualization.html#good-practices",
    "href": "06-visualization.html#good-practices",
    "title": "Modelling and visualizing data",
    "section": "5.1 Good practices",
    "text": "5.1 Good practices\n\nAppsilon’s US bee colony monitor provides an easy way to compare aggregated numbers, between-state and within-state distributions side-by-side\nWith a little bit of creativity, Shiny can be a very competent story teller (for an impressive example, take a look at John Coene’s Freedom of Press Shiny app)",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "06-visualization.html#extending-the-layout",
    "href": "06-visualization.html#extending-the-layout",
    "title": "Modelling and visualizing data",
    "section": "5.2 Extending the layout",
    "text": "5.2 Extending the layout\n\nHere, we will extend our lonely plot with a regression analysis to tell the full story of the associations of the Guerry indicators\nWe add three types of visualization: a coefficient plot, a scatter plot and a regression table\nThe three plots are tucked in a tabBox, a bs4Dash::box that supports tab panels\n\n\nmodel &lt;- tabItem(\n    \"tab_model\",\n    fluidRow(\n        column(\n            width = 6,\n            #### Box: Select variables ----\n      box(\n                width = 12,\n                title = \"Select variables\",\n                status = \"primary\",\n                selectInput(\n                    \"model_x\",\n                    label = \"Select a dependent variable\",\n                    choices = setNames(names(variable_names), variable_names),\n                    selected = \"Literacy\"\n                ),\n                selectizeInput(\n                    \"model_y\",\n                    label = \"Select independent variables\",\n                    choices = setNames(names(variable_names), variable_names),\n                    multiple = TRUE,\n                    selected = \"Commerce\"\n                ),\n                checkboxInput(\n                    \"model_std\",\n                    label = \"Standardize variables?\",\n                    value = TRUE\n                ),\n                hr(),\n                actionButton(\n                    \"refresh\",\n                    label = \"Apply changes\",\n                    icon = icon(\"refresh\"),\n                    flat = TRUE\n                )\n            ),\n      #### Box: Coefficient/Scatterplot ----\n1            tabBox(\n              status = \"primary\",\n              width = 12,\n2              type = \"tabs\",\n              ##### Tab: Coefficient plot ----\n3              tabPanel(\n                title = \"Plot: Coefficients\",\n                plotly::plotlyOutput(\"coefficientplot\")\n              ),\n              ##### Tab: Scatterplot ----\n4              tabPanel(\n                title = \"Plot: Scatterplot\",\n                plotly::plotlyOutput(\"scatterplot\")\n              ),\n              ##### Tab: Table: Regression ----\n5              tabPanel(\n                title = \"Table: Model\",\n                htmlOutput(\"tableregression\")\n              )\n            )\n        ),\n        #### Box: Pair diagramm ----\n        column(\n            width = 6,\n        box(\n                width = 12,\n                title = \"Pair diagram\",\n                status = \"primary\",\n                plotly::plotlyOutput(\"pairplot\")\n            )\n        )\n    )\n)\n\n\n1\n\nAdds a new tabBox() which can contain multiple tabPanel()\n\n2\n\nSpecify the appearance of the tabs. pills fills the entire tab panel with the status color while tabs is more subtle in its coloring.\n\n3\n\nAdd a tab that holds a Plotly coefficient plot\n\n4\n\nAdd a tab that holds a Plotly scatter plot\n\n5\n\nAdd a tab that holds a HTML regression table",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "06-visualization.html#digesting-the-new-layout",
    "href": "06-visualization.html#digesting-the-new-layout",
    "title": "Modelling and visualizing data",
    "section": "5.3 Digesting the new layout",
    "text": "5.3 Digesting the new layout\n\nQuestion: What did we add here? Which outputs need to be filled with content?\nOn the server side, we extend our reactive object with a linear regression model\n\n\n1mparams &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(guerry)[c(x, y)]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n2    form &lt;- as.formula(paste(x, \"~\", paste(y, collapse = \" + \")))\n    mod &lt;- lm(form, data = dt)\n\n3    list(x = x, y = y, data = dt,   model = mod)\n}) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n\n\n1\n\nWe renamed the dat() reactive object to mparams() as it now holds multiple arguments instead of just one dataframe\n\n2\n\nCreate a formula and produce the linear regression output\n\n3\n\nReturn a list of arguments to be used for the outputs",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "06-visualization.html#creating-the-output",
    "href": "06-visualization.html#creating-the-output",
    "title": "Modelling and visualizing data",
    "section": "5.4 Creating the output",
    "text": "5.4 Creating the output\n\nFrom this point, we can chuck the mparams reactive object into all the rendering functions\n\n\n### Pair diagram ----\n1output$pairplot &lt;- renderPlotly({\n    p &lt;- GGally::ggpairs(mparams()$data, axisLabels = \"none\")\n    ggplotly(p)\n})\n\n### Plot: Coefficientplot ----\n2output$coefficientplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    x &lt;- params$x\n    y &lt;- params$y\n\n    p &lt;- plot(parameters::model_parameters(params$model))\n\n    ggplotly(p)\n})\n\n### Plot: Scatterplot ----\n3output$scatterplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    x &lt;- params$x\n    y &lt;- params$y\n\n\n    if (length(y) == 1) {\n      p &lt;- ggplot(params$data,\n                  aes(x = .data[[params$x]],\n                      y = .data[[params$y]])) +\n        geom_point() +\n        geom_smooth() +\n        theme_light()\n    } else {\n      p &lt;- ggplot() +\n        theme_void() +\n        annotate(\"text\",\n                 label = \"Cannot create scatterplot.\\nMore than two variables selected.\",\n                 x = 0, y = 0,\n                 size = 5,\n                 colour = \"red\",\n                 hjust = 0.5,\n                 vjust = 0.5) +\n      xlab(NULL)\n\n    }\n\n    ggplotly(p)\n})\n\n### Table: Regression ----\n4output$tableregression &lt;- renderUI({\n    params &lt;- mparams()\n    HTML(modelsummary(\n        dvnames(list(params$model)),\n      gof_omit = \"AIC|BIC|Log|Adj|RMSE\"\n    ))\n})\n\n\n1\n\nAgain, we need to change the input to the ggpairs() function as the name and structure of the reactive object has changed.\n\n2\n\nCreate a Plotly coefficient plot using the parameters package\n\n3\n\nCreate a Plotly scatter plot for bi-variate regression. If more than one y variable is selected, an empty plot and a warning message is created.\n\n4\n\nCreate a model table using the modelsummary package and prepare it for HTML rendering.",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "06-visualization.html#full-code-3",
    "href": "06-visualization.html#full-code-3",
    "title": "Modelling and visualizing data",
    "section": "5.5 Full code",
    "text": "5.5 Full code\n\n\nFull code for contextual visualization\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(datawizard)\nlibrary(parameters)\nlibrary(performance)\nlibrary(modelsummary)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      ),\n      ### 3.3.3 Tab: Model data ----\n      tabItem(\n        tabName = \"tab_model\",\n        fluidRow(\n          column(\n            width = 6,\n            #### Inputs(s) ----\n            box(\n              width = 12,\n              title = \"Select variables\",\n              status = \"primary\",\n              selectInput(\n                \"model_x\",\n                label = \"Select a dependent variable\",\n                choices = setNames(names(variable_names), variable_names),\n                selected = \"Literacy\"\n              ),\n              selectizeInput(\n                \"model_y\",\n                label = \"Select independent variables\",\n                choices = setNames(names(variable_names), variable_names),\n                multiple = TRUE,\n                selected = \"Commerce\"\n              ),\n              checkboxInput(\n                \"model_std\",\n                label = \"Standardize variables?\",\n                value = TRUE\n              ),\n              hr(),\n              actionButton(\n                \"refresh\",\n                label = \"Apply changes\",\n                icon = icon(\"refresh\"),\n                flat = TRUE\n              )\n            ),\n            #### Outputs(s) ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model analysis\",\n              side = \"right\",\n              width = 12,\n              ##### Tabpanel: Coefficient plot ----\n              tabPanel(\n                title = \"Plot: Coefficients\",\n                plotly::plotlyOutput(\"coefficientplot\")\n              ),\n              ##### Tabpanel: Scatterplot ----\n              tabPanel(\n                title = \"Plot: Scatterplot\",\n                plotly::plotlyOutput(\"scatterplot\")\n              ),\n              ##### Tabpanel: Table: Regression ----\n              tabPanel(\n                title = \"Table: Model\",\n                htmlOutput(\"tableregression\")\n              )\n            )\n          ),\n          column(\n            width = 6,\n            ##### Box: Pair diagramm ----\n            box(\n              width = 12,\n              title = \"Pair diagram\",\n              status = \"primary\",\n              plotly::plotlyOutput(\"pairplot\")\n            )\n            # A fourth box can go here :)\n          )\n        )\n      )\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n  ### Define & estimate model ----\n  mparams &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(data_guerry)[c(x, y)]\n    dt_labels &lt;- sf::st_drop_geometry(data_guerry)[c(\"Department\", \"Region\")]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    form &lt;- as.formula(paste(x, \"~\", paste(y, collapse = \" + \")))\n    mod &lt;- lm(form, data = dt)\n    \n    list(\n      x = x,\n      y = y,\n      data = dt,\n      data_labels = dt_labels,\n      model = mod\n    )\n  }) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n  \n  ### Pair diagram ----\n  output$pairplot &lt;- plotly::renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    p &lt;- GGally::ggpairs(params$data, axisLabels = \"none\")\n\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Coefficientplot ----\n  output$coefficientplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    x &lt;- params$x\n    y &lt;- params$y\n    \n    p &lt;- plot(parameters::model_parameters(params$model))\n    \n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Scatterplot ----\n  output$scatterplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    x &lt;- params$x \n    y &lt;- params$y\n    \n    \n    if (length(y) == 1) {\n      p &lt;- ggplot(params$data, \n                  aes(x = .data[[params$x]], \n                      y = .data[[params$y]])) +\n        geom_point(aes(text = paste0(\"Department: \", \n                                     dt_labels[[\"Department\"]],\n                                     \"&lt;br&gt;Region: \", \n                                     dt_labels[[\"Region\"]])),\n                   color = \"black\") +\n        geom_smooth() + \n        geom_smooth(method = \"lm\") +\n        theme_light()\n    } else {\n      p &lt;- ggplot() +\n        theme_void() +\n        annotate(\"text\", \n                 label = \"Cannot create scatterplot.\\nMore than two variables selected.\", \n                 x = 0, y = 0, \n                 size = 5, \n                 colour = \"red\",\n                 hjust = 0.5,\n                 vjust = 0.5) +\n        xlab(NULL)\n      \n    }\n    \n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Table: Regression ----\n  output$tableregression &lt;- renderUI({\n    params &lt;- mparams()\n    HTML(modelsummary(\n      dvnames(list(params$model)),\n      gof_omit = \"AIC|BIC|Log|Adj|RMSE\"\n    ))\n  })\n}\n\nshinyApp(ui, server)",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "07-deployment.html",
    "href": "07-deployment.html",
    "title": "Strengthen & Deploy",
    "section": "",
    "text": "Learning outcomes - Debug Shiny apps and understand them from the inside - Supervise and test Shiny apps for robustness (appendix) - Convert simple Shiny apps to static website using shinylive - Deploy any Shiny app to the web using shinyapps.io"
  },
  {
    "objectID": "07-deployment.html#strengthen",
    "href": "07-deployment.html#strengthen",
    "title": "Strengthen & Deploy",
    "section": "1.1 Strengthen",
    "text": "1.1 Strengthen\n\nBefore it’s time to deploy, it’s a good idea to make sure your app passes the test of publicity\nDepending on the use case and target group, a deployed app should be:\n\nfast: remote communication can make your app slower than on a local host\nscalable: a high workload can crash your app\nstable: errors also crash your app"
  },
  {
    "objectID": "07-deployment.html#tools-to-strengthen",
    "href": "07-deployment.html#tools-to-strengthen",
    "title": "Strengthen & Deploy",
    "section": "1.2 Tools to strengthen",
    "text": "1.2 Tools to strengthen\n\nThere are a lot of Shiny extensions that help in strengthening a Shiny app, some of which we will address:\n\nprofvis: Profiles a Shiny app and creates performance visualizations\nreactlog: Logs reactivity of your Shiny app and creates a dynamic reactive graph\nshinyloadtest: Simulates a workload of users and determines how well your app is suitable for such a workload\nshinytest: Creates snapshots and compares the visual appearance of them in subsequent runs\nshiny::testServer(): Performs programmatic tests using the Shiny server logic of an app"
  },
  {
    "objectID": "07-deployment.html#further-resources",
    "href": "07-deployment.html#further-resources",
    "title": "Strengthen & Deploy",
    "section": "1.3 Further resources",
    "text": "1.3 Further resources\n\nChapters 11 and 13 of Colin Fay’s Engineering Production-Grade Shiny Apps\nChapters 21 and 23 of Hadley Wickham’s Mastering Shiny"
  },
  {
    "objectID": "07-deployment.html#using-the-profvis-package",
    "href": "07-deployment.html#using-the-profvis-package",
    "title": "Strengthen & Deploy",
    "section": "2.1 Using the profvis package",
    "text": "2.1 Using the profvis package\n\nSimply run your app within a profvis::profvis() call:\n\n\nprofvis({runApp()})\n\n\n\n\n\n\n\nNote\n\n\n\nIt is necessary to use runApp(), shinyApp() does not suffice!\n\n\n\nThen, perform some tasks in the Shiny app\nClose the app, and an HTML file will open that looks something like below:"
  },
  {
    "objectID": "07-deployment.html#interactive-debugging",
    "href": "07-deployment.html#interactive-debugging",
    "title": "Strengthen & Deploy",
    "section": "3.1 Interactive debugging",
    "text": "3.1 Interactive debugging\n\nInteractive debugging comes from base R and works just like that\nPut a call to browser() somewhere in your server function\nCode execution is interrupted on the spot and you can explore the server function in a “frozen” state\n\n\n\n\nAccessing input in Shiny browser call"
  },
  {
    "objectID": "07-deployment.html#logging",
    "href": "07-deployment.html#logging",
    "title": "Strengthen & Deploy",
    "section": "3.2 Logging",
    "text": "3.2 Logging\n\nIn base R, print debugging is frowned upon\nIn Shiny, print debugging can be a nice way to understand errors along a reactivity path (or to understand reactivity in general)"
  },
  {
    "objectID": "07-deployment.html#where-am-i",
    "href": "07-deployment.html#where-am-i",
    "title": "Strengthen & Deploy",
    "section": "3.3 Where am I?",
    "text": "3.3 Where am I?\n\nThat is a question you might ask yourself occasionally when encountering errors in Shiny\nThe whereami package can tell you exactly where you are\nMany R packages enable general logging (logging, logger, log4r), but whereami is especially suitable for Shiny\n\n\n\n\nLogs from logger\n\n\n\n\n\nLogs from whereami"
  },
  {
    "objectID": "07-deployment.html#reactivity-logging",
    "href": "07-deployment.html#reactivity-logging",
    "title": "Strengthen & Deploy",
    "section": "3.4 Reactivity logging",
    "text": "3.4 Reactivity logging\n\nReactivity logging means capturing and visualizing reactive dependencies in Shiny apps\nUseful for detecting overreactiveness and reactive instabilities\nReactivity logging can be done using the reactlog package\n\n\n3.4.1 Using the reactlog package\n\nRun reactlog::reactlog_enable() before running the Shiny app or set options(shiny.reactlog = TRUE)\nDo stuff in your Shiny app (particularly something that triggers dependencies!)\nRun shiny::reactlogShow() or reactlog::reactlog_show() after closing the app\nAlternatively, press Strg + F3 while the app is running"
  },
  {
    "objectID": "07-deployment.html#where-to-deploy",
    "href": "07-deployment.html#where-to-deploy",
    "title": "Strengthen & Deploy",
    "section": "4.1 Where to deploy",
    "text": "4.1 Where to deploy\n\nShiny app hosting\n\n\nName\nUse\nRequirements\n\n\n\n\nshinyapps.io\nCasual to professional applications\nrsconnect R package\n\n\nPosit Connect\nProfessional to corporate applications\nrsconnect R package\n\n\nShiny Server\nSetting up self-hosted Shiny servers\nShiny Server on a Linux server\n\n\nShinyProxy / Heroku\nDeployment of containerized applications\nDocker"
  },
  {
    "objectID": "07-deployment.html#shinyapps.io",
    "href": "07-deployment.html#shinyapps.io",
    "title": "Strengthen & Deploy",
    "section": "4.2 shinyapps.io",
    "text": "4.2 shinyapps.io\n\nA common choice for more casual Shiny apps is shinyapps.io\n\nIt requires not much technical knowledge to deploy\nIt does not require a pre-existing infrastructure (e.g., a server)\nIt offers a free plan\n\n\n\n\n\nShinyapps.io plans"
  },
  {
    "objectID": "07-deployment.html#rsconnect",
    "href": "07-deployment.html#rsconnect",
    "title": "Strengthen & Deploy",
    "section": "4.3 rsconnect",
    "text": "4.3 rsconnect\n\nBoth for Posit Connect and shinyapps.io you need the rsconnect package\nrsconnect enables the communication between the Posit services and R\n\n\n\nrsconnect is built around the deployApp(), deployAPI() and deployDoc() functions"
  },
  {
    "objectID": "07-deployment.html#creating-an-account",
    "href": "07-deployment.html#creating-an-account",
    "title": "Strengthen & Deploy",
    "section": "4.4 Creating an account",
    "text": "4.4 Creating an account\n\nBefore being able to deploy to Shinyapps, we need an account\nAccounts can be created per Email or using Google, Github or Clever\n\n\n\n\nShinyapps.io sign-up"
  },
  {
    "objectID": "07-deployment.html#connecting-r-to-shinyapps.io",
    "href": "07-deployment.html#connecting-r-to-shinyapps.io",
    "title": "Strengthen & Deploy",
    "section": "4.5 Connecting R to shinyapps.io",
    "text": "4.5 Connecting R to shinyapps.io\n\nJust with any interface, linking works using Tokens and Secrets\nOn your shinyapps dashboard, navigate to Account -&gt; Tokens on the sidebar\nClick on “Add Token”\nClick on “Show” next to your newly created token\nPaste the code into your console and execute\n\n\n\n\nShinyapps token to connect with rsconnect"
  },
  {
    "objectID": "07-deployment.html#deploy",
    "href": "07-deployment.html#deploy",
    "title": "Strengthen & Deploy",
    "section": "4.6 Deploy!",
    "text": "4.6 Deploy!\n\nTo verify that the verification process was successful we run:\n\n\nrsconnect::accounts()\n\n\nFinally, to deploy an app, we simply run deployApp() to deploy an app.R in the current working directory to shinyapps.io:\n\n\nrsconnect::deployApp()"
  },
  {
    "objectID": "06-visualization (1).html",
    "href": "06-visualization (1).html",
    "title": "Modelling and visualizing data",
    "section": "",
    "text": "library(tidyverse)\nlibrary(plotly)\nlibrary(shiny)\nYou will learn how to:"
  },
  {
    "objectID": "06-visualization (1).html#good-practice-examples",
    "href": "06-visualization (1).html#good-practice-examples",
    "title": "Modelling and visualizing data",
    "section": "1.1 Good practice examples",
    "text": "1.1 Good practice examples\n\nExamples of these concepts can be seen in many Shiny apps, one example is Edward Parker’s COVID-19 tracker\n\n\n\n\n\n\n\nExercise\n\n\n\nExplore the COVID-19 tracker. Do you think this is a good Shiny app? If so, why? If not, why not?\n\n\n\n\n\nCOVID-19 Tracker"
  },
  {
    "objectID": "06-visualization (1).html#current-app-state",
    "href": "06-visualization (1).html#current-app-state",
    "title": "Modelling and visualizing data",
    "section": "1.2 Current app state",
    "text": "1.2 Current app state\n\nUnlike the previous sections, we will extend the existing app code step by step\nThe code chunk below includes the current app state including the intro and table tabs\nQuick recap:\n\nIn section 3, we added an introduction tab that contains background info on the app\nIn section 4, we added a table tab using the DT package\nIn this section, we will add a tab that analyzes Guerry using all sorts of visualization\n\n\n\n\nFull code for the current app state\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(dplyr)\nlibrary(GGally)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prep data (Tab: Map data) ----\ndata_guerry_region &lt;- data_guerry %&gt;%\n  group_by(Region) %&gt;%\n  summarise(across(\n    .cols = all_of(names(variable_names)),\n    function(x) {\n      if (cur_column() %in% c(\"Area\", \"Pop1831\")) {\n        sum(x)\n      } else {\n        mean(x)\n      }\n    }\n  ))\n\n## Prepare palettes ----\n## Used for mapping\npals &lt;- list(\n  Sequential = RColorBrewer::brewer.pal.info %&gt;%\n    filter(category %in% \"seq\") %&gt;%\n    row.names(),\n  Viridis = c(\"Magma\", \"Inferno\", \"Plasma\", \"Viridis\",\n              \"Cividis\", \"Rocket\", \"Mako\", \"Turbo\")\n)\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      )\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n\n  # New code goes here :)\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "06-visualization (1).html#further-resources",
    "href": "06-visualization (1).html#further-resources",
    "title": "Modelling and visualizing data",
    "section": "1.3 Further resources",
    "text": "1.3 Further resources\n\nChapter “Graphics” in Hadley Wickham’s Mastering Shiny\n“Server-side linking with shiny” in Carson Sievert’s Plotly book"
  },
  {
    "objectID": "06-visualization (1).html#a-new-section-for-the-guerry-app",
    "href": "06-visualization (1).html#a-new-section-for-the-guerry-app",
    "title": "Modelling and visualizing data",
    "section": "2.1 A new section for the Guerry app",
    "text": "2.1 A new section for the Guerry app\n\nTo exemplify what Shiny can do with visualizations, we add a new tab to the app called “Model data”\nThe goal is to explore the relationships among Guerry variables\nQuestion: If you think about a Shiny app that explores the relationships within a dataset, what types of visualizations come into your mind first?"
  },
  {
    "objectID": "06-visualization (1).html#setting-up-the-ui-element",
    "href": "06-visualization (1).html#setting-up-the-ui-element",
    "title": "Modelling and visualizing data",
    "section": "2.2 Setting up the UI element",
    "text": "2.2 Setting up the UI element\n\nTaking our Shiny app as an example, we add another tab:\n\n\n1model &lt;- tabItem(\n    \"tab_model\",\n2    fluidRow(\n        column(\n            width = 6,\n        box(\n                width = 12,\n                title = \"Pair diagram\",\n                status = \"primary\",\n3                plotOutput(\"pairplot\")\n            )\n        )\n    )\n)\n\n\n1\n\nCreate a tab item called “tab_model”\n\n2\n\nCreate an initial layout containing a fluid row with one column and one box\n\n3\n\nCreate a plot output widget\n\n\n\n\n\nThe newly created tab Item has the tab name tab_model\nWe already created other tabs item called tab_intro and tab_tabulate, so we can tell where our new tab item goes:\n\n\ndashboardPage(\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n1  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = \"chart-line\")\n    )\n  ),\n2  body = dashboardBody(\n    # Note: Tab contents omitted to maintain readability!\n    tabItems(\n      tabItem(tabName = \"tab_intro\"),\n      tabItem(tabname = \"tab_tabulate\"),\n      model\n    )\n  )\n)\n\n\n1\n\nCreate the respective menu items in the sidebar. Don’t forget to match the tab names!\n\n2\n\nCreate the tab items within the body. The function tabItems() contains all tab objects. We add our newly created tab_model object after the introduction. Again, the order and names of tabItem()s corresponds to the order and names of menuItem()s!"
  },
  {
    "objectID": "06-visualization (1).html#filling-with-contents",
    "href": "06-visualization (1).html#filling-with-contents",
    "title": "Modelling and visualizing data",
    "section": "2.3 Filling with contents",
    "text": "2.3 Filling with contents\n\nPretty easy so far!\nOn the server side we do the plotting\nHere, we use ggpairs from the GGally package, but you can use anything that produces a plot\n\n\n1output$pairplot &lt;- renderPlot({\n2    dt &lt;- st_drop_geometry(guerry[c(\"Literacy\", \"Commerce\")])\n3    GGally::ggpairs(dt, axisLabels = \"none\")\n})\n\n\n1\n\nThe renderPlot() function accepts an expression that produces a plot\n\n2\n\nClean the data before plotting\n\n3\n\nggpairs() creates a ggplot2 object which starts a plotting device in its print method"
  },
  {
    "objectID": "06-visualization (1).html#full-code",
    "href": "06-visualization (1).html#full-code",
    "title": "Modelling and visualizing data",
    "section": "2.4 Full code",
    "text": "2.4 Full code\n\n\nFull code for basic plotting\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(dplyr)\nlibrary(GGally)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prep data (Tab: Map data) ----\ndata_guerry_region &lt;- data_guerry %&gt;%\n  group_by(Region) %&gt;%\n  summarise(across(\n    .cols = all_of(names(variable_names)),\n    function(x) {\n      if (cur_column() %in% c(\"Area\", \"Pop1831\")) {\n        sum(x)\n      } else {\n        mean(x)\n      }\n    }\n  ))\n\n## Prepare palettes ----\n## Used for mapping\npals &lt;- list(\n  Sequential = RColorBrewer::brewer.pal.info %&gt;%\n    filter(category %in% \"seq\") %&gt;%\n    row.names(),\n  Viridis = c(\"Magma\", \"Inferno\", \"Plasma\", \"Viridis\",\n              \"Cividis\", \"Rocket\", \"Mako\", \"Turbo\")\n)\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      ),\n      ### 3.3.3 Tab: Model data ----\n      tabItem(\n        tabName = \"tab_model\",\n        fluidRow(\n          column(\n            width = 6,\n            ##### Box: Pair diagramm ----\n            box(\n              width = 12,\n              title = \"Pair diagram\",\n              status = \"primary\",\n              plotOutput(\"pairplot\")\n            )\n          )\n        )\n      )\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n  ### Pair diagram ----\n  output$pairplot &lt;- renderPlot({\n    dt &lt;- st_drop_geometry(data_guerry[c(\"Literacy\", \"Commerce\")])\n    GGally::ggpairs(dt, axisLabels = \"none\") \n  })\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "06-visualization (1).html#limitations",
    "href": "06-visualization (1).html#limitations",
    "title": "Modelling and visualizing data",
    "section": "2.5 Limitations",
    "text": "2.5 Limitations\n\nThe code to create a plot in a Shiny app is quite simple so far, but has not many advantages over plain plotting in the R console\nTo really make it shine, we need three features:\n\nReactivity\nInteractivity\nContextuality"
  },
  {
    "objectID": "06-visualization (1).html#adding-ui-inputs",
    "href": "06-visualization (1).html#adding-ui-inputs",
    "title": "Modelling and visualizing data",
    "section": "3.1 Adding UI inputs",
    "text": "3.1 Adding UI inputs\n\nHere, we add three user inputs\n\nselectInput() to select a single x variable (defaults to Literacy)\nselectizeInput() to select multiple y variables (defaults to Commerce)\ncheckboxInput() to determine whether to standardize or not\n\n\n\n\n\n\n\n\nNote\n\n\n\nTo avoid overreactivity, we add an actionButton() which needs to be pressed for the user input to take effect.\n\n\n\nmodel &lt;- tabItem(\n    \"tab_model\",\n1    fluidRow(\n        column(\n            width = 6,\n            #### Box: Select variables ----\n      box(\n                width = 12,\n                title = \"Select variables\",\n                status = \"primary\",\n2                selectInput(\n                    \"model_x\",\n                    label = \"Select a dependent variable\",\n                    choices = setNames(names(variable_names), variable_names),\n                    selected = \"Literacy\"\n                ),\n3                selectizeInput(\n                    \"model_y\",\n                    label = \"Select independent variables\",\n                    choices = setNames(names(variable_names), variable_names),\n                    multiple = TRUE,\n                    selected = \"Commerce\"\n                ),\n4                checkboxInput(\n                    \"model_std\",\n                    label = \"Standardize variables?\",\n                    value = TRUE\n                ),\n                hr(),\n5                actionButton(\n                    \"refresh\",\n                    label = \"Apply changes\",\n                    icon = icon(\"refresh\"),\n                    flat = TRUE\n                )\n            )\n        ),\n        #### Box: Pair diagramm ----\n        column(\n            width = 6,\n        box(\n                width = 12,\n                title = \"Pair diagram\",\n                status = \"primary\",\n                plotOutput(\"pairplot\")\n            )\n        )\n    )\n)\n\n\n1\n\nCreate a new column + box to hold our new input UI\n\n2\n\nCreate a selectInput() to select a single x variable. By passing a named list to the choices argument, the list names are shown to the user and the list values are sent to the server!\n\n3\n\nCreate a selectizeInput() to select multiple y variables\n\n4\n\nCreate a checkboxInput() to let users decide whether to standardize variables or not\n\n5\n\nCreate an actionButton() that needs to be pressed for changes to take effect"
  },
  {
    "objectID": "06-visualization (1).html#accessing-the-new-ui-inputs",
    "href": "06-visualization (1).html#accessing-the-new-ui-inputs",
    "title": "Modelling and visualizing data",
    "section": "3.2 Accessing the new UI inputs",
    "text": "3.2 Accessing the new UI inputs\n\nOn the server side, we need to deal with the new inputs\nQuestion: Which new UI inputs did we add? How can we access them on the server side?\nWe add a new reactive that cleans the data\n\n\n\n\n\n\n\nNote\n\n\n\nbindEvent ensures that the user input is only applied when the actionButton() is pressed! You can try to remove this safety measure and observe how the plot struggles to keep up when selecting multiple variables.\n\n\n\n1dat &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(guerry)[c(x, y)]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    dt\n}) %&gt;%\n2    bindEvent(input$refresh, ignoreNULL = FALSE)\n\noutput$pairplot &lt;- renderPlot({\n3    GGally::ggpairs(dat(), axisLabels = \"none\")\n})\n\n\n1\n\nCreate a reactive expression that takes care of data cleaning and stores the cleaned data in a reactive object called dat\n\n2\n\nExecute the reactive expression (and thus update dat), if and only if the refresh button is pressed\n\n3\n\nCreate a pairs plot using the newly created dat() object. This is the same as the dt dataframe that we used before with the difference that dat() updates every time input$model_x, input$model_y or input$model_std are changed.\n\n\n\n\n\n\nThe plot now reacts to user input and updates its appearance when the user selection changes!"
  },
  {
    "objectID": "06-visualization (1).html#full-code-1",
    "href": "06-visualization (1).html#full-code-1",
    "title": "Modelling and visualizing data",
    "section": "3.3 Full code",
    "text": "3.3 Full code\n\n\nFull code for reactive plotting\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(GGally)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      ),\n      ### 3.3.3 Tab: Model data ----\n      tabItem(\n        tabName = \"tab_model\",\n        fluidRow(\n          column(\n            width = 6,\n            #### Inputs(s) ----\n            box(\n              width = 12,\n              title = \"Select variables\",\n              status = \"primary\",\n              selectInput(\n                \"model_x\",\n                label = \"Select a dependent variable\",\n                choices = setNames(names(variable_names), variable_names),\n                selected = \"Literacy\"\n              ),\n              selectizeInput(\n                \"model_y\",\n                label = \"Select independent variables\",\n                choices = setNames(names(variable_names), variable_names),\n                multiple = TRUE,\n                selected = \"Commerce\"\n              ),\n              checkboxInput(\n                \"model_std\",\n                label = \"Standardize variables?\",\n                value = TRUE\n              ),\n              hr(),\n              actionButton(\n                \"refresh\",\n                label = \"Apply changes\",\n                icon = icon(\"refresh\"),\n                flat = TRUE\n              )\n            )\n          ),\n          column(\n            width = 6,\n            ##### Box: Pair diagramm ----\n            box(\n              width = 12,\n              title = \"Pair diagram\",\n              status = \"primary\",\n              plotOutput(\"pairplot\")\n            )\n            # A fourth box can go here :)\n          )\n        )\n      )\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n  ### Define & estimate model ----\n  dat &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(data_guerry)[c(x, y)]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    \n    dt\n  }) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n  \n  ### Pair diagram ----\n  output$pairplot &lt;- renderPlot({\n    GGally::ggpairs(dat(), axisLabels = \"none\")\n  })\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "06-visualization (1).html#plotly",
    "href": "06-visualization (1).html#plotly",
    "title": "Modelling and visualizing data",
    "section": "4.1 Plotly",
    "text": "4.1 Plotly\n\nPlotly is an open-source library to create charts that can be interacted with in various ways\nIt supports several programming languages including R and works seamlessly with Shiny\n\n\n\nCode to re-produce the Plotly figure\nmtcars$am[which(mtcars$am == 0)] &lt;- 'Automatic'\nmtcars$am[which(mtcars$am == 1)] &lt;- 'Manual'\nmtcars$am &lt;- as.factor(mtcars$am)\n\n\nplot_ly(\n  mtcars,\n  x = ~wt,\n  y = ~hp,\n  z = ~qsec,\n  color = ~am,\n  colors = c('#BF382A', '#0C4B8E')) %&gt;%\n  add_markers() %&gt;%\n  layout(scene = list(\n    xaxis = list(title = 'Weight'),\n    yaxis = list(title = 'Gross horsepower'),\n    zaxis = list(title = '1/4 mile time')\n  ))"
  },
  {
    "objectID": "06-visualization (1).html#plotly-and-shiny",
    "href": "06-visualization (1).html#plotly-and-shiny",
    "title": "Modelling and visualizing data",
    "section": "4.2 Plotly and Shiny",
    "text": "4.2 Plotly and Shiny\n\nPlotly requires similar components as plain plotting:\n\nplotlyOutput() creates the UI component\nrenderPlotly() does the plotting and updates the UI component\n\n\n\nmodel &lt;- tabItem(\n    \"tab_model\",\n    fluidRow(\n        column(\n            width = 6,\n            #### Box: Select variables ----\n      box(\n                width = 12,\n                title = \"Select variables\",\n                status = \"primary\",\n                selectInput(\n                    \"model_x\",\n                    label = \"Select a dependent variable\",\n                    choices = setNames(names(variable_names), variable_names),\n                    selected = \"Literacy\"\n                ),\n                selectizeInput(\n                    \"model_y\",\n                    label = \"Select independent variables\",\n                    choices = setNames(names(variable_names), variable_names),\n                    multiple = TRUE,\n                    selected = \"Commerce\"\n                ),\n                checkboxInput(\n                    \"model_std\",\n                    label = \"Standardize variables?\",\n                    value = TRUE\n                ),\n                hr(),\n                actionButton(\n                    \"refresh\",\n                    label = \"Apply changes\",\n                    icon = icon(\"refresh\"),\n                    flat = TRUE\n                )\n            )\n        ),\n        #### Box: Pair diagramm ----\n        column(\n            width = 6,\n        box(\n                width = 12,\n                title = \"Pair diagram\",\n                status = \"primary\",\n1                plotly::plotlyOutput(\"pairplot\")\n            )\n        )\n    )\n)\n\n\n1\n\nThis is the only thing that changes on the UI side when implementing Plotly. Plotly does not produce regular static plots and thus needs a special output widget."
  },
  {
    "objectID": "06-visualization (1).html#ggplotly-on-the-server-side",
    "href": "06-visualization (1).html#ggplotly-on-the-server-side",
    "title": "Modelling and visualizing data",
    "section": "4.3 ggplotly on the server side",
    "text": "4.3 ggplotly on the server side\n\nPlotly introduces a very comprehensive plotting system centered around the plot_ly() function\nLucky for us, all we have to do is call ggplotly() on our ggplot object to convert it to a plotly object\n\n\ndat &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(guerry)[c(x, y)]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    dt\n}) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n\n1output$pairplot &lt;- plotly::renderPlotly({\n    p &lt;- GGally::ggpairs(dat(), axisLabels = \"none\")\n2    plotly::ggplotly(p)\n})\n\n\n1\n\nAs Plotly plots are not static plots, we need to use a special rendering function called plotly::renderPlotly()\n\n2\n\nJust as on the UI side, we need not change much on the server side. Just wrap your ggplot2 object in a call to plotly::ggplotly()."
  },
  {
    "objectID": "06-visualization (1).html#extending-plotly",
    "href": "06-visualization (1).html#extending-plotly",
    "title": "Modelling and visualizing data",
    "section": "4.4 Extending Plotly",
    "text": "4.4 Extending Plotly\n\nSo far we made ggplot2 plots and converted them to Plotly charts using a single function call\nMany aspects of Plotly charts remain out of control as we are not using the plot_ly() function\n\n\n4.4.1 Plotly’s customization functions\n\nWe can extend Plotly objects using three functions:\n\nlayout() changes the plot organisation (think ggplot2::theme()), e.g.:\n\ncolors, sizes, fonts, positions, titles, ratios and alignment of all kinds of plot elements\nupdatemenus adds buttons or drop down menus that can change the plot style or layout (see here for examples)\nsliders adds sliders that can be useful for time series (see here for examples)\n\nconfig() changes interactivity configurations, e.g.:\n\nThe modeBarButtons options and displaylogo control the buttons in the mode bar\ntoImageButtonOptions controls the format of plot downloads\nscrollZoom enables or disables zooming by scrolling\n\nstyle() changes data-level attributes (think ggplot2::scale_), e.g.:\n\nhoverinfo controls whether tooltips are shown on hover\nmode controls whether to show points, lines and/or text in a scatter plot\nhovertext modifies the tooltips texts shown on hover\n\n\n\n\n\n4.4.2 Schema\n\nThe actual number of options is immense!\nYou can explore all options by calling plotly::schema()\n\n\nplotly::schema()\n\n\n\n\n\n\n\n\n4.4.3 Example\n\nFor our app, we can clean up the mode bar and enhance the plot download\n\n\nggplotly(p) %&gt;%\n  config(\n1    modeBarButtonsToRemove = c(\n        \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n            \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n        ),\n2    displaylogo = FALSE,\n3        toImageButtonOptions = list(\n            format = \"svg\",\n            filename = \"guerry_plot\",\n            height = NULL,\n            width = NULL\n        ),\n4        scrollZoom = TRUE\n    )\n\n\n1\n\nRemoves specified buttons from the modebar\n\n2\n\nRemoves the Plotly logo\n\n3\n\nChanges the output of snapshots taken of the plot. Setting height and width to NULL keeps the aspect ratio of the plot as it is shown in the app.\n\n4\n\nEnables zooming through scrolling"
  },
  {
    "objectID": "06-visualization (1).html#full-code-2",
    "href": "06-visualization (1).html#full-code-2",
    "title": "Modelling and visualizing data",
    "section": "4.5 Full code",
    "text": "4.5 Full code\n\n\nFull code for interactive visualization\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(GGally)\nlibrary(datawizard)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      ),\n      ### 3.3.3 Tab: Model data ----\n      tabItem(\n        tabName = \"tab_model\",\n        fluidRow(\n          column(\n            width = 6,\n            #### Inputs(s) ----\n            box(\n              width = 12,\n              title = \"Select variables\",\n              status = \"primary\",\n              selectInput(\n                \"model_x\",\n                label = \"Select a dependent variable\",\n                choices = setNames(names(variable_names), variable_names),\n                selected = \"Literacy\"\n              ),\n              selectizeInput(\n                \"model_y\",\n                label = \"Select independent variables\",\n                choices = setNames(names(variable_names), variable_names),\n                multiple = TRUE,\n                selected = \"Commerce\"\n              ),\n              checkboxInput(\n                \"model_std\",\n                label = \"Standardize variables?\",\n                value = TRUE\n              ),\n              hr(),\n              actionButton(\n                \"refresh\",\n                label = \"Apply changes\",\n                icon = icon(\"refresh\"),\n                flat = TRUE\n              )\n            )\n          ),\n          column(\n            width = 6,\n            ##### Box: Pair diagramm ----\n            box(\n              width = 12,\n              title = \"Pair diagram\",\n              status = \"primary\",\n              plotly::plotlyOutput(\"pairplot\")\n            )\n            # A fourth box can go here :)\n          )\n        )\n      )\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n  ### Define & estimate model ----\n  dat &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(data_guerry)[c(x, y)]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    \n    dt\n  }) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n  \n  ### Pair diagram ----\n  output$pairplot &lt;- plotly::renderPlotly({\n    p &lt;- GGally::ggpairs(dat(), axisLabels = \"none\")\n    \n    ggplotly(p) %&gt;%\n      config(\n        modeBarButtonsToRemove = plotly_buttons,\n        displaylogo = FALSE,\n        toImageButtonOptions = list(\n          format = \"svg\",\n          filename = \"guerry_plot\",\n          height = NULL,\n          width = NULL\n        ),\n        scrollZoom = TRUE\n      )\n  })\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "06-visualization (1).html#good-practices",
    "href": "06-visualization (1).html#good-practices",
    "title": "Modelling and visualizing data",
    "section": "5.1 Good practices",
    "text": "5.1 Good practices\n\nAppsilon’s US bee colony monitor provides an easy way to compare aggregated numbers, between-state and within-state distributions side-by-side\nWith a little bit of creativity, Shiny can be a very competent story teller (for an impressive example, take a look at John Coene’s Freedom of Press Shiny app)"
  },
  {
    "objectID": "06-visualization (1).html#extending-the-layout",
    "href": "06-visualization (1).html#extending-the-layout",
    "title": "Modelling and visualizing data",
    "section": "5.2 Extending the layout",
    "text": "5.2 Extending the layout\n\nHere, we will extend our lonely plot with a regression analysis to tell the full story of the associations of the Guerry indicators\nWe add three types of visualization: a coefficient plot, a scatter plot and a regression table\nThe three plots are tucked in a tabBox, a bs4Dash::box that supports tab panels\n\n\nmodel &lt;- tabItem(\n    \"tab_model\",\n    fluidRow(\n        column(\n            width = 6,\n            #### Box: Select variables ----\n      box(\n                width = 12,\n                title = \"Select variables\",\n                status = \"primary\",\n                selectInput(\n                    \"model_x\",\n                    label = \"Select a dependent variable\",\n                    choices = setNames(names(variable_names), variable_names),\n                    selected = \"Literacy\"\n                ),\n                selectizeInput(\n                    \"model_y\",\n                    label = \"Select independent variables\",\n                    choices = setNames(names(variable_names), variable_names),\n                    multiple = TRUE,\n                    selected = \"Commerce\"\n                ),\n                checkboxInput(\n                    \"model_std\",\n                    label = \"Standardize variables?\",\n                    value = TRUE\n                ),\n                hr(),\n                actionButton(\n                    \"refresh\",\n                    label = \"Apply changes\",\n                    icon = icon(\"refresh\"),\n                    flat = TRUE\n                )\n            ),\n      #### Box: Coefficient/Scatterplot ----\n1            tabBox(\n              status = \"primary\",\n              width = 12,\n2              type = \"tabs\",\n              ##### Tab: Coefficient plot ----\n3              tabPanel(\n                title = \"Plot: Coefficients\",\n                plotly::plotlyOutput(\"coefficientplot\")\n              ),\n              ##### Tab: Scatterplot ----\n4              tabPanel(\n                title = \"Plot: Scatterplot\",\n                plotly::plotlyOutput(\"scatterplot\")\n              ),\n              ##### Tab: Table: Regression ----\n5              tabPanel(\n                title = \"Table: Model\",\n                htmlOutput(\"tableregression\")\n              )\n            )\n        ),\n        #### Box: Pair diagramm ----\n        column(\n            width = 6,\n        box(\n                width = 12,\n                title = \"Pair diagram\",\n                status = \"primary\",\n                plotly::plotlyOutput(\"pairplot\")\n            )\n        )\n    )\n)\n\n\n1\n\nAdds a new tabBox() which can contain multiple tabPanel()\n\n2\n\nSpecify the appearance of the tabs. pills fills the entire tab panel with the status color while tabs is more subtle in its coloring.\n\n3\n\nAdd a tab that holds a Plotly coefficient plot\n\n4\n\nAdd a tab that holds a Plotly scatter plot\n\n5\n\nAdd a tab that holds a HTML regression table"
  },
  {
    "objectID": "06-visualization (1).html#digesting-the-new-layout",
    "href": "06-visualization (1).html#digesting-the-new-layout",
    "title": "Modelling and visualizing data",
    "section": "5.3 Digesting the new layout",
    "text": "5.3 Digesting the new layout\n\nQuestion: What did we add here? Which outputs need to be filled with content?\nOn the server side, we extend our reactive object with a linear regression model\n\n\n1mparams &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(guerry)[c(x, y)]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n2    form &lt;- as.formula(paste(x, \"~\", paste(y, collapse = \" + \")))\n    mod &lt;- lm(form, data = dt)\n\n3    list(x = x, y = y, data = dt,   model = mod)\n}) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n\n\n1\n\nWe renamed the dat() reactive object to mparams() as it now holds multiple arguments instead of just one dataframe\n\n2\n\nCreate a formula and produce the linear regression output\n\n3\n\nReturn a list of arguments to be used for the outputs"
  },
  {
    "objectID": "06-visualization (1).html#creating-the-output",
    "href": "06-visualization (1).html#creating-the-output",
    "title": "Modelling and visualizing data",
    "section": "5.4 Creating the output",
    "text": "5.4 Creating the output\n\nFrom this point, we can chuck the mparams reactive object into all the rendering functions\n\n\n### Pair diagram ----\n1output$pairplot &lt;- renderPlotly({\n    p &lt;- GGally::ggpairs(mparams()$data, axisLabels = \"none\")\n    ggplotly(p)\n})\n\n### Plot: Coefficientplot ----\n2output$coefficientplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    x &lt;- params$x\n    y &lt;- params$y\n\n    p &lt;- plot(parameters::model_parameters(params$model))\n\n    ggplotly(p)\n})\n\n### Plot: Scatterplot ----\n3output$scatterplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    x &lt;- params$x\n    y &lt;- params$y\n\n\n    if (length(y) == 1) {\n      p &lt;- ggplot(params$data,\n                  aes(x = .data[[params$x]],\n                      y = .data[[params$y]])) +\n        geom_point() +\n        geom_smooth() +\n        theme_light()\n    } else {\n      p &lt;- ggplot() +\n        theme_void() +\n        annotate(\"text\",\n                 label = \"Cannot create scatterplot.\\nMore than two variables selected.\",\n                 x = 0, y = 0,\n                 size = 5,\n                 colour = \"red\",\n                 hjust = 0.5,\n                 vjust = 0.5) +\n      xlab(NULL)\n\n    }\n\n    ggplotly(p)\n})\n\n### Table: Regression ----\n4output$tableregression &lt;- renderUI({\n    params &lt;- mparams()\n    HTML(modelsummary(\n        dvnames(list(params$model)),\n      gof_omit = \"AIC|BIC|Log|Adj|RMSE\"\n    ))\n})\n\n\n1\n\nAgain, we need to change the input to the ggpairs() function as the name and structure of the reactive object has changed.\n\n2\n\nCreate a Plotly coefficient plot using the parameters package\n\n3\n\nCreate a Plotly scatter plot for bi-variate regression. If more than one y variable is selected, an empty plot and a warning message is created.\n\n4\n\nCreate a model table using the modelsummary package and prepare it for HTML rendering."
  },
  {
    "objectID": "06-visualization (1).html#full-code-3",
    "href": "06-visualization (1).html#full-code-3",
    "title": "Modelling and visualizing data",
    "section": "5.5 Full code",
    "text": "5.5 Full code\n\n\nFull code for contextual visualization\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(datawizard)\nlibrary(parameters)\nlibrary(performance)\nlibrary(modelsummary)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n## Prepare modebar clean-up ----\n## Used for modelling\nplotly_buttons &lt;- c(\n  \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n  \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n)\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      img(src = \"../workshop-logo.png\", width = 35, height = 35),\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_intro\", text = \"Introduction\", icon = icon(\"home\")),\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      menuItem(tabName = \"tab_model\", text = \"Model data\", icon = icon(\"chart-line\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.1.1 Tab: Introduction ----\n      tabItem(\n        tabName = \"tab_intro\",\n        jumbotron(\n          title = \"The Guerry Dashboard\",\n          lead = \"A Shiny app to explore the classic Guerry dataset.\",\n          status = \"info\",\n          btnName = NULL\n        ),\n        fluidRow(\n          column(width = 1),\n          column(\n            width = 6,\n            box(\n              title = \"About\",\n              status = \"primary\",\n              width = 12,\n              blockQuote(HTML(\"André-Michel Guerry was a French lawyer and\n                          amateur statistician. Together with Adolphe\n                          Quetelet he may be regarded as the founder of\n                          moral statistics which led to the development\n                          of criminology, sociology and ultimately,\n                          modern social science. &lt;br&gt;— Wikipedia: &lt;a href='https://en.wikipedia.org/wiki/Andr%C3%A9-Michel_Guerry'&gt;André-Michel Guerry&lt;/a&gt;\"),\n                         color = \"primary\"),\n              p(HTML(\"Andre-Michel Guerry (1833) was the first to \n              systematically collect and analyze social data \n               on such things as crime, literacy and suicide \n               with the view to determining social laws and the \n               relations among these variables. The Guerry data \n               frame comprises a collection of 'moral variables' \n               (cf. &lt;i&gt;&lt;a href='https://en.wikipedia.org/wiki/Moral_statistics'&gt;moral statistics&lt;/a&gt;&lt;/i&gt;) \n               on the 86 departments of France around 1830. \n               A few additional variables have been added \n               from other sources. In total the data frame has \n               86 observations (the departments of France) on 23 variables &lt;i&gt;(Source: &lt;code&gt;?Guerry&lt;/code&gt;)&lt;/i&gt;. \n               In this app, we aim to explore Guerry’s data\n                using spatial exploration and regression modelling.\")),\n              hr(),\n              accordion(\n                id = \"accord\",\n                accordionItem(\n                  title = \"References\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  \"The following sources are referenced in this app:\",\n                  tags$ul(\n                    class = \"list-style: none\",\n                    style = \"margin-left: -30px;\",\n                    p(\"Angeville, A. (1836). Essai sur la Statistique de la Population française Paris: F. Doufour.\"),\n                    p(\"Guerry, A.-M. (1833). Essai sur la statistique morale de la France Paris: Crochard. English translation: Hugh P. Whitt and Victor W. Reinking, Lewiston, N.Y. : Edwin Mellen Press, 2002.\"),\n                    p(\"Parent-Duchatelet, A. (1836). De la prostitution dans la ville de Paris, 3rd ed, 1857, p. 32, 36\"),\n                    p(\"Palsky, G. (2008). Connections and exchanges in European thematic cartography. The case of 19th century choropleth maps. Belgeo 3-4, 413-426.\")\n                  )\n                ),\n                accordionItem(\n                  title = \"Details\",\n                  status = \"primary\",\n                  solidHeader = FALSE,\n                  p(\"This app was created as part of a Shiny workshop held in July 2023\"),\n                  p(\"Last update: June 2023\"),\n                  p(\"Further information about the data can be found\",\n                    a(\"here.\", href = \"https://www.datavis.ca/gallery/guerry/guerrydat.html\"))\n                )\n              )\n            )\n          ),\n          column(\n            width = 4,\n            box(\n              title = \"André Michel Guerry\",\n              status = \"primary\",\n              width = 12,\n              tags$img(src = \"../guerry.jpg\", width = \"100%\"),\n              p(\"Source: Palsky (2008)\")\n            )\n          )\n        )\n      ),\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      ),\n      ### 3.3.3 Tab: Model data ----\n      tabItem(\n        tabName = \"tab_model\",\n        fluidRow(\n          column(\n            width = 6,\n            #### Inputs(s) ----\n            box(\n              width = 12,\n              title = \"Select variables\",\n              status = \"primary\",\n              selectInput(\n                \"model_x\",\n                label = \"Select a dependent variable\",\n                choices = setNames(names(variable_names), variable_names),\n                selected = \"Literacy\"\n              ),\n              selectizeInput(\n                \"model_y\",\n                label = \"Select independent variables\",\n                choices = setNames(names(variable_names), variable_names),\n                multiple = TRUE,\n                selected = \"Commerce\"\n              ),\n              checkboxInput(\n                \"model_std\",\n                label = \"Standardize variables?\",\n                value = TRUE\n              ),\n              hr(),\n              actionButton(\n                \"refresh\",\n                label = \"Apply changes\",\n                icon = icon(\"refresh\"),\n                flat = TRUE\n              )\n            ),\n            #### Outputs(s) ----\n            tabBox(\n              status = \"primary\",\n              type = \"tabs\",\n              title = \"Model analysis\",\n              side = \"right\",\n              width = 12,\n              ##### Tabpanel: Coefficient plot ----\n              tabPanel(\n                title = \"Plot: Coefficients\",\n                plotly::plotlyOutput(\"coefficientplot\")\n              ),\n              ##### Tabpanel: Scatterplot ----\n              tabPanel(\n                title = \"Plot: Scatterplot\",\n                plotly::plotlyOutput(\"scatterplot\")\n              ),\n              ##### Tabpanel: Table: Regression ----\n              tabPanel(\n                title = \"Table: Model\",\n                htmlOutput(\"tableregression\")\n              )\n            )\n          ),\n          column(\n            width = 6,\n            ##### Box: Pair diagramm ----\n            box(\n              width = 12,\n              title = \"Pair diagram\",\n              status = \"primary\",\n              plotly::plotlyOutput(\"pairplot\")\n            )\n            # A fourth box can go here :)\n          )\n        )\n      )\n    ) # end tabItems\n  ),\n  \n  ## 3.4 Footer (bottom)----\n  footer = dashboardFooter(\n    left = span(\n      \"This dashboard was created by Jonas Lieth and Paul Bauer. Find the source code\",\n      a(\"here.\", href = \"https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry\"),\n      \"It is based on data from the\",\n      a(\"Guerry R package.\", href = \"https://cran.r-project.org/web/packages/Guerry/index.html\")\n    )\n  ),\n  ## 3.5 Controlbar (top)----\n  controlbar = dashboardControlbar(\n    div(class = \"p-3\", skinSelector()),\n    skin = \"light\"\n  )  \n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, var]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n  \n  ## 4.2 Model data ----\n  ### Define & estimate model ----\n  mparams &lt;- reactive({\n    x &lt;- input$model_x\n    y &lt;- input$model_y\n    dt &lt;- sf::st_drop_geometry(data_guerry)[c(x, y)]\n    dt_labels &lt;- sf::st_drop_geometry(data_guerry)[c(\"Department\", \"Region\")]\n    if (input$model_std) dt &lt;- datawizard::standardise(dt)\n    form &lt;- as.formula(paste(x, \"~\", paste(y, collapse = \" + \")))\n    mod &lt;- lm(form, data = dt)\n    \n    list(\n      x = x,\n      y = y,\n      data = dt,\n      data_labels = dt_labels,\n      model = mod\n    )\n  }) %&gt;%\n    bindEvent(input$refresh, ignoreNULL = FALSE)\n  \n  ### Pair diagram ----\n  output$pairplot &lt;- plotly::renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    p &lt;- GGally::ggpairs(params$data, axisLabels = \"none\")\n\n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Coefficientplot ----\n  output$coefficientplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    x &lt;- params$x\n    y &lt;- params$y\n    \n    p &lt;- plot(parameters::model_parameters(params$model))\n    \n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Plot: Scatterplot ----\n  output$scatterplot &lt;- renderPlotly({\n    params &lt;- mparams()\n    dt &lt;- params$data\n    dt_labels &lt;- params$data_labels\n    x &lt;- params$x \n    y &lt;- params$y\n    \n    \n    if (length(y) == 1) {\n      p &lt;- ggplot(params$data, \n                  aes(x = .data[[params$x]], \n                      y = .data[[params$y]])) +\n        geom_point(aes(text = paste0(\"Department: \", \n                                     dt_labels[[\"Department\"]],\n                                     \"&lt;br&gt;Region: \", \n                                     dt_labels[[\"Region\"]])),\n                   color = \"black\") +\n        geom_smooth() + \n        geom_smooth(method = \"lm\") +\n        theme_light()\n    } else {\n      p &lt;- ggplot() +\n        theme_void() +\n        annotate(\"text\", \n                 label = \"Cannot create scatterplot.\\nMore than two variables selected.\", \n                 x = 0, y = 0, \n                 size = 5, \n                 colour = \"red\",\n                 hjust = 0.5,\n                 vjust = 0.5) +\n        xlab(NULL)\n      \n    }\n    \n    ggplotly(p) %&gt;%\n      config(modeBarButtonsToRemove = plotly_buttons,\n             displaylogo = FALSE)\n  })\n  \n  ### Table: Regression ----\n  output$tableregression &lt;- renderUI({\n    params &lt;- mparams()\n    HTML(modelsummary(\n      dvnames(list(params$model)),\n      gof_omit = \"AIC|BIC|Log|Adj|RMSE\"\n    ))\n  })\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "05-server-reactive-programming-ii.html",
    "href": "05-server-reactive-programming-ii.html",
    "title": "Server: Reactive programming II",
    "section": "",
    "text": "Learning outcomes\n\nBecome familiar with reactive functions and observers\nUnderstand how to change the UI reactively through updaters\nControl the reactive graph through events, isolation, and truthiness\nLet Shiny’s reactive flow work for, not against you",
    "crumbs": [
      "Server: Reactive programming II"
    ]
  },
  {
    "objectID": "05-server-reactive-programming-ii.html#reactive",
    "href": "05-server-reactive-programming-ii.html#reactive",
    "title": "Server: Reactive programming II",
    "section": "3.1 Reactive",
    "text": "3.1 Reactive\n\nReactives (reactive()) wrapped up:\n\nReactives wrap an R expression to create a reactive expression\nThey “react” to an input, i.e. are evaluated when an input changes.\nThey are both reactive producers and consumer. They take reactive values and return a reactive value.\nThey must be assigned to a name. They can be referred to by other reactive consumers by being called like a function.\nThey are evaluated lazily, i.e. they only run if they are forced to, for example when they are called by another reactive.\nThey are cached, i.e. when called back-to-back, without any dependency changing, then they return the same value twice\n\nReactives have two clear uses:\n\nThey reduce the amount of computation that needs to be done by Shiny\nThey reduce the mental strain in trying to understand complex Shiny code\n\n\n\n\n\n\n\n\nTip\n\n\n\nConceptually and technically, reactives may be compared to traditional R functions. Functional programming follows the “rule of three”: If code would be duplicated three times, wrap it in a function. Shiny follows the rule of two. This is because reactives not only simplify code for humans but also for machines: R only evaluates reactives if it has to. This can dramatically speed up an application.\nAlso, reactives literally are functions:\n\nis.function(reactive({}))\n\n[1] TRUE\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReactive graph without reactives\n\nReactive graph with reactives",
    "crumbs": [
      "Server: Reactive programming II"
    ]
  },
  {
    "objectID": "05-server-reactive-programming-ii.html#observers",
    "href": "05-server-reactive-programming-ii.html#observers",
    "title": "Server: Reactive programming II",
    "section": "3.2 Observers",
    "text": "3.2 Observers\n\nObservers (observe()) are similar to reactives:\n\nThey also take an arbitrary R expression.\nThey also react to an input.\n\nBut they also carry important differences:\n\nThey are not assigned to a name, thus they cannot be referred to from other reactive consumers and their return value is simply discarded. This also means they are terminal nodes (reactive consumers) in the reactive graphs – just like outputs.\nThey are evaluated eagerly, i.e. they run as soon as possible and do not wait for their dependencies.\nThey are forgetful, their previous output is not cached.\n\nSince they are terminal nodes but do not produce a visible output, they are something between a reactive and an output\nTheir uses are manifold, but here are some examples:\n\nLogging to the R console\nUpdating inputs (see below)\nReactively changing the UI\nCommunicating with a remote storage (e.g. a database or a cloud)\nEssentially everything that does not require assigning to a name\n\n\n\n\n\n\n\n\nTip\n\n\n\nConceptually, observers may be compared to the tidyverse function purrr::walk, which iterates over a list or a vector and performs “side-effects” like writing to files. Unlike purrr::walk, though, observe is probably much more common-place.\n\n\n\n# the reactive takes the inputs and produces a reactive value\n# which can be re-used in other reactive expressions\nfiltered &lt;- reactive({\n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    range &lt;- input$range\n    \n    # select country\n    if (!is.null(input$countries)) {\n      ess &lt;- ess[ess$country %in% input$countries, ]\n    }\n    \n    # select variable\n    ess[c(\"idno\", \"country\", xvar, yvar)]\n})\n\n# the plot output is a \"reactive consumer\" that takes\n# the reactive value and makes a plot out of it\noutput$plot &lt;- renderPlot({\n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    plot_data &lt;- filtered() %&gt;%\n      drop_na() %&gt;%\n      mutate(across(where(is.numeric), .fns = as.ordered))\n    \n    ggplot(plot_data) +\n      aes(x = .data[[xvar]], y = .data[[yvar]], group = .data[[xvar]]) +\n      geom_violin(fill = \"lightblue\", show.legend = FALSE) +\n      theme_classic()\n})\n\n# the observer also takes the reactive value and prints it to the console\n# it is also a reactive consumer and does not return anything\nobserve({\n  print(filtered())\n})\n\n\n\nComplete code\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(shiny)\nlibrary(plotly)\nlibrary(leaflet)\nlibrary(haven)\n\ness &lt;- readRDS(\"data/ess_trust.rds\")\ness_geo &lt;- readRDS(\"data/ess_trust_geo.rds\")\n\n# UI ----\nui &lt;- fluidPage(\n  titlePanel(\"European Social Survey - round 10\"),\n  \n  ## Sidebar ----\n  sidebarLayout(\n    sidebarPanel(\n      ### select dependent variable\n      selectInput(\n        \"xvar\",\n        label = \"Select a dependent variable\",\n        choices = c(\n          \"Trust in country's parliament\" = \"trust_parliament\",\n          \"Trust in the legal system\" = \"trust_legal\",\n          \"Trust in the police\" = \"trust_police\",\n          \"Trust in politicians\" = \"trust_politicians\",\n          \"Trust in political parties\" = \"trust_parties\",\n          \"Trust in the European Parliament\" = \"trust_eu\",\n          \"Trust in the United Nations\" = \"trust_un\"\n        )\n      ),\n      \n      ### select a variable ----\n      selectInput(\n        \"yvar\",\n        label = \"Select an independent variable\",\n        choices = c(\n          \"Placement on the left-right scale\" = \"left_right\",\n          \"Age\" = \"age\",\n          \"Feeling about household's income\" = \"income_feeling\",\n          \"How often do you use the internet?\" = \"internet_use\",\n          \"How happy are you?\" = \"happiness\"\n        )\n      ),\n      \n      ### select a country ----\n      selectizeInput(\n        \"countries\",\n        label = \"Filter by country\",\n        choices = unique(ess$country),\n        multiple = TRUE\n      )\n    ),\n    \n    ## Main panel ----\n    mainPanel(\n      tabsetPanel(\n        type = \"tabs\",\n        \n        ### Table tab ----\n        tabPanel(\n          title = \"Table\",\n          div(\n            style = \"height: 600px; overflow-y: auto;\",\n            tableOutput(\"table\")\n          )\n        ),\n        \n        ### Plot tab ----\n        tabPanel(\n          title = \"Histogram\",\n          plotlyOutput(\"plot\", height = 600)\n        )\n      )\n    )\n  )\n)\n\n\n# Server ----\nserver &lt;- function(input, output, session) {\n  # filter data ----\n  filtered &lt;- reactive({\n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    range &lt;- input$range\n    \n    # select country\n    if (!is.null(input$countries)) {\n      ess &lt;- ess[ess$country %in% input$countries, ]\n    }\n    \n    # select variable\n    ess[c(\"idno\", \"country\", xvar, yvar)]\n  })\n  \n  # render table ----\n  output$table &lt;- renderTable({\n    ess[ess$country %in% input$countries, ]\n  }, height = 400)\n  \n  # render plot ----\n  output$plot &lt;- renderPlotly({\n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    plot_data &lt;- filtered() %&gt;%\n      drop_na() %&gt;%\n      mutate(across(where(is.numeric), .fns = as.ordered))\n    \n    ggplot(plot_data) +\n      aes(x = .data[[xvar]], y = .data[[yvar]], group = .data[[xvar]]) +\n      geom_violin(fill = \"lightblue\", show.legend = FALSE) +\n      theme_classic()\n  })\n  \n  # executes everytime `filtered()` is updated\n  # prints the filtered dataset to the console\n  observe({\n    print(filtered())\n  })\n}\n\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Server: Reactive programming II"
    ]
  },
  {
    "objectID": "05-server-reactive-programming-ii.html#bindevent",
    "href": "05-server-reactive-programming-ii.html#bindevent",
    "title": "Server: Reactive programming II",
    "section": "4.1 bindEvent",
    "text": "4.1 bindEvent\n\nThe bindEvent function binds a reactive expression to one or multiple events\nThe reactive expression is evaluated if and only if the event is triggered\nbindEvent locks up a reactive expression unless a specific event is triggered\nYou can use bindEvent on all sorts of reactive expressions: reactives, observers, and output renderers\n\n\nreactive({\n  # do something\n}) %&gt;%\n  bindEvent(input$button)\n\n\n4.1.1 Arguments to bindEvent\n\nbindEvent takes three arguments:\n\nignoreNULL: By default, every event is an event, even if it is NULL. An unpressed button would then also count as an event. If you need your plot to render only before pressing that button, then ignoring NULL is the right choice.\nignoreInit: By default, events are triggered when the reactive expressions are first initialized. This can be bad news for dynamically created UI elements (which are beyond this workshop).\nonce: If used on an observer, this argument can be used to destroy that observer after its first use.\n\n\n\n\n4.1.2 Example\n\nTo exemplify we will add an action button, that serves the following role:\n\nIf the inputs are changed, nothing should happen to the plot\nOnly if the button is pressed, shall the plot data be recalculated\n\n\nIn the UI:\n\nactionButton(\n  \"button\",\n  label = \"Update parameters\",\n  icon = icon(\"refresh\")\n)\n\nIn the server function:\n\nfiltered &lt;- reactive({\n  xvar &lt;- input$xvar\n  yvar &lt;- input$yvar\n  range &lt;- input$range\n  \n  # select country\n  if (!is.null(input$countries)) {\n    ess &lt;- ess[ess$country %in% input$countries, ]\n  }\n  \n  # select variable\n  ess[c(\"idno\", \"country\", xvar, yvar)]\n}) %&gt;%\n  bindEvent(input$button, ignoreNULL = FALSE)\n\n\noutput$plot &lt;- renderPlotly({\n  plot_data &lt;- filtered() %&gt;%\n    drop_na() %&gt;%\n    mutate(across(where(is.numeric), .fns = as.ordered))\n  \n  xvar &lt;- names(plot_data)[[3]]\n  yvar &lt;- names(plot_data)[[4]]\n  \n  ggplot(plot_data) +\n    aes(x = .data[[xvar]], y = .data[[yvar]], group = .data[[xvar]]) +\n    geom_violin(fill = \"lightblue\", show.legend = FALSE) +\n    theme_classic()\n})\n\n\n\nComplete code (important lines are highlighted)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(shiny)\nlibrary(plotly)\nlibrary(leaflet)\nlibrary(haven)\n\ness &lt;- readRDS(\"../../../data/ess_trust.rds\")\ness_geo &lt;- readRDS(\"../../../data/ess_trust_geo.rds\")\n\n# UI ----\nui &lt;- fluidPage(\n  titlePanel(\"European Social Survey - round 10\"),\n  \n  ## Sidebar ----\n  sidebarLayout(\n    sidebarPanel(\n      ### select dependent variable\n      selectInput(\n        \"xvar\",\n        label = \"Select a dependent variable\",\n        choices = c(\n          \"Trust in country's parliament\" = \"trust_parliament\",\n          \"Trust in the legal system\" = \"trust_legal\",\n          \"Trust in the police\" = \"trust_police\",\n          \"Trust in politicians\" = \"trust_politicians\",\n          \"Trust in political parties\" = \"trust_parties\",\n          \"Trust in the European Parliament\" = \"trust_eu\",\n          \"Trust in the United Nations\" = \"trust_un\"\n        )\n      ),\n      \n      ### select a variable ----\n      selectInput(\n        \"yvar\",\n        label = \"Select an independent variable\",\n        choices = c(\n          \"Placement on the left-right scale\" = \"left_right\",\n          \"Age\" = \"age\",\n          \"Feeling about household's income\" = \"income_feeling\",\n          \"How often do you use the internet?\" = \"internet_use\",\n          \"How happy are you?\" = \"happiness\"\n        )\n      ),\n      \n      ### select a country ----\n      selectizeInput(\n        \"countries\",\n        label = \"Filter by country\",\n        choices = unique(ess$country),\n        multiple = TRUE\n      ),\n      \n      actionButton(\n        \"button\",\n        label = \"Update parameters\",\n        icon = icon(\"refresh\")\n      )\n    ),\n    \n    ## Main panel ----\n    mainPanel(\n      tabsetPanel(\n        type = \"tabs\",\n        \n        ### Table tab ----\n        tabPanel(\n          title = \"Table\",\n          div(\n            style = \"height: 600px; overflow-y: auto;\",\n            tableOutput(\"table\")\n          )\n        ),\n        \n        ### Plot tab ----\n        tabPanel(\n          title = \"Histogram\",\n          plotlyOutput(\"plot\", height = 600)\n        )\n      )\n    )\n  )\n)\n\n\n# Server ----\nserver &lt;- function(input, output, session) {\n  # filter data ----\n  filtered &lt;- reactive({\n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    range &lt;- input$range\n    \n    # select country\n    if (!is.null(input$countries)) {\n      ess &lt;- ess[ess$country %in% input$countries, ]\n    }\n    \n    # select variable\n    ess[c(\"idno\", \"country\", xvar, yvar)]\n  }) %&gt;%\n    bindEvent(input$button, ignoreNULL = FALSE)\n  \n  # render table ----\n  output$table &lt;- renderTable({\n    ess[ess$country %in% input$countries, ]\n  }, height = 400)\n  \n  # render plot ----\n  output$plot &lt;- renderPlotly({\n    plot_data &lt;- filtered() %&gt;%\n      drop_na() %&gt;%\n      mutate(across(where(is.numeric), .fns = as.ordered))\n    \n    xvar &lt;- names(plot_data)[[3]]\n    yvar &lt;- names(plot_data)[[4]]\n    \n    ggplot(plot_data) +\n      aes(x = .data[[xvar]], y = .data[[yvar]], group = .data[[xvar]]) +\n      geom_violin(fill = \"lightblue\", show.legend = FALSE) +\n      theme_classic()\n  })\n  \n  # executes everytime `filtered()` is updated\n  # prints the filtered dataset to the console\n  observe({\n    print(filtered())\n  })\n}\n\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Server: Reactive programming II"
    ]
  },
  {
    "objectID": "05-server-reactive-programming-ii.html#required-values-req",
    "href": "05-server-reactive-programming-ii.html#required-values-req",
    "title": "Server: Reactive programming II",
    "section": "6.1 Required values (req)",
    "text": "6.1 Required values (req)\n\nTruthiness is useful for Shiny’s req function\nreq is equivalent to if statements in R with two exceptions:\n\nThey test for truthiness (instead of TRUE/FALSE)\nThey raise a “silent” exception, i.e. they cancel any ongoing computation without logging or displaying an error\n\nreq is useful to stop reactive behavior when certain conditions are not met",
    "crumbs": [
      "Server: Reactive programming II"
    ]
  },
  {
    "objectID": "05-server-reactive-programming-ii.html#example-1",
    "href": "05-server-reactive-programming-ii.html#example-1",
    "title": "Server: Reactive programming II",
    "section": "5.2 Example",
    "text": "5.2 Example\n\nTo exemplify, we add a new slider to the app:\n\n\nsliderInput(\n  \"slider\",\n  label = \"Select a range for the independent variable\",\n  min = min(ess$left_right, na.rm = TRUE),\n  max = max(ess$left_right, na.rm = TRUE),\n  value = range(ess$left_right, na.rm = TRUE),\n  step = 1\n)\n\n\nNote that min, max, and value are fixed\n…, but the independent variable is not: we can select a different variable with a different range\nWe can thus implement an updater that dynamically updates the slider with new ranges:\n\n\nobserve({\n  yvar &lt;- input$yvar\n  freezeReactiveValue(input, \"slider\")\n  updateSliderInput(\n    session = session,\n1    inputId = \"slider\",\n2    min = min(ess[[yvar]], na.rm = TRUE),\n    max = max(ess[[yvar]], na.rm = TRUE),\n    value = range(ess[[yvar]], na.rm = TRUE)\n  )\n}) %&gt;%\n3  bindEvent(input$yvar)\n\nfiltered &lt;- reactive({\n  xvar &lt;- input$xvar\n  yvar &lt;- input$yvar\n  \n  # select country\n  if (!is.null(input$countries)) {\n    ess &lt;- ess[ess$country %in% input$countries, ]\n  }\n\n  # apply range\n4  ess &lt;- ess[\n    ess[[yvar]] &gt; input$slider[1] &\n    ess[[yvar]] &lt; input$slider[2],\n  ]\n  \n  # select variable\n  ess[c(\"idno\", \"country\", xvar, yvar)]\n})\n\n\n1\n\nThe updater references the ID of the input that needs to change\n\n2\n\nMin, max, and value are adapted to the select Y variable\n\n3\n\nThe updater only triggers when a new Y variable is selected\n\n4\n\nThe dataset is filtered according to the slider\n\n\n\n\n\n\nComplete code (important lines are highlighted)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(shiny)\nlibrary(plotly)\nlibrary(leaflet)\nlibrary(haven)\n\ness &lt;- readRDS(\"../../../data/ess_trust.rds\")\ness_geo &lt;- readRDS(\"../../../data/ess_trust_geo.rds\")\n\n# UI ----\nui &lt;- fluidPage(\n  titlePanel(\"European Social Survey - round 10\"),\n  \n  ## Sidebar ----\n  sidebarLayout(\n    sidebarPanel(\n      ### select dependent variable\n      selectInput(\n        \"xvar\",\n        label = \"Select a dependent variable\",\n        choices = c(\n          \"Trust in country's parliament\" = \"trust_parliament\",\n          \"Trust in the legal system\" = \"trust_legal\",\n          \"Trust in the police\" = \"trust_police\",\n          \"Trust in politicians\" = \"trust_politicians\",\n          \"Trust in political parties\" = \"trust_parties\",\n          \"Trust in the European Parliament\" = \"trust_eu\",\n          \"Trust in the United Nations\" = \"trust_un\"\n        )\n      ),\n      \n      ### select a variable ----\n      selectInput(\n        \"yvar\",\n        label = \"Select an independent variable\",\n        choices = c(\n          \"Placement on the left-right scale\" = \"left_right\",\n          \"Age\" = \"age\",\n          \"Feeling about household's income\" = \"income_feeling\",\n          \"How often do you use the internet?\" = \"internet_use\",\n          \"How happy are you?\" = \"happiness\"\n        )\n      ),\n      \n      ### select a country ----\n      selectizeInput(\n        \"countries\",\n        label = \"Filter by country\",\n        choices = unique(ess$country),\n        multiple = TRUE\n      ),\n      \n      sliderInput(\n        \"slider\",\n        label = \"Select a range for the independent variable\",\n        min = min(ess$left_right, na.rm = TRUE),\n        max = max(ess$left_right, na.rm = TRUE),\n        value = range(ess$left_right, na.rm = TRUE),\n        step = 1\n      )\n    ),\n    \n    ## Main panel ----\n    mainPanel(\n      tabsetPanel(\n        type = \"tabs\",\n        \n        ### Table tab ----\n        tabPanel(\n          title = \"Table\",\n          div(\n            style = \"height: 600px; overflow-y: auto;\",\n            tableOutput(\"table\")\n          )\n        ),\n        \n        ### Plot tab ----\n        tabPanel(\n          title = \"Histogram\",\n          plotlyOutput(\"plot\", height = 600)\n        )\n      )\n    )\n  )\n)\n\n\n# Server ----\nserver &lt;- function(input, output, session) {\n  # filter data ----\n  filtered &lt;- reactive({\n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    range &lt;- input$slider\n    \n    # select country\n    if (!is.null(input$countries)) {\n      ess &lt;- ess[ess$country %in% input$countries, ]\n    }\n\n    # apply range\n    ess &lt;- ess[\n      ess[[yvar]] &gt; range[1] &\n      ess[[yvar]] &lt; range[2], \n    ]\n    \n    # select variable\n    ess[c(\"idno\", \"country\", xvar, yvar)]\n  })\n  \n  # render table ----\n  output$table &lt;- renderTable({\n    ess[ess$country %in% input$countries, ]\n  }, height = 400)\n  \n  # render plot ----\n  output$plot &lt;- renderPlotly({\n    plot_data &lt;- filtered() %&gt;%\n      drop_na() %&gt;%\n      mutate(across(where(is.numeric), .fns = as.ordered))\n    \n    xvar &lt;- names(plot_data)[[3]]\n    yvar &lt;- names(plot_data)[[4]]\n\n    ggplot(plot_data) +\n      aes(x = .data[[xvar]], y = .data[[yvar]], group = .data[[xvar]]) +\n      geom_violin(fill = \"lightblue\", show.legend = FALSE) +\n      theme_classic()\n  })\n  \n  observe({\n    yvar &lt;- input$yvar\n    freezeReactiveValue(input, \"slider\")\n    updateSliderInput(\n      session = session,\n      inputId = \"slider\",\n      min = min(ess[[yvar]], na.rm = TRUE),\n      max = max(ess[[yvar]], na.rm = TRUE),\n      value = range(ess[[yvar]], na.rm = TRUE)\n    )\n  }) %&gt;%\n    bindEvent(input$yvar)\n}\n\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Server: Reactive programming II"
    ]
  },
  {
    "objectID": "05-server-reactive-programming-ii.html#implementation",
    "href": "05-server-reactive-programming-ii.html#implementation",
    "title": "Server: Reactive programming II",
    "section": "5.1 Implementation",
    "text": "5.1 Implementation\n\nUpdaters are usually found in an observer.\nBecause they often do not depend on any input, they are best coupled with bindEvent.\nIt can also be useful to combine them with freezeReactiveValue\n\nUpdating a value triggers an event\nFreezing can prevent the event from triggering twice: when changing the input and when updating.\n\n\n\nobserve({\n1  freezeReactiveValue(input, \"id_of_input\")\n  updateSelectInput(\n2    session = session,\n3    inputId = \"id_of_input\",\n4    choices = c(\"a\", \"b\", \"c\")\n    selected = \"b\"\n  ) %&gt;%\n5    bindEvent(input$button)\n})\n\n\n1\n\nFreeze id_of_input to prevent it from triggering an event twice, first when clicking on the button, and second when updating the input.\n\n2\n\nThe session object of the server function has to be passed to every update function. This has no deeper meaning.\n\n3\n\nThe inputId argument takes the ID of the widget that is to be updated\n\n4\n\nEvery update function has different arguments to alter different parts of the input widget\n\n5\n\nBind the observer to an input that should trigger the input update",
    "crumbs": [
      "Server: Reactive programming II"
    ]
  },
  {
    "objectID": "05-server-reactive-programming-ii.html#example-2",
    "href": "05-server-reactive-programming-ii.html#example-2",
    "title": "Server: Reactive programming II",
    "section": "6.2 Example",
    "text": "6.2 Example\n\nIn our Shiny app, we can use req to cancel plotting when no country is specified\nselectizeInput, which is used to select a country, returns NULL when no value is specified\nNow, if we do not specify a country, the plot simply will not render\n\n\nfiltered &lt;- reactive({\n  req(input$countries)\n  \n  xvar &lt;- input$xvar\n  yvar &lt;- input$yvar\n  range &lt;- input$range\n  \n  # select country\n  if (!is.null(input$countries)) {\n    ess &lt;- ess[ess$country %in% input$countries, ]\n  }\n  \n  # select variable\n  ess[c(\"idno\", \"country\", xvar, yvar)]\n}) %&gt;%\n  bindEvent(input$button, ignoreNULL = FALSE)\n\n\n\nComplete code (important lines are highlighted)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(shiny)\nlibrary(plotly)\nlibrary(leaflet)\nlibrary(haven)\n\ness &lt;- readRDS(\"../../../data/ess_trust.rds\")\ness_geo &lt;- readRDS(\"../../../data/ess_trust_geo.rds\")\n\n# UI ----\nui &lt;- fluidPage(\n  titlePanel(\"European Social Survey - round 10\"),\n  \n  ## Sidebar ----\n  sidebarLayout(\n    sidebarPanel(\n      ### select dependent variable\n      selectInput(\n        \"xvar\",\n        label = \"Select a dependent variable\",\n        choices = c(\n          \"Trust in country's parliament\" = \"trust_parliament\",\n          \"Trust in the legal system\" = \"trust_legal\",\n          \"Trust in the police\" = \"trust_police\",\n          \"Trust in politicians\" = \"trust_politicians\",\n          \"Trust in political parties\" = \"trust_parties\",\n          \"Trust in the European Parliament\" = \"trust_eu\",\n          \"Trust in the United Nations\" = \"trust_un\"\n        )\n      ),\n      \n      ### select a variable ----\n      selectInput(\n        \"yvar\",\n        label = \"Select an independent variable\",\n        choices = c(\n          \"Placement on the left-right scale\" = \"left_right\",\n          \"Age\" = \"age\",\n          \"Feeling about household's income\" = \"income_feeling\",\n          \"How often do you use the internet?\" = \"internet_use\",\n          \"How happy are you?\" = \"happiness\"\n        )\n      ),\n      \n      ### select a country ----\n      selectizeInput(\n        \"countries\",\n        label = \"Filter by country\",\n        choices = unique(ess$country),\n        multiple = TRUE\n      ),\n      \n      actionButton(\n        \"button\",\n        label = \"Update parameters\",\n        icon = icon(\"refresh\")\n      )\n    ),\n    \n    ## Main panel ----\n    mainPanel(\n      tabsetPanel(\n        type = \"tabs\",\n        \n        ### Table tab ----\n        tabPanel(\n          title = \"Table\",\n          div(\n            style = \"height: 600px; overflow-y: auto;\",\n            tableOutput(\"table\")\n          )\n        ),\n        \n        ### Plot tab ----\n        tabPanel(\n          title = \"Histogram\",\n          plotlyOutput(\"plot\", height = 600)\n        )\n      )\n    )\n  )\n)\n\n\n# Server ----\nserver &lt;- function(input, output, session) {\n  # filter data ----\n  filtered &lt;- reactive({\n    req(input$countries)\n    \n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    range &lt;- input$range\n    \n    # select country\n    if (!is.null(input$countries)) {\n      ess &lt;- ess[ess$country %in% input$countries, ]\n    }\n    \n    # select variable\n    ess[c(\"idno\", \"country\", xvar, yvar)]\n  }) %&gt;%\n    bindEvent(input$button, ignoreNULL = FALSE)\n  \n  # render table ----\n  output$table &lt;- renderTable({\n    ess[ess$country %in% input$countries, ]\n  }, height = 400)\n  \n  # render plot ----\n  output$plot &lt;- renderPlotly({\n    plot_data &lt;- filtered() %&gt;%\n      drop_na() %&gt;%\n      mutate(across(where(is.numeric), .fns = as.ordered))\n    \n    xvar &lt;- names(plot_data)[[3]]\n    yvar &lt;- names(plot_data)[[4]]\n    \n    ggplot(plot_data) +\n      aes(x = .data[[xvar]], y = .data[[yvar]], group = .data[[xvar]]) +\n      geom_violin(fill = \"lightblue\", show.legend = FALSE) +\n      theme_classic()\n  })\n  \n  # executes everytime `filtered()` is updated\n  # prints the filtered dataset to the console\n  observe({\n    print(filtered())\n  })\n}\n\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Server: Reactive programming II"
    ]
  },
  {
    "objectID": "04-server-reactive-programming-i.html",
    "href": "04-server-reactive-programming-i.html",
    "title": "Server: Reactive programming",
    "section": "",
    "text": "Learning outcomes:\n\nUnderstand the logic underlying reactivity in Shiny apps\nConceiving and constructing reactive graphs\nImplement a basic I/O structure based on reactive elements\nSources: Wickham (2021, Ch. 3)",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming-i.html#basics",
    "href": "04-server-reactive-programming-i.html#basics",
    "title": "Server: Reactive programming",
    "section": "1 Basics",
    "text": "1 Basics\n\nIn Shiny, server logic is expressed using reactive programming (elegant powerful programming paradigm!)\nVery different to writing script that runs from start to end\nKey idea: specify a graph of dependencies so that when an input changes, all related outputs are automatically updated\nReactive programming makes flow of an app considerably simpler",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming-i.html#the-server-function",
    "href": "04-server-reactive-programming-i.html#the-server-function",
    "title": "Server: Reactive programming",
    "section": "2 The server function",
    "text": "2 The server function\n\n“Guts” of every shiny app below\n\n\nlibrary(shiny)\n\n# front end interface (Html)\n1ui &lt;- fluidPage()\n\n# back end logic\n2server &lt;- function(input, output, session) {}\n\nshinyApp(ui, server)\n\n\n1\n\nUser interface\n\n2\n\nServer\n\n\n\n\n\nui simple because every user gets same html\nserver more complicated because every user needs independent version of the app\n\ne.g., Julia using slider should not affect Petra ui!\n\nserver() is invoked each time new session starts\n\n3 parameters (input, output, session) that are created by Shiny (not by us!) when session starts connecting to specific session",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming-i.html#input-output-lists",
    "href": "04-server-reactive-programming-i.html#input-output-lists",
    "title": "Server: Reactive programming",
    "section": "3 Input & output (lists)",
    "text": "3 Input & output (lists)\n\ninput: a list-like object that contains all the input data sent from the browser, named according to the input ID\n\ne.g., numericInput(\"count\", label = \"Number of values\", value = 100) generates input$count\ninput can only be read from within reactive contexts created by a reactive functions like renderText() or reactive()\n\nreactive functions allow for outputs to automatically update when an input changes\n\n\noutput: a list-like object containing outputs named according to output ID\n\nDifference: output used for sending output instead of receiving input (always in concert with render function as below)\nQ: How many inputs/outputs/render functions are there in the code below? What does it do?\n\n\n\n\nSimple input/output example\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\")\n)\n\nserver &lt;- function(input, output, session) {\n1  output$greeting &lt;- renderText({\n    paste0(\"Hello \", input$name, \"!\")\n  })\n}\nshinyApp(ui, server)\n\n\n\n1\n\nrender functions, e.g., renderText() set up special reactive context that automatically tracks what inputs the output uses AND converts output of R code into HTML suitable for display on a web page",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming-i.html#render-functions",
    "href": "04-server-reactive-programming-i.html#render-functions",
    "title": "Server: Reactive programming",
    "section": "4 Render functions",
    "text": "4 Render functions\n\nrender functions, located in server, wrap generated outputs and correspond to the type or reactive output\n\nresulting values are stored in output$... list\n\nQ: What do you think are the following render functions used for? (e.g., )\n\nrenderImage({...})\nrenderPlot({...})\nrenderPlotly({...}) (!)\nrenderPrint({...})\nrenderTable({...})\nrenderDataTable({...}) (!)\nrenderText({...})\nrenderUI({...}) (!)\nrenderLeaflet({...}) (!)\n\nOur Guerry app uses those marked with (!).\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nrenderImage({...}) creates images (saved as a link to a source file)\nrenderPlot({...}) creates plots\nrenderPlotly({...}) creates interactive plotly graph\nrenderPrint({...}) creates any printed output\nrenderTable({...}) creates data frame, matrix, other table like structures\n\nrenderDataTable({...}) creates interactive datatable\n\nrenderText({...}) creates character strings\nrenderUI({...}) creates a Shiny tag object or HTML\nrenderLeaflet({...}) create a leaflet map",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming-i.html#reactive-programming",
    "href": "04-server-reactive-programming-i.html#reactive-programming",
    "title": "Server: Reactive programming",
    "section": "5 Reactive programming",
    "text": "5 Reactive programming\n\n5.1 How does reactivity work?\n\nQ: How does reactivity work? What does the app below do? (Let’s run it too!)\n\n\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\")\n)\n\nserver &lt;- function(input, output, session) {\n  output$greeting &lt;- renderText({\n    paste0(\"Hello \", input$name, \"!\")\n  })\n}\nshinyApp(ui, server)\n\n\nShiny performs the renderText() action every time we update input$name (automatically!)\nreactive refers to any expression that automatically updates itself when its dependencies change\nImportant: Code informs Shiny how it could create the string if it needs to, but it’s up to Shiny when (and even if!) the code should be run\nRecipe: App provides Shiny with recipe (not commands) what to do with inputs\n\n\n\n5.2 The reactive graph\n\nUsually R code can be read from top to bottom (= order of execution)… not in Shiny!\nReactive graph: describes how inputs and outputs are connected to understand order of execution\nFigure 1 describes app in Section 5.1 above.\n\ntells that output$greeting will need to be recomputed whenever input$name is changed\ngreeting has a reactive dependency on name\n\n\n\n\n\n\n\n\n\n\nFigure 1: The reactive graph shows how the inputs and outputs are connected (Source: Wickham 2021)\n\n\n\n\n\n\nQuick high-level sketch of reactive graphs help to understand how pieces fit together\n\n\n\n5.3 Reactive expressions\n\nReactive expressions take inputs and produce outputs\n\ncan reduce duplication in reactive code by introducing additional nodes into reactive graph\nFigure 2 contains reactive expression string (inspect shape!) with code shown below\n\n\n\n\n\n\n\n\n\n\nFigure 2: A reactive expression is drawn with angles on both sides because it connects inputs to outputs (Source: Wickham 2021)\n\n\n\n\n\n\nBelow string is created with reactive() function to app in Section 5.1.\n\n\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\"),\n)\n\nserver &lt;- function(input, output, session) {\n  string &lt;- reactive(paste0(\"Hello \", input$name, \"!\"))\n  output$greeting &lt;- renderText(string())\n}\nshinyApp(ui, server)\n\n\nAvoid duplication\n\nQ: How does the code below avoid duplicating code?\n\n\n\n\nShow the code\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\"),\n  textOutput(\"greeting2\")\n)\n\nserver &lt;- function(input, output, session) {\n  string &lt;- reactive(paste0(\"Hello \", input$name, \"!\"))\n  output$greeting &lt;- renderText(string())\n  output$greeting2 &lt;- renderText(string())\n}\nshinyApp(ui, server)\n\n\n\n\n5.4 Executation order\n\nOrder Shiny code is run is solely determined by reactive graph\nBelow we flip code in server function below\n\nBetter keep order for easier understanding!\n\n\n\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\"),\n)\n\nserver &lt;- function(input, output, session) {\n  output$greeting &lt;- renderText(string())\n  string &lt;- reactive(paste0(\"Hello \", input$name, \"!\"))\n}\nshinyApp(ui, server)\n\n\n\n5.5 Exercises\n\nCan you spot errors in the code of the different server1, server2 and server3 below?\n\n\n# UI\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\")\n)\n\n# SERVERS\nserver1 &lt;- function(input, output, server) {\n  input$greeting &lt;- renderText(paste0(\"Hello \", name))\n}\n\n# HOMEWORK!\nserver2 &lt;- function(input, output, server) {\n  greeting &lt;- paste0(\"Hello \", input$name)\n  output$greeting &lt;- renderText(greeting)\n}\n\nserver3 &lt;- function(input, output, server) {\n  output$greting &lt;- paste0(\"Hello\", input$name)\n}\n\n\nDraw the reactive graph for the following three server functions (what are the inputs, reactives and ouputs): (Homework: server2 and server3!)\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nStart by deciding how many and which inputs (1), reactives (2) and ouputs (3) there are. Then start drawing with inputs represented in the first column on the left. You could use, e.g., name&gt; for inputs, &gt;name&gt; for reactives and &gt;name for outputs and arrows to connect them.\n\n\n\n\nserver1 &lt;- function(input, output, session) {\n  c &lt;- reactive(input$a + input$b)\n  e &lt;- reactive(c() + input$d)\n  output$f &lt;- renderText(e())\n}\n\nserver2 &lt;- function(input, output, session) {\n  x &lt;- reactive(input$x1 + input$x2 + input$x3)\n  y &lt;- reactive(input$y1 + input$y2)\n  output$z &lt;- renderText(x() / y())\n}\n\nserver3 &lt;- function(input, output, session) {\n  d &lt;- reactive(c() ^ input$d)\n  a &lt;- reactive(input$a * 10)\n  c &lt;- reactive(b() / input$c) \n  b &lt;- reactive(a() + input$b)\n}\n\n\n\n\n\n\n\nSolution(s)\n\n\n\n\n\n\nCan you spot errors in the code of the different server1, server2 and server3 below?\n\n\nserver1: Forgot input$\nserver2: input$name outside of renderText() function\nserver3: Typo in output$greting\n\n\n\nDraw the reactive graph for the following three server functions (Solution source):\n\nTo create the reactive graph we need to consider the inputs, reactive expressions, and outputs of the app.\nFor server1 we have the following objects:\n\ninputs: input$a, input$b, and input$d\nreactives: c() and e()\noutputs: output$f\n\nInputs input$a and input$b are used to create c(), which is combined with input$d to create e(). The output depends only on e().\n\n\n\n\nreactive graph - server 1\n\n\n\n\nFor server2 we have the following objects:\n\ninputs: input$y1, input$y2, input$x1, input$x2, input$x3\nreactives: y() and x()\noutputs: output$z\n\nInputs input$y1 and input$y2 are needed to create the reactive y(). In addition, inputs input$x1, input$x2, and input$x3 are required to create the reactive x(). The output depends on both x() and y().\n\n\n\n\nreactive graph - server 2\n\n\n\n\nFor server3 we have the following objects:\n\ninputs: input$a, input$b, input$c, input$d\nreactives: a(), b(), c(), d()\n\nAs we can see below, a() relies on input$a, b() relies on both a() and input$b, and c() relies on both b() and input$c. The final output depends on both c() and input$d.\n\n\n\n\nreactive graph - server 3",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming-i.html#reactive-expressions-more",
    "href": "04-server-reactive-programming-i.html#reactive-expressions-more",
    "title": "Server: Reactive programming",
    "section": "6 Reactive expressions (more!)",
    "text": "6 Reactive expressions (more!)\n\nChapter 3.4 is recommended reading!\nReactive expressions (e.g., reactive()) are important because…\n\ngive Shiny more information so that it can do less recomputation when inputs change\nmake apps more efficient and easier for humans to understand (simplify reactive graph!)\n\nAre like inputs since you can use results of a reactive expression in an output\nAre like outputs since they depend on inputs and automatically know when they need updating\nInputs and reactive expressions are reactive producers (see Figure 3)\nReactive expressions and outputs are reactive consumers (see Figure 3)\n\n\n\n\n\n\n\n\n\nFigure 3: Inputs and expressions are reactive producers; expressions and outputs are reactive consumers (Source: Wickham 2021)",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming-i.html#reactive-functions-overview",
    "href": "04-server-reactive-programming-i.html#reactive-functions-overview",
    "title": "Server: Reactive programming",
    "section": "7 Reactive functions: Overview",
    "text": "7 Reactive functions: Overview\n\nShiny provides a variety of reactive functions such as reactive(), observe(), bindevent() and others.`\nSee insightful discussions on reactivity and reactive functions in Chapter 3.5.1.\n\n\n7.1 reactive()\n\nreactive(): wraps a normal expression to create a reactive expression\n\nis “reactive” in the sense that if its dependencies change, it will automatically update.\nBelow reactive string changes whenever dependency input$name changes.\nQ: What would be the reactive producer and what the reactive consumer?\n\n\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\"),\n)\n\nserver &lt;- function(input, output, session) {\n  string &lt;- reactive(paste0(\"Hello \", input$name, \"!\"))\n  output$greeting &lt;- renderText(string())\n}\nshinyApp(ui, server)\n  })\n\n\n7.2 observe() vs. reactive()\n\nreactive(): creates a reactive expression that can be changed over time by user inputs\nobserve(): creates an observer that runs whenever any of its reactive dependencies change\n\ni.e., code inside observe() will be re-evaluated whenever any reactive inputs or reactive expressions that it references get updated\nBUT we don’t assign result of observe() to a variable, so we can’t refer to it from other reactive consumers\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nBelow we use a reactive expression using reactive() to create squared. This is then reused in the observe() function that wraps a render function renderText() that creates and the output element output$text.\n\n\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  numericInput(\"num\", \"Enter a number\", value = 1),\n  textOutput(\"text\")\n)\n\nserver &lt;- function(input, output, session) {\n  # reactive expression\n  squared &lt;- reactive({ \n    input$num^2 \n  })\n  \n  # observer\n  observe({ \n    output$text &lt;- renderText({\n      paste0(\"The square of \", input$num, \" is \", squared())\n    })\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n\n7.3 Reacting on events: bindEvent()\n\nbindEvent(): provides a straightforward API for event handling\nobserveEvent() (observers): used when you want to perform an action in response to an event (see input$button below), but you don’t need the result of the action to be used in the UI\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nIn this example, when the “Generate Random Number” button is clicked, a random number is generated, but it doesn’t get displayed immediately. Instead, the output$randomNumber expression is bound to input$dispButton event with bindEvent(), and the result is displayed only when the “Display Random Number” button is clicked. This allows you to have more control over when the UI updates in response to changes in server-side reactive values.\n\n\n\nlibrary(shiny)\n\n# Define UI\nui &lt;- fluidPage(\n    actionButton(\"genButton\", \"Generate Random Number\"),\n    actionButton(\"dispButton\", \"Display Random Number\"),\n    textOutput(\"randomNumber\")\n)\n\n# Define server logic\nserver &lt;- function(input, output, session) {\n    randNum &lt;- reactiveValues(num = NULL)\n\n    observeEvent(input$genButton, {\n        randNum$num &lt;- runif(1) # Generate a random number when genButton is clicked\n    })\n    \n    output$randomNumber &lt;- renderText({ \n        randNum$num # Generate the reactive expression\n    }) %&gt;% \n    bindEvent(input$dispButton) # Binding the output$randomNumber reactive expression to dispButton\n}\n\n# Run the application \nshinyApp(ui = ui, server = server, options = list(display.mode='showcase'))\n\n\n7.4 eventReactive() (skip!)\n\nAlternative to bind_event()\neventReactive(): Similar to reactive(), but only re-evaluates when a certain event is triggered. Can be used in combination with observeEvent().\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nIn this app, when you click the “Generate Random Number” button, a random number is generated, but it’s not displayed yet. When you click the “Display Random Number” button, the generated number is then displayed. The eventReactive() function is used to create a reactive value (the random number) that is updated only when a specific event (clicking the “Generate Random Number” button) occurs.\n\n\n\nlibrary(shiny)\n\n# Define UI\nui &lt;- fluidPage(\n    actionButton(\"genButton\", \"Generate Random Number\"),\n    actionButton(\"dispButton\", \"Display Random Number\"),\n    textOutput(\"randomNumber\")\n)\n\n# Define server logic\nserver &lt;- function(input, output, session) {\n    randNum &lt;- eventReactive(input$genButton, {\n        runif(1) # Generate a random number when genButton is clicked\n    })\n    \n    observeEvent(input$dispButton, {\n        output$randomNumber &lt;- renderText({ randNum() }) # Display the random number when dispButton is clicked\n    })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server, options = list(display.mode='showcase'))\n\n\n7.5 isolate() (skip!)\n\nisolate(): used to access the value of a reactive expression or input without setting up a dependency\n\nuseful to access the current value of an input or reactive expression, but without re-running the code when that input or expression changes\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nIn this app, when you click the “Generate Random Number” button, a random number is generated. This number does not immediately cause a reactive event because it’s isolated within the isolate() function. It only gets displayed when you click the “Display Random Number” button. Changes to randNum$num after “Display Random Number” button is clicked won’t affect the displayed value until the button is clicked again. Thus, the isolate() function enables the use of reactive values without triggering reactivity.\n\n\n\nlibrary(shiny)\n\n# Define UI\nui &lt;- fluidPage(\n    actionButton(\"genButton\", \"Generate Random Number\"),\n    actionButton(\"dispButton\", \"Display Random Number\"),\n    textOutput(\"randomNumber\")\n)\n\n# Define server logic\nserver &lt;- function(input, output, session) {\n    randNum &lt;- reactiveValues(num = NULL) # Create object to store reactiv values\n\n    observeEvent(input$genButton, {\n        randNum$num &lt;- runif(1) # Generate a random number when genButton is clicked\n    })\n    \n    observeEvent(input$dispButton, {\n        output$randomNumber &lt;- renderText({ \n          isolate(randNum$num) # Display the random number when dispButton is clicked, but do not reactivity link it\n        }) \n    })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server, options = list(display.mode='showcase'))\n\n\n7.6 reactiveTimer() (skip!)\n\nreactiveTimer(): used to create a reactive expression that invalidates itself after a given number of milliseconds. This can be useful for causing certain parts of your Shiny app to update on a regular interval.\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nIn this example, autoInvalidate() is a reactive expression that becomes invalidated (i.e., signals that it needs to be re-evaluated) every 1000 milliseconds. By referencing autoInvalidate() inside the renderText() function, we’re creating a dependency — so, every time autoInvalidate() is invalidated, the current time is re-evaluated and the UI is updated with the new time.\n\n\n\nlibrary(shiny)\n\n# Define UI\nui &lt;- fluidPage(\n  textOutput(\"currentTime\")\n)\n\n# Define server logic\nserver &lt;- function(input, output, session) {\n  \n  # Define a reactive timer with a 1000ms (1s) interval\n  autoInvalidate &lt;- reactiveTimer(1000)\n  \n  output$currentTime &lt;- renderText({\n    autoInvalidate()  # This line causes the reactive expression to be invalidated (and thus re-evaluated) every second\n    as.character(Sys.time())  # Display the current time\n  })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming-i.html#guerry-app-reactivity-tabulate-data-tab",
    "href": "04-server-reactive-programming-i.html#guerry-app-reactivity-tabulate-data-tab",
    "title": "Server: Reactive programming",
    "section": "8 Guerry app (reactivity): Tabulate data tab",
    "text": "8 Guerry app (reactivity): Tabulate data tab\n\nThe Guerry app includes the following reactive functions: reactive(), observe(), isolate(), bindEvent().\nBelow the basic code underlying the Tabulate tab of our app.\n\nWhat would the reactive graph look like for this app (how many inputs, reatives, outputs)?\nWhich reactive functions can you identify?\n\n\n\n\nR code underlying tabulate tab\nlibrary(shiny)\nlibrary(htmltools)\nlibrary(bs4Dash)\nlibrary(fresh)\nlibrary(waiter)\nlibrary(shinyWidgets)\nlibrary(Guerry)\nlibrary(sf)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(viridis)\nlibrary(leaflet)\nlibrary(plotly)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(datawizard)\nlibrary(parameters)\nlibrary(performance)\nlibrary(ggdark)\nlibrary(modelsummary)\n\n# 1 Data preparation ----\n\n## Load & clean data ----\nvariable_names &lt;- list(\n  Crime_pers = \"Crime against persons\",  \n  Crime_prop =  \"Crime against property\",  \n  Literacy = \"Literacy\",  \n  Donations = \"Donations to the poor\",  \n  Infants = \"Illegitimate births\",  \n  Suicides = \"Suicides\",  \n  Wealth = \"Tax / capita\",  \n  Commerce = \"Commerce & Industry\",  \n  Clergy = \"Clergy\",  \n  Crime_parents = \"Crime against parents\",  \n  Infanticide = \"Infanticides\",  \n  Donation_clergy = \"Donations to the clergy\",  \n  Lottery = \"Wager on Royal Lottery\",  \n  Desertion = \"Military desertion\",  \n  Instruction = \"Instruction\",  \n  Prostitutes = \"Prostitutes\",  \n  Distance = \"Distance to paris\",  \n  Area = \"Area\",  \n  Pop1831 = \"Population\"\n)\n\ndata_guerry &lt;- Guerry::gfrance85 %&gt;%\n  st_as_sf() %&gt;%\n  as_tibble() %&gt;%\n  st_as_sf(crs = 27572) %&gt;%\n  mutate(Region = case_match(\n    Region,\n    \"C\" ~ \"Central\",\n    \"E\" ~ \"East\",\n    \"N\" ~ \"North\",\n    \"S\" ~ \"South\",\n    \"W\" ~ \"West\"\n  )) %&gt;%\n  select(-c(\"COUNT\", \"dept\", \"AVE_ID_GEO\", \"CODE_DEPT\")) %&gt;%\n  select(Region:Department, all_of(names(variable_names)))\n\n\n\n## Prep data (Tab: Tabulate data) ----\ndata_guerry_tabulate &lt;- data_guerry %&gt;% \n  st_drop_geometry() %&gt;% \n  mutate(across(.cols = all_of(names(variable_names)), round, 2))\n\n\n\n# 3 UI ----\n\nui &lt;- dashboardPage(\n  title = \"The Guerry Dashboard\",\n\n  ## 3.1 Header ----\n  header = dashboardHeader(\n    title = tagList(\n      span(\"The Guerry Dashboard\", class = \"brand-text\")\n    )\n  ),\n  ## 3.2 Sidebar ----\n  sidebar = dashboardSidebar(\n    id = \"sidebar\",\n    sidebarMenu(\n      id = \"sidebarMenu\",\n      menuItem(tabName = \"tab_tabulate\", text = \"Tabulate data\", icon = icon(\"table\")),\n      flat = TRUE\n    ),\n    minified = TRUE,\n    collapsed = TRUE,\n    fixed = FALSE,\n    skin = \"light\"\n  ),\n  ## 3.3 Body ----\n  body = dashboardBody(\n    tabItems(\n      ### 3.3.2 Tab: Tabulate data ----\n      tabItem(\n        tabName = \"tab_tabulate\",\n        fluidRow(\n          #### Inputs(s) ----\n          pickerInput(\n            \"tab_tabulate_select\",\n            label = \"Filter variables\",\n            choices = setNames(names(variable_names), variable_names),\n            options = pickerOptions(\n              actionsBox = TRUE,\n              windowPadding = c(30, 0, 0, 0),\n              liveSearch = TRUE,\n              selectedTextFormat = \"count\",\n              countSelectedText = \"{0} variables selected\",\n              noneSelectedText = \"No filters applied\"\n            ),\n            inline = TRUE,\n            multiple = TRUE\n          )\n        ),\n        hr(),\n        #### Output(s) (Data table) ----\n        DT::dataTableOutput(\"tab_tabulate_table\")\n      )\n    ) # end tabItems\n  )\n)\n\n\n\n# 4 Server ----\n\nserver &lt;- function(input, output, session) {\n  \n  ## 4.1 Tabulate data ----\n  ### Variable selection ----\n  tab &lt;- reactive({\n    var &lt;- input$tab_tabulate_select\n    data_table &lt;- data_guerry_tabulate\n    \n    if (!is.null(var)) {\n      data_table &lt;- data_table[, c(\"Region\", \"Department\",var)]\n    }\n    \n    data_table\n  })\n  \n  \n  ### Create table----\n  dt &lt;- reactive({\n    tab &lt;- tab()\n    ridx &lt;- ifelse(\"Department\" %in% names(tab), 3, 1)\n    DT::datatable(\n      tab,\n      class = \"hover\",\n      extensions = c(\"Buttons\"),\n      selection = \"none\",\n      filter = list(position = \"top\", clear = FALSE),\n      style = \"bootstrap4\",\n      rownames = FALSE,\n      options = list(\n        dom = \"Brtip\",\n        deferRender = TRUE,\n        scroller = TRUE,\n        buttons = list(\n          list(extend = \"copy\", text = \"Copy to clipboard\"),\n          list(extend = \"pdf\", text = \"Save as PDF\"),\n          list(extend = \"csv\", text = \"Save as CSV\"),\n          list(extend = \"excel\", text = \"Save as JSON\", action = DT::JS(\"\n          function (e, dt, button, config) {\n            var data = dt.buttons.exportData();\n  \n            $.fn.dataTable.fileSave(\n              new Blob([JSON.stringify(data)]),\n              'Shiny dashboard.json'\n            );\n          }\n        \"))\n        )\n      )\n    )\n  })\n  \n  ### Render table----\n  output$tab_tabulate_table &lt;- DT::renderDataTable(dt(), server = FALSE)\n  \n  \n\n}\n\nshinyApp(ui, server)",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming-i.html#loading-things-in-shiny",
    "href": "04-server-reactive-programming-i.html#loading-things-in-shiny",
    "title": "Server: Reactive programming",
    "section": "9 Loading things in Shiny",
    "text": "9 Loading things in Shiny\n\n9.1 When is code run?\n\nWhen is code in a shiny app run? (Source)\nCode outside of ui and server is run once, when the app is launched.\n\n\n\nCode inside the server function is run once each time a user visits the app (opens the webpage).\n\n\n\nCode inside render functions is run each time a user changes a widget (input$...) that ouput$... depends on\n\n\n\nQ: So where shall we put the function to load the datasets?\nQ: What problem might occur if we place certain code wrongly ? Where would you place data management tasks?\n\n\n\n\n\n\n\nInsight\n\n\n\n\n\n\nIf possible place anything computationally intensive outside of the render functions.\n\ne.g., might make sense to estimate models/subset data beforehand if possible and access precalculated objects in reactive functions\n\n\n\n\n\n\n\n9.2 Where to load things\n\nCode outside server &lt;- function(input, output, session) {} is run once, when you launch your app\nCode inside server &lt;- function(input, output, session) {} is run once each time a user visits your app\nCode inside render* functions is rerun constantly (not only when user changes widget value ( see reactivity)\nThat means…\n\nLoad Source scripts, libraries, and data outside of server function (at the beginning)\n\nStore data in www/ folder in your app directory\nAccess with read.table(\"www/swiss.csv\", sep=\",\")\nAccess online data by inserting the url into the read* function (e.g. read.table())\n\nUser specific objects (e.g. object that records user’s session information) are defined inside shinyServer’s unnamed function, but outside of any render* calls\n\ne.g. user registers himself, user data as input data (compare income)\n\nCode/objects that are affected by choices in widgets must be placed within the a render* function\n\nShiny reruns code in a render* chunk each time a user changes a widget mentioned in the chunk\n\n\nAvoid placing code within render function that does not need to be there… for performance reasons!",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming-i.html#data-storage",
    "href": "04-server-reactive-programming-i.html#data-storage",
    "title": "Server: Reactive programming",
    "section": "10 Data storage",
    "text": "10 Data storage\n\nThings might get tricky for more data-hungry Shiny apps\nThe way data is stored and accessed has some important implications for\n\nMemory allocation: R stores objects in the working memory\nPerformance: “R does too much” - Colin Fay\nReadability: Putting everything in one file might get messy\n\nFor more sophisticated setups: databases (e.g., SQLite, PostgreSQL, MongoDB)\nR can work perfectly well with database connections (R Packages: DBI, dbplyr, sf) (see overview here)\n\nSQLite works well for casually trying out databases (see overview here)",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming-i.html#summary",
    "href": "04-server-reactive-programming-i.html#summary",
    "title": "Server: Reactive programming",
    "section": "11 Summary",
    "text": "11 Summary\nTo build reactive shiny apps…\n\nUse *Output functions to place reactive objects in the UI (webpage)\nUse render* functions to let R build output objects (on the server)\n\nRender functions are located in server &lt;- function(input, output, session) {...})\nR expressions are surrounded by braces, {} in render* functions\nOutputs of render* are saved in the output list, with one entry for each reactive object in your app\nReactivity by including an input values in a render* expression\n\nOften times you will adapt/modify examples that you find online",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming-i.html#appendix-visualizing-reactivity-with-reactlog",
    "href": "04-server-reactive-programming-i.html#appendix-visualizing-reactivity-with-reactlog",
    "title": "Server: Reactive programming",
    "section": "12 Appendix: Visualizing reactivity with reactlog",
    "text": "12 Appendix: Visualizing reactivity with reactlog\n\nreactlog can be used to visualize and explore the reactivity of a Shiny app\nBelow we do so for the Shiny app above (app is stored in a folder)\n\n\n# Restart R to delete log\n.rs.restartR()\n\nlibrary(shiny)\nlibrary(reactlog)\n\n# tell shiny to log all reactivity\nreactlog_enable()\n# reactlog_disable()\n\n# run a shiny app\nrunApp(\"C:/Users/Paul/Google Drive/13_SHINY_Workshop/shinyapps/guerry/states_paul/app_tab_tabulate.R\")\n\n# once app has closed, display reactlog from shiny\nshiny::reactlogShow()",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming-i.html#appendix-imperative-vs.-declarative-programming-and-laziness",
    "href": "04-server-reactive-programming-i.html#appendix-imperative-vs.-declarative-programming-and-laziness",
    "title": "Server: Reactive programming",
    "section": "13 Appendix: Imperative vs. Declarative programming and laziness",
    "text": "13 Appendix: Imperative vs. Declarative programming and laziness\n\nImperative vs. declarative programming (Chapter 3.3.1)\n\nImperative code: “Make me a sandwich” (“assertive” code)\nDeclarative code: “Ensure there is a sandwich in the refrigerator whenever I look inside of it” (“passive-aggressive” code)\nShiny follows the latter principles\n\nLaziness as strength of declarative programming (Chapter 3.3.2)\n\napp will only ever do the minimal amount of work needed to update the output controls that you can currently see",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "06-visualization.html#interactive-visualization-the-core-of-shiny",
    "href": "06-visualization.html#interactive-visualization-the-core-of-shiny",
    "title": "Modelling and visualizing data",
    "section": "1 Interactive visualization: The core of Shiny",
    "text": "1 Interactive visualization: The core of Shiny\n\nShiny offers the perfect basis for visualization\n\nPlots can be modified using UI inputs\nSeamless integration of interactivity elements (e.g. pan, zoom)\nDashboards facilitate the idea of story-telling by providing context to plots\n\n\n\n1.1 Good practice examples\n\nExamples of these concepts can be seen in many Shiny apps, one example is Edward Parker’s COVID-19 tracker\n\n\n\n\n\n\n\nNote\n\n\n\nExercise\nExplore the COVID-19 tracker. Do you think this is a good Shiny app? If so, why? If not, why not?\n\n\n\n\n\nCOVID-19 Tracker\n\n\n\n\n1.2 Plain plotting vs. Shiny\n\n\n\nFeature\nPlain R\nShiny\nExamples\n\n\n\n\nReactivity\nChanges in the visualization have to be changed in the code\nVisualizations can be modified on the fly using widgets like drop-down menus\nExPanD\n\n\nInteractivity\nPlots are static raster or vector images\nPlots can be dynamic and can be interacted with\nCOVID-19 tracker\n\n\nNarrativity\nSense-making happens through manual annotation, e.g. in an article or a presentation\nPlots are embedded in a compilation of narrative elements that can tell a coherent story\nFreedom of Press Shiny app\nGRETA Analytics\n\n\n\n\n\n\nMedium\nReactivity\nInteractivity\nNarrativity\n\n\n\n\nPlain image\n❌\n❌\n❌\n\n\nPaper / report\n❌\n❌\n✅\n\n\nDashboard (e.g. Tableau)\n❌\n☑️\n✅\n\n\nQuarto / RMarkdown\n❌\n☑️\n✅\n\n\nTraditional website\n☑️\n✅\n✅\n\n\nShiny\n✅\n✅\n✅\n\n\n\n\n\n1.3 Current app state\n\nIn the last sections, we added a table and a plot and linked them to a number of inputs\nThe code chunk below contains the current app state\nIn this section, we will:\n\nAugment the violin plot\nAdd an interactive map\n\n\n\n\nFull code for the current app state\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(shiny)\nlibrary(plotly)\nlibrary(leaflet)\nlibrary(haven)\n\ness &lt;- readRDS(\"../../../data/ess_trust.rds\")\ness_geo &lt;- readRDS(\"../../../data/ess_trust_geo.rds\")\n\n# UI ----\nui &lt;- fluidPage(\n  titlePanel(\"European Social Survey - round 10\"),\n  \n  ## Sidebar ----\n  sidebarLayout(\n    sidebarPanel(\n      ### select dependent variable\n      selectInput(\n        \"xvar\",\n        label = \"Select a dependent variable\",\n        choices = c(\n          \"Trust in country's parliament\" = \"trust_parliament\",\n          \"Trust in the legal system\" = \"trust_legal\",\n          \"Trust in the police\" = \"trust_police\",\n          \"Trust in politicians\" = \"trust_politicians\",\n          \"Trust in political parties\" = \"trust_parties\",\n          \"Trust in the European Parliament\" = \"trust_eu\",\n          \"Trust in the United Nations\" = \"trust_un\"\n        )\n      ),\n      \n      ### select a variable ----\n      selectInput(\n        \"yvar\",\n        label = \"Select an independent variable\",\n        choices = c(\n          \"Placement on the left-right scale\" = \"left_right\",\n          \"Age\" = \"age\",\n          \"Feeling about household's income\" = \"income_feeling\",\n          \"How often do you use the internet?\" = \"internet_use\",\n          \"How happy are you?\" = \"happiness\"\n        )\n      ),\n      \n      ### select a country ----\n      selectizeInput(\n        \"countries\",\n        label = \"Filter by country\",\n        choices = unique(ess$country),\n        selected = \"FR\",\n        multiple = TRUE\n      ),\n      \n      ### filter values ----\n      sliderInput(\n        \"range\",\n        label = \"Set a value range\",\n        min = min(ess$trust_parliament, na.rm = TRUE),\n        max = max(ess$trust_parliament, na.rm = TRUE),\n        value = range(ess$trust_parliament, na.rm = TRUE),\n        step = 1\n      )\n    ),\n    \n    ## Main panel ----\n    mainPanel(\n      tabsetPanel(\n        type = \"tabs\",\n        \n        ### Table tab ----\n        tabPanel(\n          title = \"Table\",\n          div(\n            style = \"height: 600px; overflow-y: auto;\",\n            tableOutput(\"table\")\n          )\n        ),\n        \n        ### Plot tab ----\n        tabPanel(\n          title = \"Plot\",\n          plotOutput(\"plot\", height = 600)\n        ),\n        \n        ### Map tab ----\n        tabPanel(\n          title = \"Map\",\n          leafletOutput(\"map\", height = 600)\n        )\n      )\n    )\n  )\n)\n\n\n# Server ----\nserver &lt;- function(input, output, session) {\n  # update slider ----\n  observe({\n    var &lt;- na.omit(ess[[input$xvar]])\n    is_ordered &lt;- is.ordered(var)\n    var &lt;- as.numeric(var)\n    updateSliderInput(\n      inputId = \"range\",\n      min = min(var),\n      max = max(var),\n      value = range(var),\n      step = if (is_ordered) 1\n    )\n  }) %&gt;%\n    bindEvent(input$xvar)\n  \n  # filter data ----\n  filtered &lt;- reactive({\n    req(input$countries, cancelOutput = TRUE)\n    \n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    range &lt;- input$range\n    \n    # select country\n    ess &lt;- ess[ess$country %in% input$countries, ]\n    \n    # select variable\n    ess &lt;- ess[c(\"idno\", \"country\", xvar, yvar)]\n    \n    # apply range\n    ess &lt;- ess[ess[[xvar]] &gt; range[1] & ess[[xvar]] &lt; range[2], ]\n    ess\n  })\n  \n  # render table ----\n  output$table &lt;- renderTable({\n    filtered()\n  }, height = 400)\n  \n  # render plot ----\n  output$plot &lt;- renderPlot({\n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    plot_data &lt;- filtered() %&gt;%\n      drop_na() %&gt;%\n      mutate(across(where(is.numeric), .fns = as.ordered))\n    \n    ggplot(plot_data) +\n      aes(x = .data[[xvar]], y = .data[[yvar]], group = .data[[xvar]]) +\n      geom_violin(fill = \"lightblue\", show.legend = FALSE) +\n      theme_classic()\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n\n\n\n1.4 Recap: Plotting in Shiny\n\nInserting plots in Shiny apps works just like any other UI component\nYou need two things: plotOutput() (or similar) in the UI and renderPlot() (or similar) in the server function\n\nplotOutput() creates the empty element in the UI where the plot will go\nrenderPlot() renders the plot and updates the UI element every time a reactive dependency is invalidated",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "06-visualization.html#interactivity",
    "href": "06-visualization.html#interactivity",
    "title": "Modelling and visualizing data",
    "section": "2 Interactivity",
    "text": "2 Interactivity\n\nR itself is very bad at interactivity\nShiny supports some very essential interactivity through plotOutput\n\nNot covered in this workshop! For a primer, check out chapter 7.1 of Mastering Shiny\n\nAll of today’s cool kids use interactivity through Javascript interfaces\nShiny can generally process all kinds of Javascript-based widgets because Shiny apps are HTML documents\n\n\n2.1 Popular Javascript interfaces\n\nExamples of Javascript libraries and their corresponding R packages\n\nPlotly (covered here)\nLeaflet (covered here)\nHighcharts\nBokeh\nD3\nApache ECharts\nFrappe Charts\nbillboard.js\napexcharts.js\nGoogle Charts\namCharts 4\nDeck.gl\nWebGL",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "06-visualization.html#leaflet",
    "href": "06-visualization.html#leaflet",
    "title": "Modelling and visualizing data",
    "section": "4 Leaflet",
    "text": "4 Leaflet\n\nLeaflet is an open-source JavaScript library to create interactive maps\nLike plotly it is one of the most popular applications for interactive mapping\nThe leaflet package makes it easy to create interactive maps directly in R\nLeaflet is very light-weight! This is good, but it’s also bad because it means extra work.\n\n\n4.1 Leaflet’s grammar of graphics\n\nJust like ggplot2 and plotly, leaflet is inspired by a grammar of graphics\nA map canvas can be created using the leaflet() function\nAdditional elements are added through pipes %&gt;% or |&gt;\nPalettes are created using the leaflet::color function family\n\n\n1leaflet(ess_geo) %&gt;%\n2  addTiles() %&gt;%\n3  addPolygons(\n    weight = 2,\n    opacity = 1,\n    fillOpacity = 0.7\n4  )\n\n\n1\n\nLeaflet supports four types of palettes: Bin, Quantile, Factor, and Numeric. In this case we have a numeric variable.\n\n2\n\nleaflet() is the powerhorse of the leaflet package. It is comparable to ggplot() or plot_ly().\n\n3\n\naddTiles() adds a background map.\n\n4\n\naddPolygons() adds polygons to the map. This function accepts several visual arguments to control, for example, the line width and opacity.\n\n\n\n\n\n\n\n\n\n\n4.2 Adding data\n\nTo add colorized data, we must first define how to color this data\nLeaflet defines four color functions to create a palette:\n\nNumeric\nBin\nQuantile\nFactor\n\nDepending on the data\n\n\n1pal &lt;- colorNumeric(\"YlOrRd\", domain = NULL)\n\nleaflet(ess_geo) %&gt;%\n  addTiles() %&gt;%\n  addPolygons(\n2    fillColor = pal(ess_geo[[\"trust_eu\"]]),\n    weight = 2,\n    opacity = 1,\n    color = \"white\",\n    fillOpacity = 0.7\n  )\n\n\n1\n\nDefine a numeric palette with a gradient Yellow-Orange-Red\n\n2\n\nApply this palette to the data to generate color values\n\n\n\n\n\n\n\n\n\n\n4.3 Adding a legend\n\nJust like adding data, adding legends has to be done manually\nThe addLegend() function\n\n\npal &lt;- colorNumeric(\"YlOrRd\", domain = NULL)\n\nleaflet(ess_geo) %&gt;%\n  addTiles() %&gt;%\n  addPolygons(\n    fillColor = pal(ess_geo[[\"trust_eu\"]]),\n    weight = 2,\n    opacity = 1,\n    color = \"white\",\n    fillOpacity = 0.7\n  ) %&gt;%\n  addLegend(\n    position = \"bottomleft\",\n    pal = pal,\n    values = ess_geo[[\"trust_eu\"]],\n    opacity = 0.7,\n    title = \"Trust in the EU\"\n  )\n\n\n\n\n\n\n\n4.4 Adding interactivity\n\nRight now, the leaflet map cannot be interacted with\nInteractivity has to be added manually\nTwo new features:\n\nhighlightOptions adds a highlight effect when hovering over a polygon\nlabels adds labels that appear when hovering over a polygon\n\nCaveats:\n\nLabels have to be formatted manually, as per usual\nBeautifully styled labels require some knowledge of HTML and CSS\n\n\n\n1labels &lt;- sprintf(\n  \"&lt;strong&gt;%s&lt;/strong&gt;&lt;br&gt;%s\",\n  ess_geo$country,\n  ess_geo$trust_eu\n)\n2labels &lt;- lapply(labels, HTML)\n\npal &lt;- colorNumeric(\"YlOrRd\", domain = NULL)\n\nleaflet(ess_geo) %&gt;%\n  addTiles() %&gt;%\n  addPolygons(\n    fillColor = pal(ess_geo[[\"trust_eu\"]]),\n    weight = 2,\n    opacity = 1,\n    color = \"white\",\n    fillOpacity = 0.7,\n3    highlightOptions = highlightOptions(\n      weight = 2,\n      color = \"#666\",\n      fillOpacity = 0.7,\n      bringToFront = TRUE\n    ),\n    label = labels\n  ) %&gt;%\n  addLegend(\n    position = \"bottomleft\",\n    pal = pal,\n    values = ess_geo[[\"trust_eu\"]],\n    opacity = 0.7,\n    title = \"Trust in the EU\"\n  )\n\n\n1\n\nLabels need to be created manually. Here, I generate very essential labels containing the country in bold and the trust value below it.\n\n2\n\nLabels must be explicitly classified as HTML code. This can be done using the shiny::HTML function.\n\n3\n\nInteractivity is then simply added through the label and highlightOptions arguments to addPolygons().\n\n\n\n\n\n\n\n\n\n\n4.5 Leaflet and Shiny\n\nAgain, Leaflet does not produce static plots and thus cannot be served by plotOutput and renderPlot\nThe leaflet package defines two functions:\n\nleafletOutput to create the canvas in the UI\nrenderLeaflet to render the Leaflet widget in the server function\n\n\nUI:\n\nmainPanel(\n  tabsetPanel(\n    type = \"tabs\",\n    \n    ### Table tab ----\n    tabPanel(\n      title = \"Table\",\n      div(\n        style = \"height: 600px; overflow-y: auto;\",\n        tableOutput(\"table\")\n      )\n    ),\n    \n    ### Plot tab ----\n    tabPanel(\n      title = \"Plot\",\n      plotlyOutput(\"plot\", height = 600)\n    ),\n    \n    ### Map tab ----\n    tabPanel(\n      title = \"Map\",\n      leafletOutput(\"map\", height = 600)\n    )\n  )\n)\n\nServer:\n\noutput$map &lt;- renderLeaflet({\n  var &lt;- input$xvar\n  plot_data &lt;- ess_geo[c(\"country\", var)]\n  \n  # create labels with a bold title and a body\n  labels &lt;- sprintf(\n    \"&lt;strong&gt;%s&lt;/strong&gt;&lt;br&gt;%s\",\n    plot_data$country,\n    plot_data[[var]]\n  )\n  labels &lt;- lapply(labels, HTML)\n  \n  # create a palette for numerics and ordinals\n  if (is.ordered(plot_data[[var]])) {\n    pal &lt;- colorFactor(\"YlOrRd\", domain = NULL)\n  } else {\n    pal &lt;- colorNumeric(\"YlOrRd\", domain = NULL)\n  }\n\n  # construct leaflet canvas\n  leaflet(plot_data) %&gt;%\n    # add base map\n    addTiles() %&gt;%\n    # add choropleths\n    addPolygons(\n      fillColor = pal(plot_data[[var]]),\n      weight = 2,\n      opacity = 1,\n      color = \"white\",\n      fillOpacity = 0.7,\n      # highlight polygons on hover\n      highlightOptions = highlightOptions(\n        weight = 2,\n        color = \"#666\",\n        fillOpacity = 0.7,\n        bringToFront = TRUE\n      ),\n      label = labels\n    ) %&gt;%\n    # add a legend\n    addLegend(\n      position = \"bottomleft\",\n      pal = pal,\n      values = plot_data[[var]],\n      opacity = 0.7,\n      title = var\n    )\n})\n\n\n\nComplete code (important lines are highlighted)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(shiny)\nlibrary(plotly)\nlibrary(leaflet)\nlibrary(haven)\n\ness &lt;- readRDS(\"../../../data/ess_trust.rds\")\ness_geo &lt;- readRDS(\"../../../data/ess_trust_geo.rds\")\n\n# UI ----\nui &lt;- fluidPage(\n  titlePanel(\"European Social Survey - round 10\"),\n  \n  ## Sidebar ----\n  sidebarLayout(\n    sidebarPanel(\n      ### select dependent variable\n      selectInput(\n        \"xvar\",\n        label = \"Select a dependent variable\",\n        choices = c(\n          \"Trust in country's parliament\" = \"trust_parliament\",\n          \"Trust in the legal system\" = \"trust_legal\",\n          \"Trust in the police\" = \"trust_police\",\n          \"Trust in politicians\" = \"trust_politicians\",\n          \"Trust in political parties\" = \"trust_parties\",\n          \"Trust in the European Parliament\" = \"trust_eu\",\n          \"Trust in the United Nations\" = \"trust_un\"\n        )\n      ),\n      \n      ### select a variable ----\n      selectInput(\n        \"yvar\",\n        label = \"Select an independent variable\",\n        choices = c(\n          \"Placement on the left-right scale\" = \"left_right\",\n          \"Age\" = \"age\",\n          \"Feeling about household's income\" = \"income_feeling\",\n          \"How often do you use the internet?\" = \"internet_use\",\n          \"How happy are you?\" = \"happiness\"\n        )\n      ),\n      \n      ### select a country ----\n      selectizeInput(\n        \"countries\",\n        label = \"Filter by country\",\n        choices = unique(ess$country),\n        selected = \"FR\",\n        multiple = TRUE\n      ),\n      \n      ### filter values ----\n      sliderInput(\n        \"range\",\n        label = \"Set a value range\",\n        min = min(ess$trust_parliament, na.rm = TRUE),\n        max = max(ess$trust_parliament, na.rm = TRUE),\n        value = range(ess$trust_parliament, na.rm = TRUE),\n        step = 1\n      )\n    ),\n    \n    ## Main panel ----\n    mainPanel(\n      tabsetPanel(\n        type = \"tabs\",\n        \n        ### Table tab ----\n        tabPanel(\n          title = \"Table\",\n          div(\n            style = \"height: 600px; overflow-y: auto;\",\n            tableOutput(\"table\")\n          )\n        ),\n        \n        ### Plot tab ----\n        tabPanel(\n          title = \"Plot\",\n          plotlyOutput(\"plot\", height = 600)\n        ),\n        \n        ### Map tab ----\n        tabPanel(\n          title = \"Map\",\n          leafletOutput(\"map\", height = 600)\n        )\n      )\n    )\n  )\n)\n\n\n# Server ----\nserver &lt;- function(input, output, session) {\n  # update slider ----\n  observe({\n    var &lt;- na.omit(ess[[input$xvar]])\n    is_ordered &lt;- is.ordered(var)\n    var &lt;- as.numeric(var)\n    updateSliderInput(\n      inputId = \"range\",\n      min = min(var),\n      max = max(var),\n      value = range(var),\n      step = if (is_ordered) 1\n    )\n  }) %&gt;%\n    bindEvent(input$xvar)\n  \n  # filter data ----\n  filtered &lt;- reactive({\n    req(input$countries, cancelOutput = TRUE)\n    \n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    range &lt;- input$range\n    \n    # select country\n    ess &lt;- ess[ess$country %in% input$countries, ]\n    \n    # select variable\n    ess &lt;- ess[c(\"idno\", \"country\", xvar, yvar)]\n    \n    # apply range\n    ess &lt;- ess[ess[[xvar]] &gt; range[1] & ess[[xvar]] &lt; range[2], ]\n    ess\n  })\n  \n  # render table ----\n  output$table &lt;- renderTable({\n    filtered()\n  }, height = 400)\n  \n  # render plot ----\n  output$plot &lt;- renderPlotly({\n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    plot_data &lt;- filtered() %&gt;%\n      drop_na() %&gt;%\n      mutate(across(where(is.numeric), .fns = as.ordered))\n    \n    p &lt;- ggplot(plot_data) +\n      aes(x = .data[[xvar]], y = .data[[yvar]], group = .data[[xvar]]) +\n      geom_violin(fill = \"lightblue\", show.legend = FALSE) +\n      theme_classic()\n    ggplotly(p)\n  })\n  \n  # render map ----\n  output$map &lt;- renderLeaflet({\n    var &lt;- input$xvar\n    ess_geo &lt;- ess_geo[c(\"country\", var)]\n    \n    # create labels with a bold title and a body\n    labels &lt;- sprintf(\n      \"&lt;strong&gt;%s&lt;/strong&gt;&lt;br&gt;%s\",\n      ess_geo$country,\n      ess_geo[[var]]\n    )\n    labels &lt;- lapply(labels, HTML)\n    \n    # create a palette for numerics and ordinals\n    if (is.ordered(ess_geo[[var]])) {\n      pal &lt;- colorFactor(\"YlOrRd\", domain = NULL)\n    } else {\n      pal &lt;- colorNumeric(\"YlOrRd\", domain = NULL)\n    }\n    \n    # construct leaflet canvas\n    leaflet(ess_geo) %&gt;%\n      # add base map\n      addTiles() %&gt;%\n      # add choropleths\n      addPolygons(\n        fillColor = pal(ess_geo[[var]]),\n        weight = 2,\n        opacity = 1,\n        color = \"white\",\n        fillOpacity = 0.7,\n        # highlight polygons on hover\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"#666\",\n          fillOpacity = 0.7,\n          bringToFront = TRUE\n        ),\n        label = labels\n      ) %&gt;%\n      # add a legend\n      addLegend(\n        position = \"bottomleft\",\n        pal = pal,\n        values = ess_geo[[var]],\n        opacity = 0.7,\n        title = var\n      )\n  })\n}\n\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "06-visualization.html#exercise-session",
    "href": "06-visualization.html#exercise-session",
    "title": "Modelling and visualizing data",
    "section": "7 Exercise session",
    "text": "7 Exercise session\n\n7.1 Plotly\n\n\n\n\n\n\nExercise 1.1\n\n\n\nAdd a new tab to the app. Add an output canvas to the UI and a render function to the server function such that the new tab is able to display an interactive plotly widget.\n\n\n\n\n\n\n\n\nSolution 1.2\n\n\n\n\n\nIn the UI, add a new tabPanel() to the tabsetPanel().\n\nmainPanel(\n  tabsetPanel(\n    type = \"tabs\",\n    \n    ### Table tab ----\n    tabPanel(\n      title = \"Table\",\n      div(\n        style = \"height: 600px; overflow-y: auto;\",\n        tableOutput(\"table\")\n      )\n    ),\n    \n    ### Plot tab ----\n    tabPanel(\n      title = \"Plot\",\n      plotlyOutput(\"plot\", height = 600)\n    ),\n    \n    ### Map tab ----\n    tabPanel(\n      title = \"Map\",\n      leafletOutput(\"map\", height = 600)\n    ),\n\n    ### New tab ----\n    tabPanel(\n      title = \"Histogram\",\n      plotlyOutput(\"hist\", height = 600)\n    )\n  )\n)\n\nIn the server function, add renderPlotly and assign it to the output object.\n\noutput$hist &lt;- renderPlotly({\n\n})\n\n\n\nComplete code (important lines are highlighted)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(shiny)\nlibrary(plotly)\nlibrary(leaflet)\nlibrary(haven)\n\ness &lt;- readRDS(\"data/ess_trust.rds\")\ness_geo &lt;- readRDS(\"data/ess_trust_geo.rds\")\n\n# UI ----\nui &lt;- fluidPage(\n  titlePanel(\"European Social Survey - round 10\"),\n  \n  ## Sidebar ----\n  sidebarLayout(\n    sidebarPanel(\n      ### select dependent variable\n      selectInput(\n        \"xvar\",\n        label = \"Select a dependent variable\",\n        choices = c(\n          \"Trust in country's parliament\" = \"trust_parliament\",\n          \"Trust in the legal system\" = \"trust_legal\",\n          \"Trust in the police\" = \"trust_police\",\n          \"Trust in politicians\" = \"trust_politicians\",\n          \"Trust in political parties\" = \"trust_parties\",\n          \"Trust in the European Parliament\" = \"trust_eu\",\n          \"Trust in the United Nations\" = \"trust_un\"\n        )\n      ),\n      \n      ### select a variable ----\n      selectInput(\n        \"yvar\",\n        label = \"Select an independent variable\",\n        choices = c(\n          \"Placement on the left-right scale\" = \"left_right\",\n          \"Age\" = \"age\",\n          \"Feeling about household's income\" = \"income_feeling\",\n          \"How often do you use the internet?\" = \"internet_use\",\n          \"How happy are you?\" = \"happiness\"\n        )\n      ),\n      \n      ### select a country ----\n      selectizeInput(\n        \"countries\",\n        label = \"Filter by country\",\n        choices = unique(ess$country),\n        selected = \"FR\",\n        multiple = TRUE\n      ),\n      \n      ### filter values ----\n      sliderInput(\n        \"range\",\n        label = \"Set a value range\",\n        min = min(ess$trust_parliament, na.rm = TRUE),\n        max = max(ess$trust_parliament, na.rm = TRUE),\n        value = range(ess$trust_parliament, na.rm = TRUE),\n        step = 1\n      )\n    ),\n    \n    ## Main panel ----\n    mainPanel(\n      tabsetPanel(\n        type = \"tabs\",\n        \n        ### Table tab ----\n        tabPanel(\n          title = \"Table\",\n          div(\n            style = \"height: 600px; overflow-y: auto;\",\n            tableOutput(\"table\")\n          )\n        ),\n        \n        ### Plot tab ----\n        tabPanel(\n          title = \"Plot\",\n          plotlyOutput(\"plot\", height = 600)\n        ),\n        \n        ### Map tab ----\n        tabPanel(\n          title = \"Map\",\n          leafletOutput(\"map\", height = 600)\n        ),\n\n        ### New tab ----\n        tabPanel(\n          title = \"Histogram\",\n          plotlyOutput(\"hist\", height = 600)\n        )\n      )\n    )\n  )\n)\n\n\n# Server ----\nserver &lt;- function(input, output, session) {\n  # update slider ----\n  observe({\n    var &lt;- na.omit(ess[[input$xvar]])\n    is_ordered &lt;- is.ordered(var)\n    var &lt;- as.numeric(var)\n    updateSliderInput(\n      inputId = \"range\",\n      min = min(var),\n      max = max(var),\n      value = range(var),\n      step = if (is_ordered) 1\n    )\n  }) %&gt;%\n    bindEvent(input$xvar)\n  \n  # filter data ----\n  filtered &lt;- reactive({\n    req(input$countries, cancelOutput = TRUE)\n    \n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    range &lt;- input$range\n    \n    # select country\n    ess &lt;- ess[ess$country %in% input$countries, ]\n    \n    # select variable\n    ess &lt;- ess[c(\"idno\", \"country\", xvar, yvar)]\n    \n    # apply range\n    ess &lt;- ess[ess[[xvar]] &gt; range[1] & ess[[xvar]] &lt; range[2], ]\n    ess\n  })\n  \n  # render table ----\n  output$table &lt;- renderTable({\n    filtered()\n  }, height = 400)\n  \n  # render plot ----\n  output$plot &lt;- renderPlotly({\n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    plot_data &lt;- filtered() %&gt;%\n      drop_na() %&gt;%\n      mutate(across(where(is.numeric), .fns = as.ordered))\n    \n    p &lt;- ggplot(plot_data) +\n      aes(x = .data[[xvar]], y = .data[[yvar]], group = .data[[xvar]]) +\n      geom_violin(fill = \"lightblue\", show.legend = FALSE) +\n      theme_classic()\n    ggplotly(p)\n  })\n  \n  # render map ----\n  output$map &lt;- renderLeaflet({\n    var &lt;- input$xvar\n    ess_geo &lt;- ess_geo[c(\"country\", var)]\n    \n    # create labels with a bold title and a body\n    labels &lt;- sprintf(\n      \"&lt;strong&gt;%s&lt;/strong&gt;&lt;br&gt;%s\",\n      ess_geo$country,\n      ess_geo[[var]]\n    )\n    labels &lt;- lapply(labels, HTML)\n    \n    # create a palette for numerics and ordinals\n    if (is.ordered(ess_geo[[var]])) {\n      pal &lt;- colorFactor(\"YlOrRd\", domain = NULL)\n    } else {\n      pal &lt;- colorNumeric(\"YlOrRd\", domain = NULL)\n    }\n    \n    # construct leaflet canvas\n    leaflet(ess_geo) %&gt;%\n      # add base map\n      addTiles() %&gt;%\n      # add choropleths\n      addPolygons(\n        fillColor = pal(ess_geo[[var]]),\n        weight = 2,\n        opacity = 1,\n        color = \"white\",\n        fillOpacity = 0.7,\n        # highlight polygons on hover\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"#666\",\n          fillOpacity = 0.7,\n          bringToFront = TRUE\n        ),\n        label = labels\n      ) %&gt;%\n      # add a legend\n      addLegend(\n        position = \"bottomleft\",\n        pal = pal,\n        values = ess_geo[[var]],\n        opacity = 0.7,\n        title = var\n      )\n  })\n  \n  output$hist &lt;- renderPlotly({\n    \n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n\n\n\n\n\n\n\n\n\n\nExercise 1.2\n\n\n\nIn section 3, we implemented a bivariate plot of the ESS data. For this exercise, create a univariate plotly plot of one of the trust variables. In the solution, I will be using a histogram, but this could also be a stacked bar chart, a kernel density curve, etc. The idea is to get a quick overview of the statistical distribution of a trust variable.\nYou can do this either through plotly’s own grammar (plot_ly()) or by converting a ggplot (ggplotly()). In the solutions, I will be using plotly though.\nNote that, due to a bug in plotly, the labels of the ESS dataset have to be removed from the dataset. This can be done either by casting as.numeric on a variable or by zapping labels with haven::zap_labels().\n\n\n\n\n\n\n\n\nSolution 1.2\n\n\n\n\n\nThe following solution implements a histogram of the trust_parliament variable.\n\ness &lt;- readRDS(\"data/ess_trust.rds\")\n\nplot_ly(ess, x = ~as.numeric(trust_parliament)) %&gt;%\n  add_histogram()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 1.3\n\n\n\nCustomize the plotly plot according to the following requests:\n\nChange the axis titles to something useful\nDecrease the opacity to 70%\nRemove the modebar\nIncrease the gap between histogram bars to 20%.\nChange the bar color to green\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nRecall that plotly can be customized using the layout, style, and config functions.\nTo find out about options specific to a plotly histogram, call plotly::schema() and navigate to traces -&gt; histogram.\nPlotly can be very confusing and there is no shame in using google!\n\n\n\n\n\n\n\n\n\nSolution 1.3\n\n\n\n\n\n\nplot_ly(ess) %&gt;%\n  add_histogram(x = ~as.numeric(trust_parliament)) %&gt;%\n\n  # everything that changes the overall theming goes here\n  layout(\n      xaxis = list(title = \"Trust in the national parliament\"),\n      yaxis = list(title = \"Observations\"),\n      bargap = 0.2\n  ) %&gt;%\n\n  # everything that changes the data- and plot-specific theming goes here\n  style(opacity = 0.7, marker = list(color = \"green\")) %&gt;%\n\n  # everything that changes the interactivity goes here\n  config(displayModeBar = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 1.4\n\n\n\nImplement the plot from exercise 1.3 in the Shiny app. Instead of plotting a single static variable, link the histogram to the input selector for the dependent variable (input$xvar) such that choosing a different trust variable updates the histogram.\n\n\n\n\n\n\n\n\nSolution 1.4\n\n\n\n\n\n\noutput$hist &lt;- renderPlotly({\n  plot_ly(filtered()) %&gt;%\n  add_histogram(x = as.numeric(ess[input$xvar])) %&gt;%\n\n  # everything that changes the overall theming goes here\n  layout(\n      xaxis = list(title = \"Trust in the national parliament\"),\n      yaxis = list(title = \"Observations\"),\n      bargap = 0.2\n  ) %&gt;%\n\n  # everything that changes the data- and plot-specific theming goes here\n  style(opacity = 0.7, marker = list(color = \"green\")) %&gt;%\n\n  # everything that changes the interactivity goes here\n  config(displayModeBar = FALSE)\n})\n\n\n\nComplete code (important lines are highlighted)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(shiny)\nlibrary(plotly)\nlibrary(leaflet)\nlibrary(haven)\n\ness &lt;- readRDS(\"data/ess_trust.rds\")\ness_geo &lt;- readRDS(\"data/ess_trust_geo.rds\")\n\n# UI ----\nui &lt;- fluidPage(\n  titlePanel(\"European Social Survey - round 10\"),\n  \n  ## Sidebar ----\n  sidebarLayout(\n    sidebarPanel(\n      ### select dependent variable\n      selectInput(\n        \"xvar\",\n        label = \"Select a dependent variable\",\n        choices = c(\n          \"Trust in country's parliament\" = \"trust_parliament\",\n          \"Trust in the legal system\" = \"trust_legal\",\n          \"Trust in the police\" = \"trust_police\",\n          \"Trust in politicians\" = \"trust_politicians\",\n          \"Trust in political parties\" = \"trust_parties\",\n          \"Trust in the European Parliament\" = \"trust_eu\",\n          \"Trust in the United Nations\" = \"trust_un\"\n        )\n      ),\n      \n      ### select a variable ----\n      selectInput(\n        \"yvar\",\n        label = \"Select an independent variable\",\n        choices = c(\n          \"Placement on the left-right scale\" = \"left_right\",\n          \"Age\" = \"age\",\n          \"Feeling about household's income\" = \"income_feeling\",\n          \"How often do you use the internet?\" = \"internet_use\",\n          \"How happy are you?\" = \"happiness\"\n        )\n      ),\n      \n      ### select a country ----\n      selectizeInput(\n        \"countries\",\n        label = \"Filter by country\",\n        choices = unique(ess$country),\n        selected = \"FR\",\n        multiple = TRUE\n      ),\n      \n      ### filter values ----\n      sliderInput(\n        \"range\",\n        label = \"Set a value range\",\n        min = min(ess$trust_parliament, na.rm = TRUE),\n        max = max(ess$trust_parliament, na.rm = TRUE),\n        value = range(ess$trust_parliament, na.rm = TRUE),\n        step = 1\n      )\n    ),\n    \n    ## Main panel ----\n    mainPanel(\n      tabsetPanel(\n        type = \"tabs\",\n        \n        ### Table tab ----\n        tabPanel(\n          title = \"Table\",\n          div(\n            style = \"height: 600px; overflow-y: auto;\",\n            tableOutput(\"table\")\n          )\n        ),\n        \n        ### Plot tab ----\n        tabPanel(\n          title = \"Plot\",\n          plotlyOutput(\"plot\", height = 600)\n        ),\n        \n        ### Map tab ----\n        tabPanel(\n          title = \"Map\",\n          leafletOutput(\"map\", height = 600)\n        ),\n        \n        ### New tab ----\n        tabPanel(\n          title = \"Histogram\",\n          plotlyOutput(\"hist\", height = 600)\n        )\n      )\n    )\n  )\n)\n\n\n# Server ----\nserver &lt;- function(input, output, session) {\n  # update slider ----\n  observe({\n    var &lt;- na.omit(ess[[input$xvar]])\n    is_ordered &lt;- is.ordered(var)\n    var &lt;- as.numeric(var)\n    updateSliderInput(\n      inputId = \"range\",\n      min = min(var),\n      max = max(var),\n      value = range(var),\n      step = if (is_ordered) 1\n    )\n  }) %&gt;%\n    bindEvent(input$xvar)\n  \n  # filter data ----\n  filtered &lt;- reactive({\n    req(input$countries, cancelOutput = TRUE)\n    \n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    range &lt;- input$range\n    \n    # select country\n    ess &lt;- ess[ess$country %in% input$countries, ]\n    \n    # select variable\n    ess &lt;- ess[c(\"idno\", \"country\", xvar, yvar)]\n    \n    # apply range\n    ess &lt;- ess[ess[[xvar]] &gt; range[1] & ess[[xvar]] &lt; range[2], ]\n    ess\n  })\n  \n  # render table ----\n  output$table &lt;- renderTable({\n    filtered()\n  }, height = 400)\n  \n  # render plot ----\n  output$plot &lt;- renderPlotly({\n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    plot_data &lt;- filtered() %&gt;%\n      drop_na() %&gt;%\n      mutate(across(where(is.numeric), .fns = as.ordered))\n    \n    p &lt;- ggplot(plot_data) +\n      aes(x = .data[[xvar]], y = .data[[yvar]], group = .data[[xvar]]) +\n      geom_violin(fill = \"lightblue\", show.legend = FALSE) +\n      theme_classic()\n    ggplotly(p)\n  })\n  \n  # render map ----\n  output$map &lt;- renderLeaflet({\n    var &lt;- input$xvar\n    ess_geo &lt;- ess_geo[c(\"country\", var)]\n    \n    # create labels with a bold title and a body\n    labels &lt;- sprintf(\n      \"&lt;strong&gt;%s&lt;/strong&gt;&lt;br&gt;%s\",\n      ess_geo$country,\n      ess_geo[[var]]\n    )\n    labels &lt;- lapply(labels, HTML)\n    \n    # create a palette for numerics and ordinals\n    if (is.ordered(ess_geo[[var]])) {\n      pal &lt;- colorFactor(\"YlOrRd\", domain = NULL)\n    } else {\n      pal &lt;- colorNumeric(\"YlOrRd\", domain = NULL)\n    }\n    \n    # construct leaflet canvas\n    leaflet(ess_geo) %&gt;%\n      # add base map\n      addTiles() %&gt;%\n      # add choropleths\n      addPolygons(\n        fillColor = pal(ess_geo[[var]]),\n        weight = 2,\n        opacity = 1,\n        color = \"white\",\n        fillOpacity = 0.7,\n        # highlight polygons on hover\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"#666\",\n          fillOpacity = 0.7,\n          bringToFront = TRUE\n        ),\n        label = labels\n      ) %&gt;%\n      # add a legend\n      addLegend(\n        position = \"bottomleft\",\n        pal = pal,\n        values = ess_geo[[var]],\n        opacity = 0.7,\n        title = var\n      )\n  })\n  \n  output$hist &lt;- renderPlotly({\n    plot_ly(filtered()) %&gt;%\n      add_histogram(x = as.numeric(ess[[input$xvar]])) %&gt;%\n      \n      # everything that changes the overall theming goes here\n      layout(\n        xaxis = list(title = input$xvar),\n        yaxis = list(title = \"Observations\"),\n        bargap = 0.2\n      ) %&gt;%\n      \n      # everything that changes the data- and plot-specific theming goes here\n      style(opacity = 0.7, marker = list(color = \"green\")) %&gt;%\n      \n      # everything that changes the interactivity goes here\n      config(displayModeBar = FALSE)\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n\n\n\n\n\n\n7.2 Leaflet\n\n\n7.3 Plot events\n\n\n7.4 Beyond plotly and leaflet\n\n\n\n\n\n\nExercise 4.1\n\n\n\nThinking back to the list of Javascript libraries for interactive plotting in section 2.1, pick one R interface that appeals to you the most. Study its documentation and vignettes to get a basic understanding of the interface.\n\n\n\n\n\n\n\n\nExercise 4.2\n\n\n\nAdd a new tab to the app. Replicate the violin plots from section 3 as boxplots using an R interface of your choice.\nNote that not all plotting libraries support violin and boxplots to the same degree.\n\n\n\n\n\n\n\n\nExample solution 4.2\n\n\n\n\n\nAn example solution with the highcharter package:\n\n\nComplete code (important lines are highlighted)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(shiny)\nlibrary(plotly)\nlibrary(leaflet)\nlibrary(haven)\n\ness &lt;- readRDS(\"../../../data/ess_trust.rds\")\ness_geo &lt;- readRDS(\"../../../data/ess_trust_geo.rds\")\n\n# UI ----\nui &lt;- fluidPage(\n  titlePanel(\"European Social Survey - round 10\"),\n  \n  ## Sidebar ----\n  sidebarLayout(\n    sidebarPanel(\n      ### select dependent variable\n      selectInput(\n        \"xvar\",\n        label = \"Select a dependent variable\",\n        choices = c(\n          \"Trust in country's parliament\" = \"trust_parliament\",\n          \"Trust in the legal system\" = \"trust_legal\",\n          \"Trust in the police\" = \"trust_police\",\n          \"Trust in politicians\" = \"trust_politicians\",\n          \"Trust in political parties\" = \"trust_parties\",\n          \"Trust in the European Parliament\" = \"trust_eu\",\n          \"Trust in the United Nations\" = \"trust_un\"\n        )\n      ),\n      \n      ### select a variable ----\n      selectInput(\n        \"yvar\",\n        label = \"Select an independent variable\",\n        choices = c(\n          \"Placement on the left-right scale\" = \"left_right\",\n          \"Age\" = \"age\",\n          \"Feeling about household's income\" = \"income_feeling\",\n          \"How often do you use the internet?\" = \"internet_use\",\n          \"How happy are you?\" = \"happiness\"\n        )\n      ),\n      \n      ### select a country ----\n      selectizeInput(\n        \"countries\",\n        label = \"Filter by country\",\n        choices = unique(ess$country),\n        selected = \"FR\",\n        multiple = TRUE\n      ),\n      \n      ### filter values ----\n      sliderInput(\n        \"range\",\n        label = \"Set a value range\",\n        min = min(ess$trust_parliament, na.rm = TRUE),\n        max = max(ess$trust_parliament, na.rm = TRUE),\n        value = range(ess$trust_parliament, na.rm = TRUE),\n        step = 1\n      )\n    ),\n    \n    ## Main panel ----\n    mainPanel(\n      tabsetPanel(\n        type = \"tabs\",\n        \n        ### Table tab ----\n        tabPanel(\n          title = \"Table\",\n          div(\n            style = \"height: 600px; overflow-y: auto;\",\n            tableOutput(\"table\")\n          )\n        ),\n        \n        ### Plot tab ----\n        tabPanel(\n          title = \"Plot\",\n          plotlyOutput(\"plot\", height = 600)\n        ),\n        \n        ### Map tab ----\n        tabPanel(\n          title = \"Map\",\n          leafletOutput(\"map\", height = 600)\n        ),\n        \n        ### Highcharts tab ----\n        tabPanel(\n          title = \"Highcharts\",\n          highchartOutput(\"highcharts\", height = 600)\n        )\n      )\n    )\n  )\n)\n\n\n# Server ----\nserver &lt;- function(input, output, session) {\n  # update slider ----\n  observe({\n    var &lt;- na.omit(ess[[input$xvar]])\n    is_ordered &lt;- is.ordered(var)\n    var &lt;- as.numeric(var)\n    updateSliderInput(\n      inputId = \"range\",\n      min = min(var),\n      max = max(var),\n      value = range(var),\n      step = if (is_ordered) 1\n    )\n  }) %&gt;%\n    bindEvent(input$xvar)\n  \n  # filter data ----\n  filtered &lt;- reactive({\n    req(input$countries, cancelOutput = TRUE)\n    \n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    range &lt;- input$range\n    \n    # select country\n    ess &lt;- ess[ess$country %in% input$countries, ]\n    \n    # select variable\n    ess &lt;- ess[c(\"idno\", \"country\", xvar, yvar)]\n    \n    # apply range\n    ess &lt;- ess[ess[[xvar]] &gt; range[1] & ess[[xvar]] &lt; range[2], ]\n    ess\n  })\n  \n  # render table ----\n  output$table &lt;- renderTable({\n    filtered()\n  }, height = 400)\n  \n  # render plot ----\n  output$plot &lt;- renderPlotly({\n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    plot_data &lt;- filtered() %&gt;%\n      drop_na() %&gt;%\n      mutate(across(where(is.numeric), .fns = as.ordered))\n    \n    p &lt;- ggplot(plot_data) +\n      aes(x = .data[[xvar]], y = .data[[yvar]], group = .data[[xvar]]) +\n      geom_violin(fill = \"lightblue\", show.legend = FALSE) +\n      theme_classic()\n    ggplotly(p)\n  })\n  \n  # render map ----\n  output$map &lt;- renderLeaflet({\n    var &lt;- input$xvar\n    ess_geo &lt;- ess_geo[c(\"country\", var)]\n    \n    # create labels with a bold title and a body\n    labels &lt;- sprintf(\n      \"&lt;strong&gt;%s&lt;/strong&gt;&lt;br&gt;%s\",\n      ess_geo$country,\n      ess_geo[[var]]\n    )\n    labels &lt;- lapply(labels, HTML)\n    \n    # create a palette for numerics and ordinals\n    if (is.ordered(ess_geo[[var]])) {\n      pal &lt;- colorFactor(\"YlOrRd\", domain = NULL)\n    } else {\n      pal &lt;- colorNumeric(\"YlOrRd\", domain = NULL)\n    }\n    \n    # construct leaflet canvas\n    leaflet(ess_geo) %&gt;%\n      # add base map\n      addTiles() %&gt;%\n      # add choropleths\n      addPolygons(\n        fillColor = pal(ess_geo[[var]]),\n        weight = 2,\n        opacity = 1,\n        color = \"white\",\n        fillOpacity = 0.7,\n        # highlight polygons on hover\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"#666\",\n          fillOpacity = 0.7,\n          bringToFront = TRUE\n        ),\n        label = labels\n      ) %&gt;%\n      # add a legend\n      addLegend(\n        position = \"bottomleft\",\n        pal = pal,\n        values = ess_geo[[var]],\n        opacity = 0.7,\n        title = var\n      )\n  })\n  \n  # render highcharts\n  output$highcharts &lt;- renderHighchart({\n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    \n    ess &lt;- filtered() %&gt;%\n      zap_labels() %&gt;%\n      na.omit() %&gt;%\n      select(all_of(c(xvar, yvar))) %&gt;%\n      setNames(c(\"x\", \"y\"))\n    \n    highchart() %&gt;%\n      hc_add_series_list(data_to_boxplot(\n        ess,\n        x,\n        y,\n        color = \"black\",\n        fillColor = \"#ADD8E6\",\n        showInLegend = FALSE,\n        name = xvar\n      )) %&gt;%\n      hc_yAxis(\n        min = 0, max = max(ess$y, na.rm = TRUE),\n        title = list(text = yvar)\n      ) %&gt;%\n      hc_xAxis(type = \"category\", title = list(text = xvar)) %&gt;%\n      hc_legend(enabled = FALSE)\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n\nAn example solution with the apexcharter package:\n\n\nComplete code (important lines are highlighted)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(shiny)\nlibrary(plotly)\nlibrary(leaflet)\nlibrary(haven)\n\ness &lt;- readRDS(\"../../../data/ess_trust.rds\")\ness_geo &lt;- readRDS(\"../../../data/ess_trust_geo.rds\")\n\n# UI ----\nui &lt;- fluidPage(\n  titlePanel(\"European Social Survey - round 10\"),\n  \n  ## Sidebar ----\n  sidebarLayout(\n    sidebarPanel(\n      ### select dependent variable\n      selectInput(\n        \"xvar\",\n        label = \"Select a dependent variable\",\n        choices = c(\n          \"Trust in country's parliament\" = \"trust_parliament\",\n          \"Trust in the legal system\" = \"trust_legal\",\n          \"Trust in the police\" = \"trust_police\",\n          \"Trust in politicians\" = \"trust_politicians\",\n          \"Trust in political parties\" = \"trust_parties\",\n          \"Trust in the European Parliament\" = \"trust_eu\",\n          \"Trust in the United Nations\" = \"trust_un\"\n        )\n      ),\n      \n      ### select a variable ----\n      selectInput(\n        \"yvar\",\n        label = \"Select an independent variable\",\n        choices = c(\n          \"Placement on the left-right scale\" = \"left_right\",\n          \"Age\" = \"age\",\n          \"Feeling about household's income\" = \"income_feeling\",\n          \"How often do you use the internet?\" = \"internet_use\",\n          \"How happy are you?\" = \"happiness\"\n        )\n      ),\n      \n      ### select a country ----\n      selectizeInput(\n        \"countries\",\n        label = \"Filter by country\",\n        choices = unique(ess$country),\n        selected = \"FR\",\n        multiple = TRUE\n      ),\n      \n      ### filter values ----\n      sliderInput(\n        \"range\",\n        label = \"Set a value range\",\n        min = min(ess$trust_parliament, na.rm = TRUE),\n        max = max(ess$trust_parliament, na.rm = TRUE),\n        value = range(ess$trust_parliament, na.rm = TRUE),\n        step = 1\n      )\n    ),\n    \n    ## Main panel ----\n    mainPanel(\n      tabsetPanel(\n        type = \"tabs\",\n        \n        ### Table tab ----\n        tabPanel(\n          title = \"Table\",\n          div(\n            style = \"height: 600px; overflow-y: auto;\",\n            tableOutput(\"table\")\n          )\n        ),\n        \n        ### Plot tab ----\n        tabPanel(\n          title = \"Plot\",\n          plotlyOutput(\"plot\", height = 600)\n        ),\n        \n        ### Map tab ----\n        tabPanel(\n          title = \"Map\",\n          leafletOutput(\"map\", height = 600)\n        ),\n        \n        ### Highcharts tab ----\n        tabPanel(\n          title = \"Highcharts\",\n          apexchartOutput(\"highcharts\", height = 600)\n        )\n      )\n    )\n  )\n)\n\n\n# Server ----\nserver &lt;- function(input, output, session) {\n  # update slider ----\n  observe({\n    var &lt;- na.omit(ess[[input$xvar]])\n    is_ordered &lt;- is.ordered(var)\n    var &lt;- as.numeric(var)\n    updateSliderInput(\n      inputId = \"range\",\n      min = min(var),\n      max = max(var),\n      value = range(var),\n      step = if (is_ordered) 1\n    )\n  }) %&gt;%\n    bindEvent(input$xvar)\n  \n  # filter data ----\n  filtered &lt;- reactive({\n    req(input$countries, cancelOutput = TRUE)\n    \n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    range &lt;- input$range\n    \n    # select country\n    ess &lt;- ess[ess$country %in% input$countries, ]\n    \n    # select variable\n    ess &lt;- ess[c(\"idno\", \"country\", xvar, yvar)]\n    \n    # apply range\n    ess &lt;- ess[ess[[xvar]] &gt; range[1] & ess[[xvar]] &lt; range[2], ]\n    ess\n  })\n  \n  # render table ----\n  output$table &lt;- renderTable({\n    filtered()\n  }, height = 400)\n  \n  # render plot ----\n  output$plot &lt;- renderPlotly({\n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    plot_data &lt;- filtered() %&gt;%\n      drop_na() %&gt;%\n      mutate(across(where(is.numeric), .fns = as.ordered))\n    \n    p &lt;- ggplot(plot_data) +\n      aes(x = .data[[xvar]], y = .data[[yvar]], group = .data[[xvar]]) +\n      geom_violin(fill = \"lightblue\", show.legend = FALSE) +\n      theme_classic()\n    ggplotly(p)\n  })\n  \n  # render map ----\n  output$map &lt;- renderLeaflet({\n    var &lt;- input$xvar\n    ess_geo &lt;- ess_geo[c(\"country\", var)]\n    \n    # create labels with a bold title and a body\n    labels &lt;- sprintf(\n      \"&lt;strong&gt;%s&lt;/strong&gt;&lt;br&gt;%s\",\n      ess_geo$country,\n      ess_geo[[var]]\n    )\n    labels &lt;- lapply(labels, HTML)\n    \n    # create a palette for numerics and ordinals\n    if (is.ordered(ess_geo[[var]])) {\n      pal &lt;- colorFactor(\"YlOrRd\", domain = NULL)\n    } else {\n      pal &lt;- colorNumeric(\"YlOrRd\", domain = NULL)\n    }\n    \n    # construct leaflet canvas\n    leaflet(ess_geo) %&gt;%\n      # add base map\n      addTiles() %&gt;%\n      # add choropleths\n      addPolygons(\n        fillColor = pal(ess_geo[[var]]),\n        weight = 2,\n        opacity = 1,\n        color = \"white\",\n        fillOpacity = 0.7,\n        # highlight polygons on hover\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"#666\",\n          fillOpacity = 0.7,\n          bringToFront = TRUE\n        ),\n        label = labels\n      ) %&gt;%\n      # add a legend\n      addLegend(\n        position = \"bottomleft\",\n        pal = pal,\n        values = ess_geo[[var]],\n        opacity = 0.7,\n        title = var\n      )\n  })\n  \n  # render highcharts\n  output$highcharts &lt;- renderApexchart({\n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    \n    apex(filtered(), aes(.data[[\"trust_eu\"]], .data[[\"left_right\"]]), \"boxplot\") %&gt;%\n      ax_plotOptions(boxPlot = boxplot_opts(color.upper = \"#ADD8E6\", color.lower = \"#ADD8E6\")) %&gt;%\n      ax_stroke(colors = list(\"black\")) %&gt;%\n      ax_labs(x = \"eu_trust\", y = \"left_right\")\n  })\n}\n\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "06-visualization.html#plot-events",
    "href": "06-visualization.html#plot-events",
    "title": "Modelling and visualizing data",
    "section": "5 Plot events",
    "text": "5 Plot events",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "06-visualization.html#reactivity",
    "href": "06-visualization.html#reactivity",
    "title": "Modelling and visualizing data",
    "section": "5 Reactivity",
    "text": "5 Reactivity\n\nWe already covered Shiny’s reactivity quite extensively\nRecall:\n\nA user changes an input\nThe server processes that input\nThe UI updates\n\nIt turns out, most plotting systems in Shiny support what we will call “plot events”\n\n\n5.1 Plot events\n\nA plot event is triggered by a widget if a user interacts with it\nIn a sense, plot events are a cross-over of interactivity and reactivity\nA plot event is hidden, i.e. it does not have to be explicitly defined in the UI – it’s just created automatically on the go.\nBy far not all widgets define plot events, but the most important plotting frameworks do:\n\nplotly defines a plethora of plot events through the event_data function\nleaflet automatically creates a number of plot events for each map\nEven basic plotting supports plot events through additional arguments to plotOutput\n\nTo illustrate plot events, we will use leaflet events\n\n\n\n5.2 Leaflet’s plot events\n\nLeaflet events are accessed like so:\n\n\ninput$&lt;Map ID&gt;_&lt;Object type&gt;_&lt;Event type&gt;\n\n\nMap ID refers to the input ID given to the leaflet map\n\n\n5.2.1 Leaflet object types\n\n“Object type” refers to the geometry, which can be one of:\n\nmarker for points\nshape for polygons and lines\ngeojson and topojson for data that was passed in GeoJSON or TopoJSON format\n\n\n\n\n5.2.2 Leaflet event types\n\n“Event type” refers to the action that is performed on the geometry to trigger the event, one of:\n\nclick\nmouseover\nmouseout\n\n\n\n\n5.2.3 Other events\n\nAdditionally, Leaflet has some more general events:\n\ninput$&lt;Map ID&gt;_click triggers when the background of the map is clicked\ninput$&lt;Map ID&gt;_bounds provides the bounding box of the current view\ninput$&lt;Map ID&gt;_zoom provides the current zoom level\ninput$&lt;Map ID&gt;_center provides the center point of the current view",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "06-visualization.html#proxies",
    "href": "06-visualization.html#proxies",
    "title": "Modelling and visualizing data",
    "section": "6 Proxies",
    "text": "6 Proxies\n\nSimilar to plot events, most Shiny plotting frameworks implement what is called proxies\nA proxy is a representation of an existing widget\nSuch proxies can be manipulated in place, i.e. they do not need to be re-rendered\n\n\n6.1 Proxies in Shiny frameworks\n\nMany Shiny extensions provide proxy functions:\n\nDT::dataTableProxy()\nplotly::plotlyProxy()\nleaflet::leafletProxy()\n\n\n\n\n6.2 Proxy workflow\n\nInitialize an isolated output widget (i.e., no dependencies) / isolate()\nCreate an observer that updates input dependencies / observe()\nInvalidate an input\nRemove existing features and add new ones\n\n\n\n\nReactive graph for proxies\n\n\n\n\n6.3 Manipulating proxies\n\nProxies are best combined with functions that add to, remove to, or clear a widget\nThe following table summarizes these functions\n\n\n\n\n\n\n\n\n\n\nCategory\nAdd functions\nRemove\nClear\n\n\n\n\ntile\naddTiles(), addProviderTiles()\nremoveTiles()\nclearTiles()\n\n\nmarker\naddMarkers(), addCircleMarkers()\nremoveMarker()\nclearMarkers()\n\n\nshape\naddPolygons(), addPolylines(), addCircles(), addRectangles()\nremoveShape()\nclearShapes()\n\n\ngeojson\naddGeoJSON()\nremoveGeoJSON()\nclearGeoJSON()\n\n\ntopojson\naddTopoJSON()\nremoveTopoJSON()\nclearTopoJSON()\n\n\ncontrol\naddControl()\nremoveControl()\nclearControls()\n\n\n\n\n\n6.4 Synthesis: Plot events, proxies, and plot manipulation\n\nProxies unleash their potential when combined with plot events and plot manipulation:\nThis combination allows users to manipulate plots themselves (e.g. adding or removing elements)\nThe following example makes use of all three concepts to create a map that can add and remove simple markers\n\nPlot events: input$map_click and input$map_marker_click to register where markers should be added and removed\nleafletProxy(\"map\"): A proxy is needed to manipulate the map without resetting the view\naddMarkers and removeMarker to add and remove markers\n\n\n\nui &lt;- fluidPage(\n  leafletOutput(\"map\")\n)\n\nserver &lt;- function(input, output, session) {\n\n  # initial map render\n1  output$map &lt;- renderLeaflet({\n    leaflet() %&gt;%\n      addTiles() %&gt;%\n      setView(lng = 7, lat = 52, zoom = 7)\n  })\n\n  # add marker\n2  observe({\n    click &lt;- input$map_click\n    leafletProxy(\"map\") %&gt;%\n      addMarkers(lng = click$lng, lat = click$lat, layerId = toString(click))\n  }) %&gt;%\n    bindEvent(input$map_click)\n\n  # remove marker\n3  observe({\n    click &lt;- input$map_marker_click\n    leafletProxy(\"map\") %&gt;%\n      removeMarker(click$id)\n  }) %&gt;%\n    bindEvent(input$map_marker_click)\n}\n\nrunApp(shinyApp(ui, server))\n\n\n1\n\nRender the leaflet map once. Note that the render function does not take any dependencies and is thus only run once.\n\n2\n\nAdd a marker every time the map is clicked somewhere. Note that the marker is added not to a new map, but to a proxy of the map that is already rendered.\n\n3\n\nRemove a marker that is clicked. Note how the observer is only triggered when a marker is clicked, i.e. when input$map_marker_click is triggered.",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  }
]