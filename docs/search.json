[
  {
    "objectID": "09-build-your-own.html",
    "href": "09-build-your-own.html",
    "title": "Build your own app",
    "section": "",
    "text": "Learning outcomes:\n\nBecome proficient in designing and developing a Shiny app from start to finish\nDevelop and sketch out ideas about interactive visualization as Shiny app prototypes\nAcquire a holistic understanding of the Shiny development workflow"
  },
  {
    "objectID": "09-build-your-own.html#bring-your-own-dataset",
    "href": "09-build-your-own.html#bring-your-own-dataset",
    "title": "Build your own app",
    "section": "2.1 Bring your own dataset",
    "text": "2.1 Bring your own dataset\n\nIf you already have a dataset that you want to build an app around, feel free to do this today!"
  },
  {
    "objectID": "09-build-your-own.html#european-social-survey---wave-9",
    "href": "09-build-your-own.html#european-social-survey---wave-9",
    "title": "Build your own app",
    "section": "2.2 European social survey - wave 9",
    "text": "2.2 European social survey - wave 9\n\nWe used this dataset alongside the workshop\nYou can find\nIt contains data on political trust, political spectrum, demographics, internet use, happiness, and income\nThe dataset contains haven labels which help understand the scales of each variables\nBase information:\n\nRegion: Europe\nTime: 2018\nObservations: 49,519\nVariables: 14\n\nHow to read the data:\n\n\nlibrary(haven) # the haven package has to be attached\ness &lt;- readRDS(\"ess_trust.rds\")\ness\n\n\n\n# A tibble: 49,519 × 14\n    idno country internet_use          trust_parliament trust_legal trust_police\n   &lt;dbl&gt; &lt;chr&gt;   &lt;dbl+lbl&gt;             &lt;dbl+lbl&gt;        &lt;dbl+lbl&gt;   &lt;dbl+lbl&gt;   \n 1    27 AT      5 [Every day]         5 [5]            10 [Comple… 10 [Complet…\n 2   137 AT      5 [Every day]         7 [7]             8 [8]       8 [8]      \n 3   194 AT      4 [Most days]         6 [6]             8 [8]       8 [8]      \n 4   208 AT      5 [Every day]         0 [No trust at …  5 [5]       8 [8]      \n 5   220 AT      1 [Never]             7 [7]             8 [8]       8 [8]      \n 6   254 AT      2 [Only occasionally] 6 [6]             5 [5]       7 [7]      \n 7   290 AT      1 [Never]             0 [No trust at …  5 [5]       5 [5]      \n 8   301 AT      1 [Never]             5 [5]             7 [7]       7 [7]      \n 9   305 AT      5 [Every day]         1 [1]            10 [Comple… 10 [Complet…\n10   400 AT      4 [Most days]         3 [3]             5 [5]       5 [5]      \n# ℹ 49,509 more rows\n# ℹ 8 more variables: trust_politicians &lt;dbl+lbl&gt;, trust_parties &lt;dbl+lbl&gt;,\n#   trust_eu &lt;dbl+lbl&gt;, trust_un &lt;dbl+lbl&gt;, left_right &lt;dbl+lbl&gt;,\n#   happiness &lt;dbl+lbl&gt;, age &lt;dbl+lbl&gt;, income_feeling &lt;dbl+lbl&gt;\n\n\n\nDatamap:\n\n\n\n\n\n\n\n\nColumn\nDescription\n\n\n\n\nidno\nRespondent ID\n\n\ncountry\nCountry ID\n\n\ninternet_use\nPeople can use the internet on different devices such as computers, tablets and smartphones. How often do you use the internet on these or any other devices, whether for work or personal use?\n\n\ntrust_parliament\nHow much do you personally trust the national parliament?\n\n\ntrust_legal\nHow much do you personally trust the legal system?\n\n\ntrust_police\nHow much do you personally trust the police?\n\n\ntrust_politicians\nHow much do you personally trust politicians?\n\n\ntrust_parties\nHow much do you personal trust political parties?\n\n\ntrust_eu\nHow much do you personally trust the European parliament?\n\n\ntrust_un\nHow much do you personally trust the United Nations?\n\n\nleft_right\nIn politics people sometimes talk of ‘left’ and ‘right’. Where would you place yourself on this scale, where 0 means the left and 10 means the right?\n\n\nhappiness\nTaking all things together, how happy would you say you are?\n\n\nage\nAge of the respondent\n\n\nincome_feeling\nWhich of the descriptions on this card comes closest to how you feel about your household’s income nowadays?"
  },
  {
    "objectID": "09-build-your-own.html#guerry-dataset",
    "href": "09-build-your-own.html#guerry-dataset",
    "title": "Build your own app",
    "section": "2.3 Guerry dataset",
    "text": "2.3 Guerry dataset\n\nThis dataset stems from the “Essay on the Moral Statistics of France” from 1830, written by André-Michel Guerry\nIt features a number of indicators of the so-called “moral statistics”, including crime, literacy, wealth, donations, and more\nThe dataset is an sf dataset containing department polygons of 19th century France – it may thus be convenient for creating an app using leaflet maps\nBase information:\n\nRegion: France\nTime: 1815-1834\nObservations: 85\nVariables: 27\nSource: https://sfdep.josiahparry.com/reference/guerry\n\nHow to read the data:\n\n\nguerry &lt;- readRDS(url(\"https://github.com/paulcbauer/shiny_workshop/raw/shiny_workshop_2024/data/guerry.rds\"))\nguerry\n\nSimple feature collection with 85 features and 26 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441\nCRS:           NA\n# A tibble: 85 × 27\n   code_dept count ave_id_geo  dept region department   crime_pers crime_prop\n   &lt;fct&gt;     &lt;dbl&gt;      &lt;dbl&gt; &lt;int&gt; &lt;fct&gt;  &lt;fct&gt;             &lt;int&gt;      &lt;int&gt;\n 1 01            1         49     1 E      Ain               28870      15890\n 2 02            1        812     2 N      Aisne             26226       5521\n 3 03            1       1418     3 C      Allier            26747       7925\n 4 04            1       1603     4 E      Basses-Alpes      12935       7289\n 5 05            1       1802     5 E      Hautes-Alpes      17488       8174\n 6 07            1       2249     7 S      Ardeche            9474      10263\n 7 08            1      35395     8 N      Ardennes          35203       8847\n 8 09            1       2526     9 S      Ariege             6173       9597\n 9 10            1      34410    10 E      Aube              19602       4086\n10 11            1       2807    11 S      Aude              15647      10431\n# ℹ 75 more rows\n# ℹ 19 more variables: literacy &lt;int&gt;, donations &lt;int&gt;, infants &lt;int&gt;,\n#   suicides &lt;int&gt;, main_city &lt;ord&gt;, wealth &lt;int&gt;, commerce &lt;int&gt;,\n#   clergy &lt;int&gt;, crime_parents &lt;int&gt;, infanticide &lt;int&gt;,\n#   donation_clergy &lt;int&gt;, lottery &lt;int&gt;, desertion &lt;int&gt;, instruction &lt;int&gt;,\n#   prostitutes &lt;int&gt;, distance &lt;dbl&gt;, area &lt;int&gt;, pop1831 &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON&gt;\n\n\n\nDatamap:\n\n\n\n\n\n\n\n\nColumn\nDescription\n\n\n\n\ndept\nDepartment ID\n\n\nregion\nRegion of France (‘N’=’North’, ‘S’=’South’, ‘E’=’East’, ‘W’=’West’, ‘C’=’Central’)\n\n\ndepartment\nDepartment name\n\n\ncrime_pers\nPopulation per crime against persons\n\n\ncrime_prop\nPopulation per crime against property\n\n\nliteracy\nPercent of military conscripts who can read and write\n\n\ndonations\nNumber of donations to the poor\n\n\ninfants\nPopulation per illegitimate birth\n\n\nsuicides\nPopulation per suicide\n\n\nmain_city\nSize of the principal city (‘1:Sm’, ‘2:Med’, ‘3:Lg’)\n\n\nwealth\nPer capita tax on personal property\n\n\ncommerce\nRank of the number of patents per population\n\n\nclergy\nRank of the number of Catholic priests in active service population\n\n\ncrime_parents\nRank of the ratio of crimes against parents to all crimes\n\n\ninfanticide\nNumber of infanticides per population\n\n\ndonation_clergy\nNumber of bequests and donations to the clergy per population\n\n\nlottery\nPer capita wager on Royal Lottery\n\n\ndesertion\nNumber of soldiers accused of desertion minus the deficit produced by insuffiency of available billets\n\n\ninstruction\nInverse literacy\n\n\nprostitutes\nNumber of prostitutes registered in Paris\n\n\ndistance\nDistance to paris in km\n\n\narea\nArea in km²\n\n\npop1831\nPopulation in 1831, in thousands"
  },
  {
    "objectID": "07-deployment.html",
    "href": "07-deployment.html",
    "title": "Strengthen & Deploy",
    "section": "",
    "text": "Learning outcomes - Debug Shiny apps and understand them from the inside - Supervise and test Shiny apps for robustness (appendix) - Convert simple Shiny apps to static website using shinylive - Deploy any Shiny app to the web using shinyapps.io",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "07-deployment.html#strengthen",
    "href": "07-deployment.html#strengthen",
    "title": "Strengthen & Deploy",
    "section": "1.1 Strengthen",
    "text": "1.1 Strengthen\n\nBefore it’s time to deploy, it’s a good idea to make sure your app passes the test of publicity\nDepending on the use case and target group, a deployed app should be:\n\nfast: remote communication can make your app slower than on a local host\nscalable: a high workload can crash your app\nstable: errors also crash your app",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "07-deployment.html#tools-to-strengthen",
    "href": "07-deployment.html#tools-to-strengthen",
    "title": "Strengthen & Deploy",
    "section": "1.2 Tools to strengthen",
    "text": "1.2 Tools to strengthen\n\nThere are a lot of Shiny extensions that help in strengthening a Shiny app, some of which we will address:\n\nprofvis: Profiles a Shiny app and creates performance visualizations\nreactlog: Logs reactivity of your Shiny app and creates a dynamic reactive graph\nshinyloadtest: Simulates a workload of users and determines how well your app is suitable for such a workload\nshinytest: Creates snapshots and compares the visual appearance of them in subsequent runs\nshiny::testServer(): Performs programmatic tests using the Shiny server logic of an app",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "07-deployment.html#further-resources",
    "href": "07-deployment.html#further-resources",
    "title": "Strengthen & Deploy",
    "section": "1.3 Further resources",
    "text": "1.3 Further resources\n\nChapters 11 and 13 of Colin Fay’s Engineering Production-Grade Shiny Apps\nChapters 21 and 23 of Hadley Wickham’s Mastering Shiny",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "07-deployment.html#using-the-profvis-package",
    "href": "07-deployment.html#using-the-profvis-package",
    "title": "Strengthen & Deploy",
    "section": "2.2 Using the profvis package",
    "text": "2.2 Using the profvis package\n\nSimply run your app within a profvis::profvis() call:\n\n\nprofvis({runApp()})\n\n\n\n\n\n\n\nNote\n\n\n\nIt is necessary to use runApp(), shinyApp() does not suffice!\n\n\n\nThen, perform some tasks in the Shiny app\nClose the app and a flame graph will be created\nNote the color scheme:\n\nYellow boxes correspond to specific lines in the code\nBlue boxes correspond to output objects\nGrey boxes correspond to garbage collection",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "07-deployment.html#interactive-debugging",
    "href": "07-deployment.html#interactive-debugging",
    "title": "Strengthen & Deploy",
    "section": "3.1 Interactive debugging",
    "text": "3.1 Interactive debugging\n\nInteractive debugging comes from base R and works just like that\nPut a call to browser() somewhere in your server function\nCode execution is interrupted on the spot and you can explore the server function in a “frozen” state\n\n\n\n\nAccessing input in Shiny browser call",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "07-deployment.html#logging",
    "href": "07-deployment.html#logging",
    "title": "Strengthen & Deploy",
    "section": "3.2 Logging",
    "text": "3.2 Logging\n\nIn base R, print debugging is frowned upon\nIn Shiny, print debugging can be a nice way to understand errors along a reactivity path (or to understand reactivity in general)",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "07-deployment.html#where-am-i",
    "href": "07-deployment.html#where-am-i",
    "title": "Strengthen & Deploy",
    "section": "3.3 Where am I?",
    "text": "3.3 Where am I?\n\nThat is a question you might ask yourself occasionally when encountering errors in Shiny\nThe whereami package can tell you exactly where you are\nMany R packages enable general logging (logging, logger, log4r), but whereami is especially suitable for Shiny\n\n\n\n\nLogs from logger\n\n\n\n\n\nLogs from whereami",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "07-deployment.html#reactivity-logging",
    "href": "07-deployment.html#reactivity-logging",
    "title": "Strengthen & Deploy",
    "section": "3.4 Reactivity logging",
    "text": "3.4 Reactivity logging\n\nReactivity logging means capturing and visualizing reactive dependencies in Shiny apps\nUseful for detecting overreactiveness and reactive instabilities\nReactivity logging can be done using the reactlog package\n\n\n3.4.1 Using the reactlog package\n\nRun reactlog::reactlog_enable() before running the Shiny app or set options(shiny.reactlog = TRUE)\nDo stuff in your Shiny app (particularly something that triggers dependencies!)\nRun shiny::reactlogShow() or reactlog::reactlog_show() after closing the app\nAlternatively, press Strg + F3 while the app is running",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "07-deployment.html#deployment-options",
    "href": "07-deployment.html#deployment-options",
    "title": "Strengthen & Deploy",
    "section": "4.1 Deployment options",
    "text": "4.1 Deployment options\n\nShiny app hosting\n\n\nName\nUse\nRequirements\n\n\n\n\nshinyapps.io\nCasual to professional applications\nrsconnect R package\n\n\nPosit Connect\nProfessional to corporate applications\nrsconnect R package\n\n\nShiny Server / self-hosting\nSetting up self-hosted Shiny servers\nShiny Server on a Linux server\n\n\nShinyProxy / Heroku / Hugging Face\nDeployment of containerized applications\nDocker\n\n\nShinylive\nSimple applications in an embedded setting\nAn existing static website\n\n\nGitHub / CRAN / BioConductor\nApplications for researchers or developers\nProficiency in R package development",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "07-deployment.html#whats-so-cool-about-shinylive",
    "href": "07-deployment.html#whats-so-cool-about-shinylive",
    "title": "Strengthen & Deploy",
    "section": "5.1 Whats so cool about Shinylive?",
    "text": "5.1 Whats so cool about Shinylive?\n\nYou can simply embed your Shiny app:\n\nIn your personal website\nIn your Quarto/RMarkdown document\nIn your package documentation\nIn another Shiny app (do try this at home)",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "07-deployment.html#r-packages",
    "href": "07-deployment.html#r-packages",
    "title": "Strengthen & Deploy",
    "section": "5.2 R packages",
    "text": "5.2 R packages\n\nRunning R in the web is powered by the WebR framework\nNot all R (or Python) packages are available in WebR\n\nR packages need to be built for wasm\nIf a package’s dependency cannot be built for wasm, it is not usable\nOnly binary packages can be built\nSome features simply do not work:\n\nsystem() or any other system commands\nDatabase connections\nParallelization\n\n\nYou can check which packages are built for wasm here (currently about 14,000 packages are available)",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "07-deployment.html#other-limitations",
    "href": "07-deployment.html#other-limitations",
    "title": "Strengthen & Deploy",
    "section": "5.3 Other Limitations",
    "text": "5.3 Other Limitations\n\nCan be quite slow on startup\nCode and data are fully visible in the source code (thus not useful for sensitive data)\nApp runs on the client machine and can thus be very slow and demanding\nThe framework is in early development and debugging can be a real hassle\n\n\n\n\nA common Shinylive error",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "07-deployment.html#downloading-assets",
    "href": "07-deployment.html#downloading-assets",
    "title": "Strengthen & Deploy",
    "section": "5.4 Downloading assets",
    "text": "5.4 Downloading assets\n\nShinylive is actually a library of web assets that run R in the background\nThe shinylive package needs these assets to turn a Shiny app into HTML code\n\n\nlibrary(shinylive)\nassets_ensure()\nassets_info()\n\nshinylive R package version:  0.1.1\nshinylive web assets version: 0.2.3\n\nLocal cached shinylive asset dir:\n    C:\\Users\\Paul\\AppData\\Local\\shinylive\\shinylive\\Cache\n\nInstalled assets:\n    C:/Users/Paul/AppData/Local/shinylive/shinylive/Cache/shinylive-0.2.3",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "07-deployment.html#creating-the-app",
    "href": "07-deployment.html#creating-the-app",
    "title": "Strengthen & Deploy",
    "section": "5.5 Creating the app",
    "text": "5.5 Creating the app\n\nThe export function creates a new directory, installs all WebR packages, and provides all asset files used to\n\n\nexport(\"shinyapps/example\", destdir = \"shinyapps/example/shinylive\")\n\n\nIn theory, the resulting HTML document can now simply be opened\nIn practice, however, the HTML document must be opened on a static server, e.g. using the httpuv package:\n\n\nhttpuv::runStaticServer(\"shinyapps/example/shinylive\", port = httpuv::randomPort())",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "07-deployment.html#embed-shinylive-in-quarto",
    "href": "07-deployment.html#embed-shinylive-in-quarto",
    "title": "Strengthen & Deploy",
    "section": "5.6 Embed Shinylive in Quarto",
    "text": "5.6 Embed Shinylive in Quarto\n\nQuarto supports Shinylive through the shinylive extension\n\n\nquarto::quarto_add_extension(\"quarto-ext/shinylive\", no_prompt = TRUE)\n\n\nIn the YAML header, specify the filters keyword\n\nfilters:\n  - shinylive\n\nShinylive code chunks must be marked with shinylive-r or shinylive-python\nFour additional options are defined:\n\nstandalone specifies that the code chunk contains an entire app\ncomponents specifies whether to show a code editor next to the rendered app\nlayout specifies whether to show the components vertically or horizontally aligned\nviewerHeight specifies the height of the app viewer in pixels",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "07-deployment.html#rsconnect",
    "href": "07-deployment.html#rsconnect",
    "title": "Strengthen & Deploy",
    "section": "6.1 rsconnect",
    "text": "6.1 rsconnect\n\nBoth for Posit Connect and shinyapps.io you need the rsconnect package\nrsconnect enables the communication between the Posit services and R\n\n\n\nrsconnect is built around the deployApp(), deployAPI() and deployDoc() functions",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "07-deployment.html#creating-an-account",
    "href": "07-deployment.html#creating-an-account",
    "title": "Strengthen & Deploy",
    "section": "6.2 Creating an account",
    "text": "6.2 Creating an account\n\nBefore being able to deploy to Shinyapps, we need an account\nAccounts can be created per Email or using Google, Github or Clever\n\n\n\n\nShinyapps.io sign-up",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "07-deployment.html#connecting-r-to-shinyapps.io",
    "href": "07-deployment.html#connecting-r-to-shinyapps.io",
    "title": "Strengthen & Deploy",
    "section": "6.3 Connecting R to shinyapps.io",
    "text": "6.3 Connecting R to shinyapps.io\n\nJust with any interface, linking works using Tokens and Secrets\nOn your shinyapps dashboard, navigate to Account -&gt; Tokens on the sidebar\nClick on “Add Token”\nClick on “Show” next to your newly created token\nPaste the code into your console and execute\n\n\n\n\nShinyapps token to connect with rsconnect",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "07-deployment.html#deploy",
    "href": "07-deployment.html#deploy",
    "title": "Strengthen & Deploy",
    "section": "6.4 Deploy!",
    "text": "6.4 Deploy!\n\nTo verify that the verification process was successful we run:\n\n\nrsconnect::accounts()\n\n\nFinally, to deploy an app, we simply run deployApp() to deploy an app.R in the current working directory to shinyapps.io:\n\n\nrsconnect::deployApp()",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "05-server-reactive-programming-ii.html",
    "href": "05-server-reactive-programming-ii.html",
    "title": "Server: Reactive programming II",
    "section": "",
    "text": "Learning outcomes\n\nBecome familiar with reactive functions and observers\nUnderstand how to change the UI reactively through updaters\nControl the reactive graph through events, isolation, and truthiness\nLet Shiny’s reactive flow work for, not against you",
    "crumbs": [
      "Server: Reactive programming II"
    ]
  },
  {
    "objectID": "05-server-reactive-programming-ii.html#reactive",
    "href": "05-server-reactive-programming-ii.html#reactive",
    "title": "Server: Reactive programming II",
    "section": "3.1 Reactive",
    "text": "3.1 Reactive\n\nReactives (reactive()) wrapped up:\n\nReactives wrap an R expression to create a reactive expression\nThey “react” to an input, i.e. are evaluated when an input changes.\nThey are both reactive producers and consumer. They take reactive values and return a reactive value.\nThey must be assigned to a name. They can be referred to by other reactive consumers by being called like a function.\nThey are evaluated lazily, i.e. they only run if they are forced to, for example when they are called by another reactive.\nThey are cached, i.e. when called back-to-back, without any dependency changing, then they return the same value twice\n\nReactives have two clear uses:\n\nThey reduce the amount of computation that needs to be done by Shiny\nThey reduce the mental strain in trying to understand complex Shiny code\n\n\n\nval &lt;- reactive({\n  num &lt;- input$number\n  num + 1\n})\n\n\n\n\n\n\n\nTip\n\n\n\nConceptually and technically, reactives may be compared to traditional R functions. Functional programming follows the “rule of three”: If code would be duplicated three times, wrap it in a function. Shiny follows the rule of two. This is because reactives not only simplify code for humans but also for machines: R only evaluates reactives if it has to. This can dramatically speed up an application.\nAlso, reactives literally are functions:\n\nis.function(reactive({}))\n\n[1] TRUE\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReactive graph without reactives\n\nReactive graph with reactives",
    "crumbs": [
      "Server: Reactive programming II"
    ]
  },
  {
    "objectID": "05-server-reactive-programming-ii.html#observers",
    "href": "05-server-reactive-programming-ii.html#observers",
    "title": "Server: Reactive programming II",
    "section": "3.2 Observers",
    "text": "3.2 Observers\n\nObservers (observe()) are similar to reactives:\n\nThey also take an arbitrary R expression.\nThey also react to an input.\n\nBut they also carry important differences:\n\nThey are not assigned to a name, thus they cannot be referred to from other reactive consumers and their return value is simply discarded. This also means they are terminal nodes (reactive consumers) in the reactive graphs – just like outputs.\nThey are evaluated eagerly, i.e. they run as soon as possible and do not wait for their dependencies.\nThey are forgetful, their previous output is not cached.\n\nSince they are terminal nodes but do not produce a visible output, they are something between a reactive and an output\nTheir uses are manifold, but here are some examples:\n\nLogging to the R console\nUpdating inputs (see below)\nReactively changing the UI\nCommunicating with a remote storage (e.g. a database or a cloud)\nEssentially everything that does not require assigning to a name\n\n\n\n\n\n\n\n\nTip\n\n\n\nConceptually, observers may be compared to the tidyverse function purrr::walk, which iterates over a list or a vector and performs “side-effects” like writing to files. Unlike purrr::walk, though, observe is probably much more common-place.\n\n\n\n# the reactive takes the inputs and produces a reactive value\n# which can be re-used in other reactive expressions\nfiltered &lt;- reactive({\n  xvar &lt;- input$xvar\n  yvar &lt;- input$yvar\n  range &lt;- input$range\n  \n  # select country\n  if (!is.null(input$countries)) {\n    ess &lt;- ess[ess$country %in% input$countries, ]\n  }\n  \n  # select variable\n  ess[c(\"idno\", \"country\", xvar, yvar)]\n})\n\n# the plot output is a \"reactive consumer\" that takes\n# the reactive value and makes a plot out of it\noutput$plot &lt;- renderPlot({\n  xvar &lt;- input$xvar\n  yvar &lt;- input$yvar\n  plot_data &lt;- filtered() %&gt;%\n    drop_na() %&gt;%\n    mutate(across(where(is.numeric), .fns = as.ordered))\n  \n  ggplot(plot_data) +\n    aes(x = .data[[xvar]], y = .data[[yvar]], group = .data[[xvar]]) +\n    geom_violin(fill = \"lightblue\", show.legend = FALSE) +\n    theme_classic()\n})\n\n# the observer also takes the reactive value and prints it to the console\n# it is also a reactive consumer and does not return anything\nobserve({\n  print(filtered())\n})\n\n\n\nComplete code\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(shiny)\nlibrary(plotly)\nlibrary(leaflet)\nlibrary(haven)\n\ness &lt;- readRDS(\"ess_trust.rds\")\ness_geo &lt;- readRDS(\"ess_trust_geo.rds\")\n\n# UI ----\nui &lt;- fluidPage(\n  titlePanel(\"European Social Survey - round 10\"),\n  \n  ## Sidebar ----\n  sidebarLayout(\n    sidebarPanel(\n      ### select dependent variable\n      selectInput(\n        \"xvar\",\n        label = \"Select a dependent variable\",\n        choices = c(\n          \"Trust in country's parliament\" = \"trust_parliament\",\n          \"Trust in the legal system\" = \"trust_legal\",\n          \"Trust in the police\" = \"trust_police\",\n          \"Trust in politicians\" = \"trust_politicians\",\n          \"Trust in political parties\" = \"trust_parties\",\n          \"Trust in the European Parliament\" = \"trust_eu\",\n          \"Trust in the United Nations\" = \"trust_un\"\n        )\n      ),\n      \n      ### select a variable ----\n      selectInput(\n        \"yvar\",\n        label = \"Select an independent variable\",\n        choices = c(\n          \"Placement on the left-right scale\" = \"left_right\",\n          \"Age\" = \"age\",\n          \"Feeling about household's income\" = \"income_feeling\",\n          \"How often do you use the internet?\" = \"internet_use\",\n          \"How happy are you?\" = \"happiness\"\n        )\n      ),\n      \n      ### select a country ----\n      selectizeInput(\n        \"countries\",\n        label = \"Filter by country\",\n        choices = unique(ess$country),\n        selected = \"FR\",\n        multiple = TRUE\n      )\n    ),\n    \n    ## Main panel ----\n    mainPanel(\n      tabsetPanel(\n        type = \"tabs\",\n        \n        ### Table tab ----\n        tabPanel(\n          title = \"Table\",\n          div(\n            style = \"height: 600px; overflow-y: auto;\",\n            tableOutput(\"table\")\n          )\n        ),\n        \n        ### Plot tab ----\n        tabPanel(\n          title = \"Plot\",\n          plotOutput(\"plot\", height = 600)\n        )\n      )\n    )\n  )\n)\n\n\n# Server ----\nserver &lt;- function(input, output, session) {\n  # filter data ----\n  filtered &lt;- reactive({\n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    range &lt;- input$range\n    \n    # select country\n    ess &lt;- ess[ess$country %in% input$countries, ]\n    \n    # select variable\n    ess[c(\"idno\", \"country\", xvar, yvar)]\n  })\n  \n  # render table ----\n  output$table &lt;- renderTable({\n    filtered()\n  }, height = 400)\n  \n  # render plot ----\n  output$plot &lt;- renderPlot({\n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    plot_data &lt;- filtered() %&gt;%\n      drop_na() %&gt;%\n      mutate(across(where(is.numeric), .fns = as.ordered))\n    \n    ggplot(plot_data) +\n      aes(x = .data[[xvar]], y = .data[[yvar]], group = .data[[xvar]]) +\n      geom_violin(fill = \"lightblue\", show.legend = FALSE) +\n      theme_classic()\n  })\n  \n  # executes everytime `filtered()` is updated\n  # prints the filtered dataset to the console\n  observe({\n    print(filtered())\n  })\n}\n\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Server: Reactive programming II"
    ]
  },
  {
    "objectID": "05-server-reactive-programming-ii.html#bindevent",
    "href": "05-server-reactive-programming-ii.html#bindevent",
    "title": "Server: Reactive programming II",
    "section": "4.1 bindEvent",
    "text": "4.1 bindEvent\n\nThe bindEvent function binds a reactive expression to one or multiple events\nThe reactive expression is evaluated if and only if the event is triggered\nbindEvent locks up a reactive expression unless a specific event is triggered\nYou can use bindEvent on all sorts of reactive expressions: reactives, observers, and output renderers\n\n\nreactive({\n  # do something\n}) %&gt;%\n  bindEvent(input$button)",
    "crumbs": [
      "Server: Reactive programming II"
    ]
  },
  {
    "objectID": "05-server-reactive-programming-ii.html#implementation",
    "href": "05-server-reactive-programming-ii.html#implementation",
    "title": "Server: Reactive programming II",
    "section": "5.1 Implementation",
    "text": "5.1 Implementation\n\nUpdaters are usually found in an observer.\nBecause they often do not depend on any input, they are best coupled with bindEvent.\nIt can also be useful to combine them with freezeReactiveValue\n\nUpdating a value triggers an event\nFreezing can prevent the event from triggering twice: when changing the input and when updating.\n\n\n\nobserve({\n1  freezeReactiveValue(input, \"id_of_input\")\n  updateSelectInput(\n2    session = session,\n3    inputId = \"id_of_input\",\n4    choices = c(\"a\", \"b\", \"c\")\n    selected = \"b\"\n  ) %&gt;%\n5    bindEvent(input$button)\n})\n\n\n1\n\nFreeze id_of_input to prevent it from triggering an event twice, first when clicking on the button, and second when updating the input.\n\n2\n\nThe session object of the server function has to be passed to every update function. This has no deeper meaning.\n\n3\n\nThe inputId argument takes the ID of the widget that is to be updated\n\n4\n\nEvery update function has different arguments to alter different parts of the input widget\n\n5\n\nBind the observer to an input that should trigger the input update",
    "crumbs": [
      "Server: Reactive programming II"
    ]
  },
  {
    "objectID": "05-server-reactive-programming-ii.html#example-1",
    "href": "05-server-reactive-programming-ii.html#example-1",
    "title": "Server: Reactive programming II",
    "section": "5.2 Example",
    "text": "5.2 Example\n\nTo exemplify, we add a new slider to the app:\n\n\nsliderInput(\n  \"slider\",\n  label = \"Select a range for the independent variable\",\n  min = min(ess$left_right, na.rm = TRUE),\n  max = max(ess$left_right, na.rm = TRUE),\n  value = range(ess$left_right, na.rm = TRUE),\n  step = 1\n)\n\n\nNote that min, max, and value are fixed\n…, but the independent variable is not: we can select a different variable with a different range\nWe can thus implement an updater that dynamically updates the slider with new ranges:\n\n\nobserve({\n  yvar &lt;- input$yvar\n  freezeReactiveValue(input, \"slider\")\n  updateSliderInput(\n    session = session,\n1    inputId = \"slider\",\n2    min = min(ess[[yvar]], na.rm = TRUE),\n    max = max(ess[[yvar]], na.rm = TRUE),\n    value = range(ess[[yvar]], na.rm = TRUE)\n  )\n}) %&gt;%\n3  bindEvent(input$yvar)\n\nfiltered &lt;- reactive({\n  xvar &lt;- input$xvar\n  yvar &lt;- input$yvar\n  \n  # select country\n  ess &lt;- ess[ess$country %in% input$countries, ]\n\n  # apply range\n4  ess &lt;- ess[\n    ess[[yvar]] &gt; input$slider[1] &\n    ess[[yvar]] &lt; input$slider[2],\n  ]\n  \n  # select variable\n  ess[c(\"idno\", \"country\", xvar, yvar)]\n})\n\n\n1\n\nThe updater references the ID of the input that needs to change\n\n2\n\nMin, max, and value are adapted to the select Y variable\n\n3\n\nThe updater only triggers when a new Y variable is selected\n\n4\n\nThe dataset is filtered according to the slider\n\n\n\n\n\n\nComplete code (important lines are highlighted)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(shiny)\nlibrary(plotly)\nlibrary(leaflet)\nlibrary(haven)\n\ness &lt;- readRDS(\"ess_trust.rds\")\ness_geo &lt;- readRDS(\"ess_trust_geo.rds\")\n\n# UI ----\nui &lt;- fluidPage(\n  titlePanel(\"European Social Survey - round 10\"),\n  \n  ## Sidebar ----\n  sidebarLayout(\n    sidebarPanel(\n      ### select dependent variable\n      selectInput(\n        \"xvar\",\n        label = \"Select a dependent variable\",\n        choices = c(\n          \"Trust in country's parliament\" = \"trust_parliament\",\n          \"Trust in the legal system\" = \"trust_legal\",\n          \"Trust in the police\" = \"trust_police\",\n          \"Trust in politicians\" = \"trust_politicians\",\n          \"Trust in political parties\" = \"trust_parties\",\n          \"Trust in the European Parliament\" = \"trust_eu\",\n          \"Trust in the United Nations\" = \"trust_un\"\n        )\n      ),\n      \n      ### select a variable ----\n      selectInput(\n        \"yvar\",\n        label = \"Select an independent variable\",\n        choices = c(\n          \"Placement on the left-right scale\" = \"left_right\",\n          \"Age\" = \"age\",\n          \"Feeling about household's income\" = \"income_feeling\",\n          \"How often do you use the internet?\" = \"internet_use\",\n          \"How happy are you?\" = \"happiness\"\n        )\n      ),\n      \n      ### select a country ----\n      selectizeInput(\n        \"countries\",\n        label = \"Filter by country\",\n        choices = unique(ess$country),\n        selected = \"FR\",\n        multiple = TRUE\n      ),\n      \n      sliderInput(\n        \"slider\",\n        label = \"Select a range for the independent variable\",\n        min = min(ess$left_right, na.rm = TRUE),\n        max = max(ess$left_right, na.rm = TRUE),\n        value = range(ess$left_right, na.rm = TRUE),\n        step = 1\n      )\n    ),\n    \n    ## Main panel ----\n    mainPanel(\n      tabsetPanel(\n        type = \"tabs\",\n        \n        ### Table tab ----\n        tabPanel(\n          title = \"Table\",\n          div(\n            style = \"height: 600px; overflow-y: auto;\",\n            tableOutput(\"table\")\n          )\n        ),\n        \n        ### Plot tab ----\n        tabPanel(\n          title = \"Plot\",\n          plotOutput(\"plot\", height = 600)\n        )\n      )\n    )\n  )\n)\n\n\n# Server ----\nserver &lt;- function(input, output, session) {\n  # filter data ----\n  filtered &lt;- reactive({\n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    range &lt;- input$slider\n    \n    # select country\n    ess &lt;- ess[ess$country %in% input$countries, ]\n\n    # apply range\n    ess &lt;- ess[\n      ess[[yvar]] &gt; range[1] &\n      ess[[yvar]] &lt; range[2], \n    ]\n    \n    # select variable\n    ess[c(\"idno\", \"country\", xvar, yvar)]\n  })\n  \n  # render table ----\n  output$table &lt;- renderTable({\n    filtered()\n  }, height = 400)\n  \n  # render plot ----\n  output$plot &lt;- renderPlot({\n    plot_data &lt;- filtered() %&gt;%\n      drop_na() %&gt;%\n      mutate(across(where(is.numeric), .fns = as.ordered))\n    \n    xvar &lt;- names(plot_data)[[3]]\n    yvar &lt;- names(plot_data)[[4]]\n\n    ggplot(plot_data) +\n      aes(x = .data[[xvar]], y = .data[[yvar]], group = .data[[xvar]]) +\n      geom_violin(fill = \"lightblue\", show.legend = FALSE) +\n      theme_classic()\n  })\n  \n  observe({\n    yvar &lt;- input$yvar\n    freezeReactiveValue(input, \"slider\")\n    updateSliderInput(\n      session = session,\n      inputId = \"slider\",\n      min = min(ess[[yvar]], na.rm = TRUE),\n      max = max(ess[[yvar]], na.rm = TRUE),\n      value = range(ess[[yvar]], na.rm = TRUE)\n    )\n  }) %&gt;%\n    bindEvent(input$yvar)\n}\n\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Server: Reactive programming II"
    ]
  },
  {
    "objectID": "05-server-reactive-programming-ii.html#required-values-req",
    "href": "05-server-reactive-programming-ii.html#required-values-req",
    "title": "Server: Reactive programming II",
    "section": "6.1 Required values (req)",
    "text": "6.1 Required values (req)\n\nTruthiness is useful for Shiny’s req function\nreq is equivalent to if statements in R with two exceptions:\n\nThey test for truthiness (instead of TRUE/FALSE)\nThey raise a “silent” exception, i.e. they cancel any ongoing computation without logging or displaying an error\n\nreq is useful to stop reactive behavior when certain conditions are not met",
    "crumbs": [
      "Server: Reactive programming II"
    ]
  },
  {
    "objectID": "05-server-reactive-programming-ii.html#example-2",
    "href": "05-server-reactive-programming-ii.html#example-2",
    "title": "Server: Reactive programming II",
    "section": "6.2 Example",
    "text": "6.2 Example\n\nIn our Shiny app, we can use req to cancel plotting when no country is specified\nselectizeInput, which is used to select a country, returns NULL when no value is specified\nNow, if we do not specify a country, the plot simply will not render\n\n\nfiltered &lt;- reactive({\n  req(input$countries)\n  \n  xvar &lt;- input$xvar\n  yvar &lt;- input$yvar\n  range &lt;- input$range\n  \n  # select country\n  ess &lt;- ess[ess$country %in% input$countries, ]\n  \n  # select variable\n  ess[c(\"idno\", \"country\", xvar, yvar)]\n}) %&gt;%\n  bindEvent(input$button, ignoreNULL = FALSE)\n\n\n\nComplete code (important lines are highlighted)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(shiny)\nlibrary(plotly)\nlibrary(leaflet)\nlibrary(haven)\n\ness &lt;- readRDS(\"ess_trust.rds\")\ness_geo &lt;- readRDS(\"ess_trust_geo.rds\")\n\n# UI ----\nui &lt;- fluidPage(\n  titlePanel(\"European Social Survey - round 10\"),\n  \n  ## Sidebar ----\n  sidebarLayout(\n    sidebarPanel(\n      ### select dependent variable\n      selectInput(\n        \"xvar\",\n        label = \"Select a dependent variable\",\n        choices = c(\n          \"Trust in country's parliament\" = \"trust_parliament\",\n          \"Trust in the legal system\" = \"trust_legal\",\n          \"Trust in the police\" = \"trust_police\",\n          \"Trust in politicians\" = \"trust_politicians\",\n          \"Trust in political parties\" = \"trust_parties\",\n          \"Trust in the European Parliament\" = \"trust_eu\",\n          \"Trust in the United Nations\" = \"trust_un\"\n        )\n      ),\n      \n      ### select a variable ----\n      selectInput(\n        \"yvar\",\n        label = \"Select an independent variable\",\n        choices = c(\n          \"Placement on the left-right scale\" = \"left_right\",\n          \"Age\" = \"age\",\n          \"Feeling about household's income\" = \"income_feeling\",\n          \"How often do you use the internet?\" = \"internet_use\",\n          \"How happy are you?\" = \"happiness\"\n        )\n      ),\n      \n      ### select a country ----\n      selectizeInput(\n        \"countries\",\n        label = \"Filter by country\",\n        choices = unique(ess$country),\n        selected = \"FR\",\n        multiple = TRUE\n      )\n    ),\n    \n    ## Main panel ----\n    mainPanel(\n      tabsetPanel(\n        type = \"tabs\",\n        \n        ### Table tab ----\n        tabPanel(\n          title = \"Table\",\n          div(\n            style = \"height: 600px; overflow-y: auto;\",\n            tableOutput(\"table\")\n          )\n        ),\n        \n        ### Plot tab ----\n        tabPanel(\n          title = \"Plot\",\n          plotOutput(\"plot\", height = 600)\n        )\n      )\n    )\n  )\n)\n\n\n# Server ----\nserver &lt;- function(input, output, session) {\n  # filter data ----\n  filtered &lt;- reactive({\n    req(input$countries, cancelOutput = TRUE)\n    \n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    range &lt;- input$range\n    \n    # select country\n    ess &lt;- ess[ess$country %in% input$countries, ]\n    \n    # select variable\n    ess[c(\"idno\", \"country\", xvar, yvar)]\n  })\n  \n  # render table ----\n  output$table &lt;- renderTable({\n    filtered()\n  }, height = 400)\n  \n  # render plot ----\n  output$plot &lt;- renderPlot({\n    plot_data &lt;- filtered() %&gt;%\n      drop_na() %&gt;%\n      mutate(across(where(is.numeric), .fns = as.ordered))\n    \n    xvar &lt;- names(plot_data)[[3]]\n    yvar &lt;- names(plot_data)[[4]]\n    \n    ggplot(plot_data) +\n      aes(x = .data[[xvar]], y = .data[[yvar]], group = .data[[xvar]]) +\n      geom_violin(fill = \"lightblue\", show.legend = FALSE) +\n      theme_classic()\n  })\n}\n\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Server: Reactive programming II"
    ]
  },
  {
    "objectID": "03-user-interface.html",
    "href": "03-user-interface.html",
    "title": "User Interface (UI): Designing the front end",
    "section": "",
    "text": "Learning outcomes:\n\nUnderstand logic underlying user interfaces in Shiny\nLearn how to create UIs using different layouts, inputs and outputs\nBecome familiar with various UI widgets\nCreate the foundations for reactive plots, tables, and maps\nSource(s): Wickham (2021, Ch. 2)",
    "crumbs": [
      "User Interface (UI): Designing the front end"
    ]
  },
  {
    "objectID": "03-user-interface.html#basics",
    "href": "03-user-interface.html#basics",
    "title": "User Interface (UI): Designing the front end",
    "section": "1 Basics",
    "text": "1 Basics\n\nShiny encourages separation of code that generates UI (front end) from code that drives app’s behaviour (server/back end).\nHere focus on front end & tour of Shiny inputs and outputs\n\nwon’t stitch inputs and outputs together yet\n\nprimary focus on native Shiny components (contained in Shiny package) but vibrant community (see awesome shiny extenstions)",
    "crumbs": [
      "User Interface (UI): Designing the front end"
    ]
  },
  {
    "objectID": "03-user-interface.html#ui-layout",
    "href": "03-user-interface.html#ui-layout",
    "title": "User Interface (UI): Designing the front end",
    "section": "2 UI: Layout",
    "text": "2 UI: Layout\n\nAny Shiny app consists of ui, server and shinyApp(ui=ui, server = server)\n\nui &lt;- function(): function is used to create UI\n\nUI then displays different inputs and outputs\n\nShiny provides different functions that can be used to create basic layouts\n\nfluidPage() creates the classic fluid page layout\n\n\n2.1 fluidPage (1)\n\nfluidPage(): Creates most basic layout\n\ndisplay that automatically adjusts to user’s browser dimensions (smartphone!)\nlayout consists of rows containing columns\n\nrows making sure elements appear on the same line\ncolumns define usage of horizontal space (within a 12-unit wide grid)\n\n\nUI with title panel and sidebar panel\n\ntitlePanel() and sidebarLayout() create a basic Shiny app/layout with a sidebar\nsidebarLayout() takes two functions\n\nsidebarPanel(): Includes content displayed in the sidebar\nmainPanel(): Includes content displayed in the main panel\n\nfluidRow() and column(): Divide ui into rows/columns\n\nTry code below by pasting it into your console and running it\n\n\n\nCode: Creating a simple UI\nui &lt;- fluidPage(\n  titlePanel(\"This is the title panel\"),\n  \n  sidebarLayout(\n    sidebarPanel( \"Title: Sidebar panel\"),\n    \n    mainPanel(\"Title: Main panel\",\n              fluidRow(\n                column(width = 4,\"Column 1: Description here\"),\n                column(width = 4, \"Column 2: Model summary\")\n                ,\n                column(width = 3, \n                       offset = 1, \n                       \"Column 3: Model visualization\")\n              )\n  )))\n\nserver &lt;- function(input, output, session){}\n\nshinyApp(ui=ui, server = server)\n\n\n\n\n2.2 fluidPage (2)\n\nChange sidebarLayout(position = \"right\",...) to position sidebar on the right\nSometimes adding borders helps to understand the UI\n\n\n\nCode: Adding borders for better understanding of UI\nui &lt;- fluidPage(\n  titlePanel(\"This is the title panel\"),\n  \n  sidebarLayout(\n    sidebarPanel( \"Title: Sidebar panel\"),\n    \n    mainPanel(\"Title: Main panel\",\n              fluidRow(\n                column(style='border: 1px solid black',\n                       width = 4,\"\n                       Column 1: Description here\"),\n                column(style='border: 1px solid black',\n                       width = 4, \"Column 2: Model summary\")\n                ,\n                column(style='border: 1px solid black',\n                       width = 3, \n                       offset = 1, \n                       \"Column 3: Model visualization\")\n              )\n    )))\n\nserver &lt;- function(input, output, session){}\n\nshinyApp(ui=ui, server = server)\n\n\n\n\n2.3 fluidPage (3): Creating panels and tabs\n\ntabsetPanel() + tabPanel()\n\nAllows for using sidebar layout but dividing main panel into tabs\nUsers can switch between tabs that show different outputs\n\n\n\nui &lt;- fluidPage(\n  titlePanel(\"This is the title panel\"),\n  \n  sidebarLayout(\n    sidebarPanel( \"This is the sidebar panel\"),\n    \n    mainPanel(\n      tabsetPanel(type = \"tabs\",\n                  tabPanel(\"3d Frequency Plot\", \n                           \"Tab 1: plot here\"),\n                  tabPanel(\"Histogram\", \n                           \"Tab 2: another plot here\"),\n                  tabPanel(\"Model Summary\", \n                           h4(\"Tab 3: estimation results here\")),\n                  tabPanel(\"Data Summary\", \n                           h4(\"Tab 4: Variable summaries\"))\n      ))))\n  \n  server &lt;- function(input, output, session){}\n  \n  shinyApp(ui=ui, server = server)\n\n\n\n2.4 Images\n\nimg() function places an image\n\nimg(src = \"http://.../img-2.jpg\", height = 35, width = 35): Load image from website or folder\n\nStore image(s) locally\n\nwww subfolder stores all sorts of additional files(images, data etc.)\nIf working directory = app directory create with: dir.create(\"www\")\nImages place in folder www can be referenced without the www folder name/path\n\ne.g., img(src = \"guerry.jpg\", width = \"100%\")\n\n\n\n\n\nCode: Adding images\nui &lt;- fluidPage(\n  titlePanel(span(img(src = \"https://www.gesis.org/typo3conf/ext/gesis_web_ext/Resources/Public/webpack/dist/img/logo_gesis_en.svg\", style = \"height: 1.4em;\"), \"The ESS shiny app\")),\n  \n  sidebarLayout(\n    sidebarPanel( \"This is the sidebar panel\"),\n    \n    mainPanel(\n      tabsetPanel(type = \"tabs\",\n                  tabPanel(\"An image\", \n                           img(src = \"https://journals.openedition.org/belgeo/docannexe/image/11893/img-1.jpg\", width = 358, height = 476))\n      ))))\n\nserver &lt;- function(input, output, session){}\n\nshinyApp(ui=ui, server = server)\n\n\n\n\n2.5 Exercise: UI layout\n\nFamiliarize yourself and use the code in Section 2.4.\nChange the website title to “A big name in politics”\nChange the sidebar menu title with “The Arni Shiny App”.\nReplace the image of Guerry with an image Arnold Schwarzenegger from the web, e.g., here.\n\n\nEither store the image in a www subfolder of your app directory or use the URL in your code.\n\n\n\n\n\n\n\nSolution: Using image from link\n\n\n\n\n\n\nui &lt;- fluidPage(\n  titlePanel(span(img(src = \"https://www.gesis.org/typo3conf/ext/gesis_web_ext/Resources/Public/webpack/dist/img/logo_gesis_en.svg\", style = \"height: 1.4em;\"), \"A big name in politics\")),\n  \n  sidebarLayout(\n    sidebarPanel( \"The Arni Shiny App\"),\n    \n    mainPanel(\n      tabsetPanel(type = \"tabs\",\n                  tabPanel(\"An image\", \n                           img(src = \"http://assets.schwarzenegger.com/images/img-2.jpg\", \n                  width = 729, height = 423))\n      ))))\n\nserver &lt;- function(input, output, session){}\n\nshinyApp(ui=ui, server = server)\n\n\n\n\n\n\n\n\n\n\nSolution: Using image from www folder\n\n\n\n\n\n\nCheck the directory you are in with getwd().\nMake sure the app.R file you are using is saved in this directory.\nUse dir.create(\"www\") or the buttons in Rstudio to create the www folder.\nStore the image from the link in this www folder.\nAdd the image name simply in the code img(src = \"img-2.jpg\", width = 729, height = 423) (see below).\n\n\nIMAGES PLACED UNDER www CAN BE REFERENCED WITHOUT THE www FOLDER NAME\n\n\nRun the app.\n\n\nui &lt;- fluidPage(\n  titlePanel(span(img(src = \"https://www.gesis.org/typo3conf/ext/gesis_web_ext/Resources/Public/webpack/dist/img/logo_gesis_en.svg\", style = \"height: 1.4em;\"), \"A big name in politics\")),\n  \n  sidebarLayout(\n    sidebarPanel( \"The Arni Shiny App\"),\n    \n    mainPanel(\n      tabsetPanel(type = \"tabs\",\n                  tabPanel(\"An image\", \n                           img(src = \"img-2.jpg\", \n                  width = 729, height = 423))\n      ))))\n\nserver &lt;- function(input, output, session){}\n\nshinyApp(ui=ui, server = server)",
    "crumbs": [
      "User Interface (UI): Designing the front end"
    ]
  },
  {
    "objectID": "03-user-interface.html#ui-inputs",
    "href": "03-user-interface.html#ui-inputs",
    "title": "User Interface (UI): Designing the front end",
    "section": "3 UI: Inputs",
    "text": "3 UI: Inputs\n\n3.1 UI Inputs: common structure\n\ntextInput(inputId = \"username\", label = \"Enter your username\", value = \"Write here\")\n\ninputId connects front end with back end, e.g., if UI has input with ID name, the server function will access it with input$name\n\nname` = simple string (only letters, numbers, and underscores) and unique\n\nlabel argument: Used to create human-readable label\nvalue argument: usually let’s you set default value\n\nInputs are stored in list called input$...\nRemaining 4+ arguments are unique to the particular input\nRecommendation: Supply inputId and label arguments by position, and all other arguments by name\nQ: How would we read the following?\n\nsliderInput(\"min\", \"Limit (minimum)\", value = 50, min = 0, max = 100)\n\n\n\n\n3.2 UI Inputs: Logic\n\nWidget = Web element the user can interact with (Shiny widget gallery)\n\nUsers can send messages to the SERVER/Computer (e.g. “I want to choose this variable”)\n\nUnderlying logic is the same for all widgets\n\nUser uses widget to give input\nInput is inserted into the functions in the SERVER\n\nserver &lt;- function(input, output, session) {}\n\n\nshiny package contains many widgets\n\nAdditional ones in other packages (e.g., pickerInput() in shinyWidgets package)\n\n\n\n\n3.3 UI Inputs: Exercise\n\nRead the code below. Can you guess what kind of inputs the various input functions create?\n\n\nlibrary(shinyWidgets) # Install!\n\nanimals &lt;- c(\"dog\", \"cat\", \"mouse\") # Predefining some categories\n\nui &lt;- fluidPage(\n  \n  # Free text\n  textInput(\"name\", \"What's your name?\"),\n  passwordInput(\"password\", \"What's your password?\"),\n  textAreaInput(\"story\", \"Tell me about yourself\", rows = 3),\n  \n  # Numeric inputs\n  numericInput(\"num\", \"Number one\", value = 0, min = 0, max = 100),\n  sliderInput(\"num2\", \"Number two\", value = 50, min = 0, max = 100),\n  sliderInput(\"rng\", \"Range\", value = c(10, 20), min = 0, max = 100),\n  \n  # Dates\n  dateInput(\"dob\", \"When were you born?\"),\n  dateRangeInput(\"holiday\", \"When do you want to go on vacation next?\"),\n  \n  # Limited choices\n  selectInput(\"state\", \"What's your favourite animal?\", animals),\n  radioButtons(\"animal\", \"What's your favourite animal?\", animals),\n  selectInput( \"state\", \"What's your favourite animal?\", animals, multiple = TRUE),\n  checkboxGroupInput(\"animal2\", \"What animals do you like?\", animals),\n  pickerInput(\n    inputId = \"animal3\",\n    label = \"What animals do you like?\",\n    choices = animals\n  ),\n  \n  # Single checkbox\n  checkboxInput(\"cleanup\", \"Clean up?\", value = TRUE),\n  checkboxInput(\"shutdown\", \"Shutdown?\"),\n  \n  # File uploads\n  fileInput(\"upload\", NULL),\n  \n  # Action buttons\n  actionButton(\"click\", \"Click me!\"),\n  actionButton(\"drink\", \"Drink me!\", icon = icon(\"cocktail\"))\n)\n\nserver &lt;- function(input, output, session) {}\n\nshinyApp(ui, server)\n\n\nNow let’s have a look within the an app\n\n\n\n3.4 Additional exercise(s)\n\nSee Exercises 2.2.8.\n\n\nWhen space is at a premium, it’s useful to label text boxes using a placeholder that appears inside the text entry area. How do you call textInput() to generate the UI in Figure 1 below (see ?textInput)?\n\n\n\n\n\n\n\nFigure 1: Text input (Source: Wickham 2021)\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ntextInput(\"text\", \"\", placeholder = \"Your name\")\n\n\n\n\n\nCarefully read the documentation for sliderInput() to figure out how to create a date slider, as shown below in Figure 2.\n\n\n\n\n\n\n\nFigure 2: Date slider (Source: Wickham 2021)\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nsliderInput(\n  \"dates\",\n  \"When should we deliver?\",\n  min = as.Date(\"2019-08-09\"),\n  max = as.Date(\"2019-08-16\"),\n  value = as.Date(\"2019-08-10\")\n)\n\n\n\n\n\nCreate a slider input to select values between 0 and 100 where the interval between each select able value on the slider is 5. Then, add animation to the input widget so when the user presses play the input widget scrolls through the range automatically.\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n  sliderInput(\"number\", \"Select a number:\",\n              min = 0, max = 100, value = 0, \n              step = 5, animate = TRUE)\n\n\n\n\n\nIf you have a moderately long list in a selectInput(), it’s useful to create sub-headings that break the list up into pieces. Read the documentation to figure out how. (Hint: the underlying HTML is called &lt;optgroup&gt;.)\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nselectInput(\n  \"breed\",\n  \"Select your favorite animal breed:\",\n  choices =\n    list(`dogs` = list('German Shepherd', 'Bulldog', \n                       'Labrador Retriever'),\n         `cats` = list('Persian cat', 'Bengal cat', \n                       'Siamese Cat'))\n)\n\n\n\n\n\n\n\n\n\n\nSolution: One app with all the widgets\n\n\n\n\n\n\nui &lt;- fluidPage(\n  textInput(\"text\", \"\", placeholder = \"Your name\"),\n  \n  sliderInput(\n  \"dates\",\n  \"When should we deliver?\",\n  min = as.Date(\"2019-08-09\"),\n  max = as.Date(\"2019-08-16\"),\n  value = as.Date(\"2019-08-10\")\n  ),\n \n    sliderInput(\"number\", \"Select a number:\",\n              min = 0, max = 100, value = 0, \n              step = 5, animate = TRUE),\n  \n  selectInput(\n  \"breed\",\n  \"Select your favorite animal breed:\",\n  choices =\n    list(`dogs` = list('German Shepherd', 'Bulldog', \n                       'Labrador Retriever'),\n         `cats` = list('Persian cat', 'Bengal cat', \n                       'Siamese Cat'))\n)\n  \n)\nserver &lt;- function(input, output, session) {\n  \n  \n}\nshinyApp(ui, server)\n\n\n\n\n\n\n\n\n\n\nSolution: App that displays the input values\n\n\n\n\n\n\nSolution taken from stackoverflow.\n\n\n#rm(list=ls())\nlibrary(shiny)\n\nui &lt;- basicPage(\n  textInput(\"text\", \"\", placeholder = \"Your name\"),\n  \n  sliderInput(\n    \"dates\",\n    \"When should we deliver?\",\n    min = as.Date(\"2019-08-09\"),\n    max = as.Date(\"2019-08-16\"),\n    value = as.Date(\"2019-08-10\")\n  ),\n  \n  sliderInput(\"number\", \"Select a number:\",\n              min = 0, max = 100, value = 0, \n              step = 5, animate = TRUE),\n  \n  selectInput(\n    \"breed\",\n    \"Select your favorite animal breed:\",\n    choices =\n      list(`dogs` = list('German Shepherd', 'Bulldog', \n                         'Labrador Retriever'),\n           `cats` = list('Persian cat', 'Bengal cat', \n                         'Siamese Cat'))),\n  tableOutput('show_inputs')\n)\nserver &lt;- shinyServer(function(input, output, session){\n  \n  AllInputs &lt;- reactive({\n    myvalues &lt;- NULL\n    for(i in 1:length(names(input))){\n      myvalues &lt;- as.data.frame(rbind(myvalues,(cbind(names(input)[i],input[[names(input)[i]]]))))\n    }\n    names(myvalues) &lt;- c(\"User Input\",\"Last Value\")\n    myvalues\n  })\n  \n  output$show_inputs &lt;- renderTable({\n    AllInputs()\n  })\n})\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "User Interface (UI): Designing the front end"
    ]
  },
  {
    "objectID": "03-user-interface.html#ui-outputs",
    "href": "03-user-interface.html#ui-outputs",
    "title": "User Interface (UI): Designing the front end",
    "section": "4 UI: Outputs",
    "text": "4 UI: Outputs\n\nOutputs in UI create placeholders that are later filled by the server function\nHave unique ID as first argument like inputs\n\ne.g., textOutput(\"text\") as ID text that is filled by the server\n\nIf UI specification creates an output with ID text, you’ll access it in the server function with output$text (see below)\nEach output function on the front end is coupled with a render function in the back end (server)\nThree main types of output: text, tables, and plots\n\n\n4.1 Text output\n\nBelow an example for text output\n\n\nui &lt;- fluidPage(\n  textOutput(\"text\"),\n  verbatimTextOutput(\"code\")\n)\nserver &lt;- function(input, output, session) {\n  output$text &lt;- renderText({ \n    \"Hello friend!\" \n  })\n  output$code &lt;- renderPrint({ \n    summary(1:10) \n  })\n}\nshinyApp(ui, server)\n\n\n\n4.2 Table output\n\nBelow an example for table output\n\n\nui &lt;- fluidPage(\n  tableOutput(\"static\"),\n  dataTableOutput(\"dynamic\")\n)\nserver &lt;- function(input, output, session) {\n  output$static &lt;- renderTable(head(mtcars))\n  output$dynamic &lt;- renderDataTable(mtcars, options = list(pageLength = 5))\n}\nshinyApp(ui, server)\n\n\n\n4.3 Plot output\n\nBelow an example for plot output\n\n\nui &lt;- fluidPage(\n  plotOutput(\"plot\", width = \"400px\")\n)\nserver &lt;- function(input, output, session) {\n  output$plot &lt;- renderPlot(plot(1:5), res = 96)\n}\nshinyApp(ui, server)\n\n\n\n4.4 Exercise(s)\n\nTaken from Exercises 2.3.5.\n\n\nWhich of textOutput() and verbatimTextOutput() should each of the following render functions be paired with?\n\n\nrenderPrint(summary(mtcars))\nrenderText(\"Good morning!\")\nrenderPrint(t.test(1:5, 2:6))\nrenderText(str(lm(mpg ~ wt, data = mtcars)))\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nui &lt;- fluidPage(\n  verbatimTextOutput(\"mtcarsout1\"),\n  br(), hr(),\n  textOutput(\"mtcarsout2\"),\n  br(), hr(),\n  verbatimTextOutput(\"mtcarsout3\"),\n  br(), hr(),\n  verbatimTextOutput(\"mtcarsout4\")  \n)\nserver &lt;- function(input, output, session) {\n  output$mtcarsout1 &lt;- renderPrint(summary(mtcars))\n  output$mtcarsout2 &lt;- renderText(\"Good morning!\")\n  output$mtcarsout3 &lt;- renderPrint(t.test(1:5, 2:6))\n  output$mtcarsout4 &lt;- renderPrint(str(lm(mpg ~ wt, data = mtcars)))\n}\nshinyApp(ui, server)\n\n\n\n\n\nUpdate the options in the call to renderDataTable() below so that the data is displayed, but all other controls are suppress (i.e. remove the search, ordering, and filtering commands). You’ll need to read ?renderDataTable and review the options at https://datatables.net/reference/option/ or at https://shiny.posit.co/r/gallery/widgets/datatables-options/\n\n\nui &lt;- fluidPage(\n      dataTableOutput(\"table\")\n    )\n    server &lt;- function(input, output, session) {\n      output$table &lt;- renderDataTable(mtcars, options = list(pageLength = 5))\n    }\nshinyApp(ui, server)\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nui &lt;- fluidPage(\n  dataTableOutput(\"table\")\n)\nserver &lt;- function(input, output, session) {\n  output$table &lt;- renderDataTable(mtcars, \n                                  options = list(pageLength = 5,\n                                                 searching = FALSE,\n                                                 paging = FALSE,\n                                                 ordering = FALSE,\n                                                 filtering = FALSE))\n}\nshinyApp(ui, server)\n\n\n\n\n\n\n4.5 Overview of Output functions\n\nOutput functions\n\nhtmlOutput()… creates raw HTML\nimageOutput()… creates image\nplotOutput()… creates plot\nplotlyOutput … creates plotly graph (!)\ntableOutput()… creates table (!)\ntextOutput()… creates text\nuiOutput()… creates raw HTML\nverbatimTextOutput()… creates text\ndataTableOutput()… creates a data table (interactiv)\nleafletOutput() … creates leaflet map (!)\n\nOur example app uses those marked with (!).",
    "crumbs": [
      "User Interface (UI): Designing the front end"
    ]
  },
  {
    "objectID": "03-user-interface.html#html-tag-functions",
    "href": "03-user-interface.html#html-tag-functions",
    "title": "User Interface (UI): Designing the front end",
    "section": "5 HTML tag functions",
    "text": "5 HTML tag functions\n\nShiny’s HTML tag functions translate input into html code\n\nTry pasting h2(\"A NEW HOPE\", align = \"center\") into your console\nh2() function creates &lt;h2&gt;&lt;/h2&gt; html tag\n\nCommon HTML tags (e.g., ⁠&lt;div&gt;⁠) can be created by calling for their tag name directly (e.g., div())\nLess common tags (e.g., ⁠&lt;article&gt;⁠), use the tags list collection (e.g., tags$article()) stored in the tags object\n\nTry tags$ in the console\n\n.noWS = ... argument to remove whitespace\n\n\nSee full reference for HTML tags\n\nHere we just do a quick example but in this tutorial you find more information\nExercise: Please run the shiny app below and explore the effect of different html tags. What do the different html tags do?\n\n\nui &lt;- fluidPage(\n  titlePanel(\"A big name in politics\"),\n\nsidebarLayout(\n  sidebarPanel( \"The Arni Shiny App\"),\n  \n  mainPanel(\n    \n    h2(\"A NEW HOPE\", align = \"center\"),\n    h5(\"It is a period of civil war.\", align = \"center\"),\n    p(\"p creates a paragraph of text.\"),\n    tags$p(\"A new p() command starts a new paragraph. Supply a style attribute to change the format of the entire paragraph.\", style = \"font-family: 'times'; font-si16pt\"),\n    strong(\"strong() makes bold text.\"),\n    em(\"em() creates italicized (i.e, emphasized) text.\"),\n    tags$hr(style=\"border-color:black;\"),\n    tags$br(),\n    tags$line(),\n    br(),\n    code(\"code displays your text similar to computer code\"),\n    div(\"div creates segments of text with a similar style. This division of text is all blue because I passed the argument 'style = color:blue' to div\", style = \"color:blue\"),\n    br(),\n    p(\"span does the same thing as div, but it works with\",\n      span(\"groups of words\", style = \"color:blue\"),\n      \"that appear inside a paragraph.\")\n    \n  )))\n\nserver &lt;- function(input, output, session){}\n\nshinyApp(ui=ui, server = server)",
    "crumbs": [
      "User Interface (UI): Designing the front end"
    ]
  },
  {
    "objectID": "03-user-interface.html#guerry-app-introduction-tab",
    "href": "03-user-interface.html#guerry-app-introduction-tab",
    "title": "User Interface (UI): Designing the front end",
    "section": "6 Guerry app: Introduction tab",
    "text": "6 Guerry app: Introduction tab\n\nBelow is the code for the Guerry app introduction tab\n\nThe code has some file dependencies that need to be deleted to run it directly\n\ne.g., includeCSS(\"www/styles.css\")\n\nImages that are not accessible are simply shown as blank\nMost UI function simply create html tags, e.g., try h1() or jumbotron()\nLet’s do this together!"
  },
  {
    "objectID": "03-user-interface.html#summary",
    "href": "03-user-interface.html#summary",
    "title": "User Interface (UI): Designing the front end",
    "section": "6 Summary",
    "text": "6 Summary\n\nUI Layout created with fluidPage()\nImage can be included using img(src = \"...\", , width = ..., height = ...) function\n*Input() functions: Used to generate input UI widgets\n\ninput values are stored in list input$... with particular name, e.g., input$tab_tabulate_select\n\n*Output() functions: Used to display output, dataTableOutput()\n\noutput is sent from server\n\nBoth input/output functions have IDs the connect them to the server\nHTML tags can be used through tags$name() function, e.g., tags$br()\nNot covered here:\n\nDynamic UI makes it possible to change UI as a function of input values (cf. uiOutput())",
    "crumbs": [
      "User Interface (UI): Designing the front end"
    ]
  },
  {
    "objectID": "03-user-interface.html#footnotes",
    "href": "03-user-interface.html#footnotes",
    "title": "User Interface (UI): Designing the front end",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nBootstrap 4 shinydashboard using AdminLTE3: Website↩︎",
    "crumbs": [
      "User Interface (UI): Designing the front end"
    ]
  },
  {
    "objectID": "01-workshop.html",
    "href": "01-workshop.html",
    "title": "About this workshop",
    "section": "",
    "text": "This document serves as slides and script for the workshop Interactive Data Analysis with Shiny taught by Paul C. Bauer  and Jonas Lieth. Original material is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) license. Where we draw on other authors material other licenses may apply (see references in the syllabus as well as the citations and links in the script). For potential future versions of this material see the github repository. If you have feedback or discover errors/dead links please let us know via email (mail@paulcbauer.de/Jonas.Lieth@gesis.org) or by submitting an issue on github. And make sure to install all the necessary packages before you use the script.",
    "crumbs": [
      "About this workshop"
    ]
  },
  {
    "objectID": "01-workshop.html#about-us-paul-jonas",
    "href": "01-workshop.html#about-us-paul-jonas",
    "title": "About this workshop",
    "section": "1 About us (Paul & Jonas)",
    "text": "1 About us (Paul & Jonas)\n\nPaul\n\nInstructor at University of Freiburg (Department of politics), Postdoc at LMU Munich (statistics department, Frauke Kreuter), External fellow at MZES\nPreviously: PhD at the University of Bern; research/postdoctoral fellow at the MZES, the EUI (Florence, Italy)\nMy research (Google Scholar, Github)\n\nSubstantive: Political sociology & comparative politics (Trust, polarization, social media, fake news)\nMethods/data: Causal inference, experiments, text data, data visualization, machine learning, big data (Google trends, Twitter)\n\n\nJonas\n\nCurrently a research fellow at GESIS’ survey data curation (SDC) department\nPhD student interested in social geography, spatial data science, and computational text analysis\nDeveloping R packages (e.g. r311) and Shiny apps (e.g. gretan) for research\nContact: jonas.lieth@gesis.org; Website; GitHub",
    "crumbs": [
      "About this workshop"
    ]
  },
  {
    "objectID": "01-workshop.html#your-turn",
    "href": "01-workshop.html#your-turn",
    "title": "About this workshop",
    "section": "2 Your turn",
    "text": "2 Your turn\n\nLet’s check our the survey results…\n\n\nName?\nAffiliation? Country?\nWhat do you want to use Shiny for? (or research questions?)",
    "crumbs": [
      "About this workshop"
    ]
  },
  {
    "objectID": "01-workshop.html#contact-outline-dates",
    "href": "01-workshop.html#contact-outline-dates",
    "title": "About this workshop",
    "section": "3 Contact & Outline & Dates",
    "text": "3 Contact & Outline & Dates\n\nImportant: 2nd time we teach workshop/material\nCourse outline/content/dates: (see toc on the left)\n\n\n\n\n\n\nTuesday, 23.07\n\n\n10:00-11:00\nWelcome and introduction\n\n\n11:00-11:15\nCoffee break\n\n\n11:15-12:00\nYour (first) Shiny app\n\n\n12:00-13:00\nLunch break\n\n\n13:00-14:15\nThe front end: Designing the user interface\n\n\n14:15-14:30\nCoffee break\n\n\n14:30-16:00\nTutorials for the UI\n\n\nWednesday, 24.07.\n\n\n10:00-11:00\nIntroduction to reactive programming\n\n\n11:00-11:15\nCoffee break\n\n\n11:15-12:00\nTutorials for reactive programming\n\n\n12:00-13:00\nLunch break\n\n\n13:00-14:15\nAdvanced reactive programming\n\n\n14:15-14:30\nCoffee break\n\n\n14:30-16:00\nTutorials for reactive programming\n\n\nThursday, 25.07\n\n\n10:00-11:00\nVisualization with ggplot2 and Shiny\n\n\n11:00-11:15\nCoffee break\n\n\n11:15-12:00\nTutorials for visualization\n\n\n12:00-13:00\nLunch break\n\n\n13:00-14:15\nTesting and deployment\n\n\n14:15-14:30\nCoffee break\n\n\n14:30-16:00\nTutorials for deployment\n\n\nFriday, 26.07.\n\n\n10:00-11:00\nGood practices when building your own app\n\n\n11:00-11:15\nCoffee break\n\n\n11:15-12:00\nBuild your own app: Design and UI\n\n\n12:00-13:00\nLunch break\n\n\n13:00-14:15\nBuild your own app: Construct the reactive graph\n\n\n14:15-14:30\nCoffee break\n\n\n14:30-15:30\nBuild your own app: Strengthen & deploy\n\n\n15:30-16:00\nExhibit: Show off your new Shiny app",
    "crumbs": [
      "About this workshop"
    ]
  },
  {
    "objectID": "01-workshop.html#material",
    "href": "01-workshop.html#material",
    "title": "About this workshop",
    "section": "4 Script & material",
    "text": "4 Script & material\n\nLiterature: See syllabus.\nWebsite/script: https://paulcbauer.github.io/shiny_workshop/\n\nFind it: Google “shiny paul jonas”\nDocument = slides + script (Zoom in/out with STRG + mousewheel)\nCode: can all be found in the script\nData: can usually be downloaded over links in the script or from github (e.e., see here for the data). If not we’ll share the files.\nFull screen: F11\nNavigation: TOCs on left and right\nSearch document (upper left)\nDocument generated with quarto\n\nMotivation: Have a go-to script for participants (and ourselves!)\nContent: Mixture of theory, lab sessions, exercises and pure code examples for discussion",
    "crumbs": [
      "About this workshop"
    ]
  },
  {
    "objectID": "01-workshop.html#strategy-goals",
    "href": "01-workshop.html#strategy-goals",
    "title": "About this workshop",
    "section": "5 Strategy & Goals",
    "text": "5 Strategy & Goals\n\nStrategy: From the simple to the complex, slowly building up a complex Shiny app that includes various aspects (tabulate data, modelling and descriptive graphs, mapping)\nGoals: By the end of the course participants will:\n\nknow what the structure of a Shiny application looks like\nunderstand the basics of reactive programming for interactive data analysis and visualization\nbe comfortable to use R Shiny to build their own interactive applications\nhave learned about different ways to deploy their Shiny application",
    "crumbs": [
      "About this workshop"
    ]
  },
  {
    "objectID": "01-workshop.html#online-vs.-offline",
    "href": "01-workshop.html#online-vs.-offline",
    "title": "About this workshop",
    "section": "6 Online vs. offline",
    "text": "6 Online vs. offline\n\nNegative\n\nScreen fatigue\nCan’t run around to check your code\nLess engaging, less social\nVoice\nScreen sharing &less screen space than classroom\n\nPositive\n\nWe see the Shiny app how its mostly consumed ;-) (on a screen)\n\nRemember: “How is your Shiny app consumed (smartphone)?”\n\nParticipation from everywhere\n\nRule(s): Please keep your camera online if possible!\n\nDistracting animals/children/partners are a welcome distraction!\nYawning, leaving, looking bored etc. allowed!\nUse a virtual background if you like!",
    "crumbs": [
      "About this workshop"
    ]
  },
  {
    "objectID": "01-workshop.html#recommended-readings",
    "href": "01-workshop.html#recommended-readings",
    "title": "About this workshop",
    "section": "7 Recommended readings",
    "text": "7 Recommended readings\n\nImportant: Our workshop does not require any prior reading.\nHowever, our schedule is primarily based on two textbooks which we generally recommend for further reading (see references on website):\n\nWickham (2021): Mastering Shiny: Build Interactive Apps, Reports, and Dashboards Powered by R. Accessible online at: https://mastering-shiny.org/.\nFay, Colin, Rochette, Sébastien, Guyader, Vincent, and Girard, Cervan (2022): Engineering Production-Grade Shiny Apps. Accessible online at: https://engineering-shiny.org/.",
    "crumbs": [
      "About this workshop"
    ]
  },
  {
    "objectID": "01-workshop.html#software-we-will-use",
    "href": "01-workshop.html#software-we-will-use",
    "title": "About this workshop",
    "section": "8 Software we will use",
    "text": "8 Software we will use\n\nOpen-source software! (Q: Why?)\nR (R Core Team 2023)1\n\nonly viable competitor is Python\nInstall the necessary packages using the code below.\n\n\n# install.packages(\"pacman\")\n\npacman::p_load(c(\n   apexcharter,\n   broom,\n   datasauRus,\n   gganimate,\n   gifski,\n   gt,\n   gtsummary,\n   haven,\n   highcharter,\n   htmltools,\n   httpuv,\n   kableExtra,\n   leaflet,\n   listviewer,\n   modelsummary,\n   plotly,\n   png,\n   profvis,\n   reactlog,\n   rsconnect,\n   sf,\n   shiny,\n   shinylive,\n   tidyverse\n))\n\nShiny (Chang et al. 2022; Wickham 2021)\nggplot22 (Wickham 2016)\nplotly3 (Sievert 2020)\nNote: Ideally cite the software you use in your research especially when it is open-source (e.g., run citation(\"ggplot2\"))",
    "crumbs": [
      "About this workshop"
    ]
  },
  {
    "objectID": "01-workshop.html#helpful-resources",
    "href": "01-workshop.html#helpful-resources",
    "title": "About this workshop",
    "section": "9 Helpful resources",
    "text": "9 Helpful resources\n\nShiny user showcase\nShiny feature demos\nShiny widget gallery\nR Shiny for Enterprise Application Development: 6 Lessons for Building Shiny Apps\nShiny apps by Dimiter Toshkov",
    "crumbs": [
      "About this workshop"
    ]
  },
  {
    "objectID": "01-workshop.html#footnotes",
    "href": "01-workshop.html#footnotes",
    "title": "About this workshop",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nCreators: Core contributors and thousands of package authors.↩︎\nCreators: https://github.com/tidyverse/ggplot2↩︎\nCreators: https://github.com/plotly/plotly.js; https://github.com/ropensci/plotly↩︎",
    "crumbs": [
      "About this workshop"
    ]
  },
  {
    "objectID": "02-introduction.html",
    "href": "02-introduction.html",
    "title": "Introduction",
    "section": "",
    "text": "Learning outcomes:\n\nUnderstand idea/aims/advantages/steps of interactive data analysis\nUnderstand basic structure of Shiny apps (components)\nQuick overview of our ESS app\nDiscuss MVP and workflow\nSources: Bertini (2017), Wickham (2021) and Fay et al. (2021)",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "02-introduction.html#interactive-data-analysis",
    "href": "02-introduction.html#interactive-data-analysis",
    "title": "Introduction",
    "section": "1 Interactive data analysis",
    "text": "1 Interactive data analysis\n\nSource(s): Bertini (2017) and others.\n\n\n1.1 Why?\n\n“From Data Visualization to Interactive Data Analysis” (Bertini 2017)\nMain uses of data visualization: Inspirational, explanatory and analytical1\n“data analysis […] can help people improve their understanding of complex phenomena”\n\n“if I understand a problem better, there are higher chances I can find a better solution for it”\n\n\n\n\n\n1.2 Interactivity data visualization history\n\n“interactive data visualization enables direct actions on a plot to change elements and link between multiple plots” (Swayne 1999) (Wikipedia)\nInteractivity revolutionizes the way we work with and how we perceive data (cf. Cleveland and McGill 1984)\nStarted ~last quarter of the 20th century, PRIM-9 (1974) (Friendly 2006, 23, see also Cleveland and McGill, 1988, Young et al. 2006)\n\nWe have come a long way… John Tukey on prim9\n\nInteractivity allows for…\n\n…making sense of big data (more dimensions)\n…exploring data\n…making data accessible to those without background\n…generating interactive “publications”\n\n\n\n\n1.3 How Does Interactive Data Analysis Work?\n\nFigure 1 outlines process underlying interactive data analysis\n\nLoop\n\nstart with loosely specified goal/problem (Decrease crime!)\ntranslate goal into one or more questions (What causes crime?)\ngather, organize and analyze the data to answer these questions (Gather data on crime and other factors, model and visualize it)\ngenerate knowledge and new questions and start over\n\n\n\n\n\n\n\n\n\nFigure 1: Process underlying interactive data analysis (Source: Bertini, 2017)\n\n\n\n\n\n1.4 Steps of interactive data analysis\n\nDefining the problem: What problem/goal are you trying to solve/reach through interactive data analysis?\nGenerating questions: Translate high-level problem into number of data analysis questions\nGathering, transforming and familiarizing with the data, e.g., often slicing, dicing and aggregating the data and to prepare it for the analysis one is planning to perform.\nCreating models out of data (not always): using statistical modeling and machine learning methods to summarize and analyze data\nVisualizing data and models: results obtained from data transformation and querying (or from some model) are turned into something our eyes can digest and hopefully understand.\n\nSimple representations like tables and lists rather than fancy charts are perfectly reasonable visualization for many problems.\n\nInterpreting the results: once results have been generated and represented in visual format, they need to be interpreted by someone (crucial step!)\n\ncomplex activity including understanding how to read the graph, understanding what graph communicates about phenomenon of interest, linking results to questions and pre-existing knowledge of problem (think of your audience!)\nInterpretation heavily influenced by pre-existing knowledge (about domain problem, data transformation process, modeling, visual representation)\n\nGenerating inferences and more questions: steps above lead to creating new knowledge, additional questions or hypotheses\n\nOutcome: not only answers but also (hopefully better, more refined) questions\n\n\n\n\n1.5 Important aspects of data analysis & quo vadis interaction?\n\nProcess not sequential but highly iterative (jumping back/forth between steps)\nSome activities exclusively human, e.g., defining problems, generating questions, etc.\nVisualization only small portion of process and effectiveness depends on other steps\nInteraction: all over the place… every time you tell your computer what to do (and it returns information)\n\nGather and transform the data\nSpecify a model and/or a query from the data\nSpecify how to represent the results (and the model)\nBrowse the results\nSynthesize and communicate the facts gathered\n\nDirect manipulation vs. command-Line interaction: WIMP interfaces (direct manipulation, clicks, mouse overs, etc.,) are interactive but so is command line\n\nYou can let users type!\n\nAudience: what (interaction) skills and pre-knowledge do the have? (domain knowledge, statistics, graphs)\n\n\n\n1.6 Challenges of Interactive Visual Data Analysis\n\nBroadly three parts… (Bertini 2017)\nSpecification (Mind → Data/Model): necessary to translate our questions and ideas into specifications the computer can read\n\nShiny allows non-coders to perform data analysis, but requires R knowledge to built apps\nBut even simpler tools out there\n\nRepresentation (Data/Model → Eyes)\n\nnext step is to find a (visual) representation so users can inspect and understand them\n“deciding what to visualize is often equally, if not more, important, than deciding how to visualize it”\n“how fancy does a visualization need to be in order to be useful for data analysis?”\n\n“most visualization problems can be solved with a handful of graphs”\n\nreally hard to use, tweak, and combine graphs in clever/effective/innovative ways\n\nInterpretation (Eyes → Mind)\n\n“what does one need to know in order to reason effectively about the results of modeling and visualization?”\n“Are people able to interpret and trust [your shiny app]?”",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "02-introduction.html#why-visualize",
    "href": "02-introduction.html#why-visualize",
    "title": "Introduction",
    "section": "2 Why visualize?",
    "text": "2 Why visualize?\n\n2.1 Anscombes’s quartet (1)\n\nTable 1 shows results from a linear regression based on Anscombe’s quartet (Anscombe 1973) often used to illustrate the usefulness of visualization\n\nQ: What do we find here?\n\n\n\n\n\nTable 1: Linear models based on sets of Anscombe’s quartet\n\n\n\n\n\n\n\n\n\ny1 (Set 1)\ny2 (Set 2)\ny3 (Set 3)\ny4 (Set 4)\n\n\n\n\n(Intercept)\n3.000\n3.001\n3.002\n3.002\n\n\n\n(1.125)\n(1.125)\n(1.124)\n(1.124)\n\n\nx1\n0.500\n\n\n\n\n\n\n(0.118)\n\n\n\n\n\nx2\n\n0.500\n\n\n\n\n\n\n(0.118)\n\n\n\n\nx3\n\n\n0.500\n\n\n\n\n\n\n(0.118)\n\n\n\nx4\n\n\n\n0.500\n\n\n\n\n\n\n(0.118)\n\n\n\nNotes: some notes...\n\n\n\n\n\n\n\n\n\n\n\n2.2 Anscombes’s quartet (2)\n\nTable 2 displays Anscombe’s quartet (Anscombe 1973), a dataset (or 4 little datasets)\n\nQ: What does the table reveal about the data? Is it easy to read?\n\n\n\n\n\n\nTable 2: Anscombe’s quartett: Visualization\n\n\n\n\nAnscombe's quartet data\n\n\nx1\ny1\nx2\ny2\nx3\ny3\nx4\ny4\n\n\n\n\n10\n8.04\n10\n9.14\n10\n7.46\n8\n6.58\n\n\n8\n6.95\n8\n8.14\n8\n6.77\n8\n5.76\n\n\n13\n7.58\n13\n8.74\n13\n12.74\n8\n7.71\n\n\n9\n8.81\n9\n8.77\n9\n7.11\n8\n8.84\n\n\n11\n8.33\n11\n9.26\n11\n7.81\n8\n8.47\n\n\n14\n9.96\n14\n8.10\n14\n8.84\n8\n7.04\n\n\n6\n7.24\n6\n6.13\n6\n6.08\n8\n5.25\n\n\n4\n4.26\n4\n3.10\n4\n5.39\n19\n12.50\n\n\n12\n10.84\n12\n9.13\n12\n8.15\n8\n5.56\n\n\n7\n4.82\n7\n7.26\n7\n6.42\n8\n7.91\n\n\n5\n5.68\n5\n4.74\n5\n5.73\n8\n6.89\n\n\n\n\n\n\n\n\n\n\n\n\n2.3 Anscombes’s quartet (3)\n\nFigure 2 finally visualizes the data underlying those data\n\nQ: What do we see here? What is the insight?\n\n\n\n\n\n\n\n\n\n\nFigure 2: Anscombe’s quartet: Visualization\n\n\n\n\n\n\n\n2.4 The Datasaurus Dozen\n\nFigure 3 displays the datasaurus dozen as animated by Tom Westlake (see here, original by Alberto Cairo)\n\nQ: What do we see here? What is the insight?\n\n\n\n\n\n\n\n\n\n\nFigure 3: The Datasaurus Dozen animated by Tom Westlake",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "02-introduction.html#shiny",
    "href": "02-introduction.html#shiny",
    "title": "Introduction",
    "section": "3 Shiny",
    "text": "3 Shiny\n\n3.1 What is Shiny?\n\nHistory of Shiny: Joe Cheng: The Past and Future of Shiny2\nPopularity: Shiny  (vs. Ggplot2 , dplyr )\nA web application framework for R to turn analyses into interactive web applications.. what does that mean?\n\nThe userinterface is a webpage\nOn this webpage you can manipulate things\nBehind the webpage there is a computer (your computer or a server)\nThat computer/server runs R and the R script of the webapp\nWhen you change something on the webpage, the information is send to the computer\nComputer runs the script with the new inputs (input functions)\nComputer sends back outputs to the webpage (output functions)\n\n\n\n\n\n3.2 Components of a Shiny app\n\nAs depicted in Figure 4, a user interacts with a server on which the shinyapp/website is hosted\n\nA Shiny app has two components, the user interface (UI) and the server, that are passed as arguments to the shinyApp() which creates a Shiny app from this ui/server pair\n\n\n\n\n\n\n\n\nFigure 4: Source: https://hosting.analythium.io/the-anatomy-of-a-shiny-application/ (c) Analythium\n\n\n\n\n\n3.3 Pro & contra Shiny\n\n3.3.1 Pros of R Shiny:\n\nFast Prototyping: Shiny is excellent for quickly turning ideas into applications; easy to use even for non-seasoned programmers\nInteractivity: lets you build interactive web apps, enhancing user engagement and experience (dashboards!)\nIntegration with R Ecosystem: integrates seamlessly with R’s vast open-source ecosystem (see shiny for python)\nStatistical Modeling and Visualization: allows for complex statistical modeling and visualizations within your app\nNo Need for Web Development Skills: Create web apps with R code alone (no need for HTML, CSS, or JavaScript)\nReactivity: fairly simple to create applications that automatically update in response to user inputs\nSharing and Publishing: apps can be easily published and shared (e.g., Shinyapps.io or shinylive)\n\n\n\n3.3.2 Cons of R Shiny:\n\nPerformance: apps run on top of R, an interpreted language, which can cause performance issues\nSingle-threaded: R (and by extension Shiny) is single-threaded, which can also cause performance issues (see here).\nComplexity: Shiny’s basics are easy but mastering intricacies of reactivity is more challenging\nData Gathering and Saving: It can be challenging to use Shiny for gathering and saving data to the database.\nMaintenance Cost: cost of maintaining a Shiny application over time can be high (now we have shinylive!)\nSoftware Dependencies: Certain Shiny applications may have many software dependencies, which could potentially lead to issues down the line",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "02-introduction.html#exploring-european-social-survey-ess-the-app-we-will-build",
    "href": "02-introduction.html#exploring-european-social-survey-ess-the-app-we-will-build",
    "title": "Introduction",
    "section": "4 Exploring European Social Survey (ESS): The app we will build",
    "text": "4 Exploring European Social Survey (ESS): The app we will build\n\nIn the workshop we will built the Shiny app shown in Figure 5 together. Please explore this app here (5-10 minutes) and answer the following questions:\n\nWhat questions can we answer using the app?\nHow can this app help us to understand and analyze the underlying data?\nWhat interactive elements can we identify in the app?\n\n\n\n\n\n\n\n\nFigure 5: (Source: Original image)\n\n\n\n\n4.1 The data\n\nIn our app we will analyze datasets from the European Social Survey, Round 10\n\n\n\nData preparation code of the app\ndata &lt;- readRDS(\"./data/ess_trust.rds\")\n\nkable(head(data))\n\n\n\n\nTable 3: Data from the European Social Survey, Round 10\n\n\n\n\n\n\nidno\ncountry\ninternet_use\ntrust_parliament\ntrust_legal\ntrust_police\ntrust_politicians\ntrust_parties\ntrust_eu\ntrust_un\nleft_right\nhappiness\nage\nincome_feeling\n\n\n\n\n27\nAT\n5\n5\n10\n10\n5\n5\n5\n5\n9\n7\n43\n3\n\n\n137\nAT\n5\n7\n8\n8\n3\n4\n5\n2\n5\n8\n67\n2\n\n\n194\nAT\n4\n6\n8\n8\n5\n5\n5\n5\n5\n9\n40\n1\n\n\n208\nAT\n5\n0\n5\n8\n3\n3\n0\n2\nNA\n8\n63\n2\n\n\n220\nAT\n1\n7\n8\n8\n7\n7\n5\n5\n5\n8\n71\n2\n\n\n254\nAT\n2\n6\n5\n7\n5\n5\n4\n6\n3\n9\n64\n1\n\n\n\n\n\n\n\n\n\n\n\ndata (see Table 3) comprises 49519 individuals that live in 29 countries (File: ess_trust.rds)\n\nLater on we also aggregate the data to the country-level\n\n\n\n\n\n\nTable 4: Data from the European Social Survey, Round 10 with geographic information\n\n\n\nData preparation code of the app\ndata_geo &lt;- readRDS(\"./data/ess_trust_geo.rds\")\n# View(data_geo)\n\n\n\n\n\ndata_geo (see Table 4) comprises aggregated ESS data with geographic information (File: ess_trust_geo.rds; geometry variable describes the geographic shape of regions)\nAdvantages: Dataset is interesting and contains mapping data",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "02-introduction.html#your-first-shiny-app",
    "href": "02-introduction.html#your-first-shiny-app",
    "title": "Introduction",
    "section": "5 Your (first) Shiny app",
    "text": "5 Your (first) Shiny app\n\nBelow you will create you first app and we’ll use the opportunity to discuss the basic components of a shiny app (see analogous example here).\n\n\nInstall the relevant packages:\n\n\ninstall.packages(\"shiny\")\ninstall.packages(\"tidyverse\")\n\n\nCreate a directory with the name of your app “myfirstapp” in your working directory.\nCreate an rscript file in Rstudio and save it in the working directory with the name app.R.\nCopy the code below and paste it into your app.R script (UPDATE).\n\n\nYou can run and stop the app by clicking Run App (Figure 6) button in the document toolbar.\n\n\n\n\n\n\n\n\n\nFigure 6: The Run App button can be found at the top-right of the source pane.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "02-introduction.html#minimum-viable-product-mvp",
    "href": "02-introduction.html#minimum-viable-product-mvp",
    "title": "Introduction",
    "section": "6 Minimum viable product (MVP)",
    "text": "6 Minimum viable product (MVP)\n\n…useful concept when building apps (see Figure 7)!\n\n\n\n\n\n\n\n\n\nFigure 7: Illustration of MVP (Source: Fay et al. 2021 - read description)\n\n\n\n\n\n\n“version […] with just enough features to be usable by early customers” to collect feedback (Wikipedia)\n“Making things work before working on low-level optimization makes the whole engineering process easier” (Fay et al. 2021)\nThe “UI first” approach: often the safest way to go (Fay et al. 2021)\n\nAgreeing on specifications: helps everybody involved in the application to agree on what the app is supposed to do, and once the UI is set, there should be no “surprise implementation”\nOrganizing work: “It’s much easier to work on a piece of the app you can visually identify and integrate in a complete app scenario”\nBut…\n\n..we “follow” same strategy, slowly building out our shiny app, adding features & complexity",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "02-introduction.html#workflow-development-debugging-and-getting-help",
    "href": "02-introduction.html#workflow-development-debugging-and-getting-help",
    "title": "Introduction",
    "section": "7 Workflow: Development, debugging and getting help",
    "text": "7 Workflow: Development, debugging and getting help\n\nSee discussions of workflow in Wickham (2021, Ch. 5, 20.2.1)\nThree important Shiny workflows:\n\nBasic development cycle of creating apps, making changes, and experimenting with the results.\nDebugging, i.e., figure out what’s gone wrong with your code/brainstorm solutions\nWriting reprexes, self-contained chunks of code that illustrate a problem (essential for getting others’ help)\n\nBelow development WF, debugging later on\n\n\n7.1 Development workflow\n\nCreating the app: start every app with the same lines of R code below (Shift + Tab or in menue New Project -&gt; Shiny Web Application)\nSeeing your changes: you’ll create a few apps a day (really?!?), but you’ll run apps hundreds of times, so mastering the development workflow is particularly important\nWrite some code.3\nLaunch the app with Cmd/Ctrl + Shift + Enter.\nInteractively experiment with the app.\nClose the app.\nGo back to 1.\n\n\nlibrary(shiny)\nui &lt;- fluidPage(\n  \n)\nserver &lt;- function(input, output, session) {\n  \n}\nshinyApp(ui, server)\n\n\n7.1.1 Rstudio & Shiny: A few tips\n\nControlling the view: Default is a pop-out window but you can also choose Run in Viewer Pane and Run External.\nDocument outline: Use it for navigation in your app code (Cntrl + Shift + O)\nUsing/exploring other apps: Inspect that app code, then slowly delete parts you don’t need\n\nRerun app to see whether it still works after each deletion\nif only interested in UI, delete everything in within server function: server &lt;- function(input, output, session) {delete everything here}\nImportant: Search for dependencies (that can sometimes be delete), e.g., search for www folder\n\nalso image links with src or png, jpg\n\n\n\n\n\n\n7.2 Debugging workflow\n\nGuaranteed that something will go wrong at the start\nCause is mismatch between your mental model of Shiny, and what Shiny actually does\nWe need to develop robust workflow for identifying and fixing mistakes\nThree main cases of problems: (1) Unexpected error, (2) No error but incorrect values; (3) Correct values but not updated\n\n\nUse traceback and interactive debugger\n\n\nUse interactive debugger\n\n\nProblem unique to Shiny, i.e., R skills don’t help\n\n\nSee Wickham (2021, Ch. 5.2, link) for explanations and examples",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "02-introduction.html#footnotes",
    "href": "02-introduction.html#footnotes",
    "title": "Introduction",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nInspirational. The main goal here is to inspire people. To wow them! But not just on a superficial level, but to really engage people into deeper thinking, sense of beauty and awe. Explanatory. The main goal here is to use graphics as a way to explain some complex idea, phenomenon or process. Analytical. The main goal here is to extract information out of data with the purpose of answering questions and advancing understanding of some phenomenon of interest.↩︎\nJoe Cheng is the Chief Technology Officer at RStudio and was the original creator of the Shiny web framework, and continues to work on packages at the intersection of R and the web.↩︎\nAutomated testing: allows you to turn interactive experiments you’re running into automated code, i.e., run tests more quickly and not forget them (because they are automated). Requires more initial investment.↩︎",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "04-server-reactive-programming-i.html",
    "href": "04-server-reactive-programming-i.html",
    "title": "Server: Reactive programming",
    "section": "",
    "text": "Learning outcomes:\n\nUnderstand the logic underlying reactivity in Shiny apps\nConceiving and constructing reactive graphs\nImplement a basic I/O structure based on reactive elements\nSources: Wickham (2021, Ch. 3)",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming-i.html#basics",
    "href": "04-server-reactive-programming-i.html#basics",
    "title": "Server: Reactive programming",
    "section": "1 Basics",
    "text": "1 Basics\n\nIn Shiny, server logic is expressed using reactive programming (elegant powerful programming paradigm!)\nVery different to writing script that runs from start to end\nKey idea: specify a graph of dependencies so that when an input changes, all related outputs are automatically updated\nReactive programming makes flow of an app considerably simpler",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming-i.html#the-server-function",
    "href": "04-server-reactive-programming-i.html#the-server-function",
    "title": "Server: Reactive programming",
    "section": "2 The server function",
    "text": "2 The server function\n\n“Guts” of every shiny app below\n\n\nlibrary(shiny)\n\n# front end interface (Html)\n1ui &lt;- fluidPage()\n\n# back end logic\n2server &lt;- function(input, output, session) {}\n\nshinyApp(ui, server)\n\n\n1\n\nUser interface\n\n2\n\nServer\n\n\n\n\n\nui simple because every user gets same html\nserver more complicated because every user needs independent version of the app\n\ne.g., Julia using slider should not affect Petra’s ui!\n\nserver() is invoked each time new session starts\n\n3 parameters (input, output, session) that are created by Shiny (not by us!) when session starts connecting to specific session",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming-i.html#input-output-lists",
    "href": "04-server-reactive-programming-i.html#input-output-lists",
    "title": "Server: Reactive programming",
    "section": "3 Input & output (lists)",
    "text": "3 Input & output (lists)\n\ninput: a list-like object that contains all the input data sent from the browser, named according to the input ID\n\ne.g., numericInput(\"count\", label = \"Number of values\", value = 100) generates input$count\ninput can only be read from within reactive contexts created by a reactive functions like renderText() or reactive()\n\nreactive functions allow for outputs to automatically update when an input changes\n\n\noutput: a list-like object containing outputs named according to output ID\n\nDifference: output list used for sending output instead of receiving input through input list (always in concert with render function as below)\nQ: How many inputs/outputs/render functions are there in the code below? What does it do?\n\n\n\n\nSimple input/output example\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\")\n)\n\nserver &lt;- function(input, output, session) {\n1  output$greeting &lt;- renderText({\n    paste0(\"Hello \", input$name, \"!\")\n  })\n}\nshinyApp(ui, server)\n\n\n\n1\n\nrender functions, e.g., renderText() set up special reactive context that automatically tracks what inputs the output uses AND converts output of R code into HTML suitable for display on a web page",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming-i.html#render-functions",
    "href": "04-server-reactive-programming-i.html#render-functions",
    "title": "Server: Reactive programming",
    "section": "4 Render functions",
    "text": "4 Render functions\n\nrender functions, located in server, wrap generated outputs and correspond to the type or reactive output\n\nresulting values are stored in output$... list\n\nQ: What do you think are the following render functions used for? (e.g., )\n\nrenderImage({...})\nrenderPlot({...})\nrenderPlotly({...}) (!)\nrenderPrint({...})\nrenderTable({...}) (!)\nrenderDataTable({...})\nrenderText({...})\nrenderUI({...})\nrenderLeaflet({...})(!)\n\nOur app uses those marked with (!).\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nrenderImage({...}) creates images (saved as a link to a source file)\nrenderPlot({...}) creates plots\nrenderPlotly({...}) creates interactive plotly graph\nrenderPrint({...}) creates any printed output\nrenderTable({...}) creates data frame, matrix, other table like structures\n\nrenderDataTable({...}) creates interactive datatable\n\nrenderText({...}) creates character strings\nrenderUI({...}) creates a Shiny tag object or HTML\nrenderLeaflet({...}) create a leaflet map",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming-i.html#reactive-programming",
    "href": "04-server-reactive-programming-i.html#reactive-programming",
    "title": "Server: Reactive programming",
    "section": "5 Reactive programming",
    "text": "5 Reactive programming\n\n5.1 How does reactivity work?\n\nQ: How does reactivity work? What does the app below do? (Let’s run it too!)\n\n\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\")\n)\n\nserver &lt;- function(input, output, session) {\n  output$greeting &lt;- renderText({\n    paste0(\"Hello \", input$name, \"!\")\n  })\n}\nshinyApp(ui, server)\n\n\nShiny performs the renderText() action every time we update input$name (automatically!)\nreactive refers to any expression that automatically updates itself when its dependencies change\nImportant: Code informs Shiny how it could create the string if it needs to, but it’s up to Shiny when (and even if!) the code should be run\nRecipe: App provides Shiny with recipe (not commands) what to do with inputs\n\n\n\n5.2 The reactive graph\n\nUsually R code can be read from top to bottom (= order of execution)… not in Shiny!\nReactive graph: describes how inputs and outputs are connected to understand order of execution\nFigure 1 describes app in Section 5.1 above.\n\ntells that output$greeting will need to be recomputed whenever input$name is changed\ngreeting has a reactive dependency on name\n\n\n\n\n\n\n\n\n\n\nFigure 1: The reactive graph shows how the inputs and outputs are connected (Source: Wickham 2021)\n\n\n\n\n\n\nQuick high-level sketch of reactive graphs help to understand how pieces fit together\n\n\n\n5.3 Reactive expressions\n\nReactive expressions take inputs and produce outputs\n\ncan reduce duplication in reactive code by introducing additional nodes into reactive graph\nFigure 2 contains reactive expression string (inspect shape!) with code shown below\n\n\n\n\n\n\n\n\n\n\nFigure 2: A reactive expression is drawn with angles on both sides because it connects inputs to outputs (Source: Wickham 2021)\n\n\n\n\n\n\nBelow string is created with reactive() function to app in Section 5.1.\n\n\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\"),\n)\n\nserver &lt;- function(input, output, session) {\n  string &lt;- reactive(paste0(\"Hello \", input$name, \"!\"))\n  output$greeting &lt;- renderText(string())\n}\nshinyApp(ui, server)\n\n\nAvoid duplication\n\nQ: How does the code below avoid duplicating code?\n\n\n\n\nShow the code\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\"),\n  textOutput(\"greeting2\")\n)\n\nserver &lt;- function(input, output, session) {\n  string &lt;- reactive(paste0(\"Hello \", input$name, \"!\"))\n  output$greeting &lt;- renderText(string())\n  output$greeting2 &lt;- renderText(string())\n}\nshinyApp(ui, server)\n\n\n\n\n5.4 Executation order\n\nOrder Shiny code is run is solely determined by reactive graph\nBelow we flip code in server function below\n\nBetter keep order for easier understanding!\n\n\n\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\"),\n)\n\nserver &lt;- function(input, output, session) {\n  output$greeting &lt;- renderText(string())\n  string &lt;- reactive(paste0(\"Hello \", input$name, \"!\"))\n}\nshinyApp(ui, server)\n\n\n\n5.5 Exercises\n\nCan you spot errors in the code of the different servers server1, server2 and server3 below?\n\n\n# UI\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\")\n)\n\n# SERVERS\nserver1 &lt;- function(input, output, server) {\n  input$greeting &lt;- renderText(paste0(\"Hello \", name))\n}\n\nserver2 &lt;- function(input, output, server) {\n  greeting &lt;- paste0(\"Hello \", input$name)\n  output$greeting &lt;- renderText(greeting)\n}\n\nserver3 &lt;- function(input, output, server) {\n  output$greting &lt;- paste0(\"Hello\", input$name)\n}\n\n\n\n\n\n\n\nSolution(s)\n\n\n\n\n\n\nServer 1: Forgot to specify refer to list using name instead of input$name.\nServer 2: Forgot to specify that greeting is a reactive using greeting intead to greeting() within renderText().\nServer 3: Called the output that is stored in list output greting instead of greeting. Hence, it can not be found by the textOutput() function.\n\n\n\n\n\nDraw the reactive graph for the following three server functions (what are the inputs, reactives and ouputs): (Homework: server2 and server3!)\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nStart by deciding how many and which inputs (1), reactives (2) and ouputs (3) there are. Then start drawing with inputs represented in the first column on the left. You could use, e.g., name&gt; for inputs, &gt;name&gt; for reactives and &gt;name for outputs and arrows to connect them.\n\n\n\n\nserver1 &lt;- function(input, output, session) {\n  c &lt;- reactive(input$a + input$b)\n  e &lt;- reactive(c() + input$d)\n  output$f &lt;- renderText(e())\n}\n\nserver2 &lt;- function(input, output, session) {\n  x &lt;- reactive(input$x1 + input$x2 + input$x3)\n  y &lt;- reactive(input$y1 + input$y2)\n  output$z &lt;- renderText(x() / y())\n}\n\nserver3 &lt;- function(input, output, session) {\n  d &lt;- reactive(c() ^ input$d)\n  a &lt;- reactive(input$a * 10)\n  c &lt;- reactive(b() / input$c) \n  b &lt;- reactive(a() + input$b)\n}\n\n\n\n\n\n\n\nSolution(s)\n\n\n\n\n\n\nCan you spot errors in the code of the different server1, server2 and server3 below?\n\n\nserver1: Forgot input$\nserver2: input$name outside of renderText() function\nserver3: Typo in output$greting\n\n\n\nDraw the reactive graph for the following three server functions (Solution source):\n\nTo create the reactive graph we need to consider the inputs, reactive expressions, and outputs of the app.\nFor server1 we have the following objects:\n\ninputs: input$a, input$b, and input$d\nreactives: c() and e()\noutputs: output$f\n\nInputs input$a and input$b are used to create c(), which is combined with input$d to create e(). The output depends only on e().\n\n\n\n\nreactive graph - server 1\n\n\n\n\nFor server2 we have the following objects:\n\ninputs: input$y1, input$y2, input$x1, input$x2, input$x3\nreactives: y() and x()\noutputs: output$z\n\nInputs input$y1 and input$y2 are needed to create the reactive y(). In addition, inputs input$x1, input$x2, and input$x3 are required to create the reactive x(). The output depends on both x() and y().\n\n\n\n\nreactive graph - server 2\n\n\n\n\nFor server3 we have the following objects:\n\ninputs: input$a, input$b, input$c, input$d\nreactives: a(), b(), c(), d()\n\nAs we can see below, a() relies on input$a, b() relies on both a() and input$b, and c() relies on both b() and input$c. The final output depends on both c() and input$d.\n\n\n\n\nreactive graph - server 3",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming-i.html#reactive-expressions-more",
    "href": "04-server-reactive-programming-i.html#reactive-expressions-more",
    "title": "Server: Reactive programming",
    "section": "6 Reactive expressions (more!)",
    "text": "6 Reactive expressions (more!)\n\nChapter 3.4 is recommended reading!\nReactive expressions (e.g., reactive()) are important because…\n\ngive Shiny more information so that it can do less recomputation when inputs change\nmake apps more efficient and easier for humans to understand (simplify reactive graph!)\n\nAre like inputs since you can use results of a reactive expression in an output\nAre like outputs since they depend on inputs and automatically know when they need updating\nInputs and reactive expressions are reactive producers (see Figure 3)\nReactive expressions and outputs are reactive consumers (see Figure 3)\n\n\n\n\n\n\nFigure 3: Inputs and expressions are reactive producers; expressions and outputs are reactive consumers (Source: Wickham 2021)"
  },
  {
    "objectID": "04-server-reactive-programming-i.html#reactive-functions-overview",
    "href": "04-server-reactive-programming-i.html#reactive-functions-overview",
    "title": "Server: Reactive programming",
    "section": "7 Reactive functions: Overview",
    "text": "7 Reactive functions: Overview\n\nShiny provides a variety of reactive functions such as reactive(), observe(), bindevent() and others.`\nSee insightful discussions on reactivity and reactive functions in Chapter 3.5.1.\n\n\n7.1 reactive()\n\nreactive(): wraps a normal expression to create a reactive expression\n\nis “reactive” in the sense that if its dependencies change, it will automatically update.\nBelow reactive string changes whenever dependency input$name changes.\nQ: What would be the reactive producer and what the reactive consumer?\n\n\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\"),\n)\n\nserver &lt;- function(input, output, session) {\n  string &lt;- reactive(paste0(\"Hello \", input$name, \"!\"))\n  output$greeting &lt;- renderText(string())\n}\nshinyApp(ui, server)\n  })\n\n\n7.2 observe() vs. reactive()\n\nreactive(): creates a reactive expression that can be changed over time by user inputs\nobserve(): creates an observer that runs whenever any of its reactive dependencies change\n\ni.e., code inside observe() will be re-evaluated whenever any reactive inputs or reactive expressions that it references get updated\nBUT we don’t assign result of observe() to a variable, so we can’t refer to it from other reactive consumers\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nBelow we use a reactive expression using reactive() to create squared. This is then reused in the observe() function that wraps a render function renderText() that creates and the output element output$text.\n\n\n\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  numericInput(\"num\", \"Enter a number\", value = 1),\n  textOutput(\"text\")\n)\n\nserver &lt;- function(input, output, session) {\n  # reactive expression\n  squared &lt;- reactive({ \n    input$num^2 \n  })\n  \n  # observer\n  observe({ \n    output$text &lt;- renderText({\n      paste0(\"The square of \", input$num, \" is \", squared())\n    })\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n\n7.3 Reacting on events: bindEvent()\n\nbindEvent(): provides a straightforward API for event handling\nobserveEvent() (observers): used when you want to perform an action in response to an event (see input$button below), but you don’t need the result of the action to be used in the UI\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nIn this example, when the “Generate Random Number” button is clicked, a random number is generated, but it doesn’t get displayed immediately. Instead, the output$randomNumber expression is bound to input$dispButton event with bindEvent(), and the result is displayed only when the “Display Random Number” button is clicked. This allows you to have more control over when the UI updates in response to changes in server-side reactive values.\n\n\n\nlibrary(shiny)\n\n# Define UI\nui &lt;- fluidPage(\n    actionButton(\"genButton\", \"Generate Random Number\"),\n    actionButton(\"dispButton\", \"Display Random Number\"),\n    textOutput(\"randomNumber\")\n)\n\n# Define server logic\nserver &lt;- function(input, output, session) {\n    randNum &lt;- reactiveValues(num = NULL)\n\n    observeEvent(input$genButton, {\n        randNum$num &lt;- runif(1) # Generate a random number when genButton is clicked\n    })\n    \n    output$randomNumber &lt;- renderText({ \n        randNum$num # Generate the reactive expression\n    }) %&gt;% \n    bindEvent(input$dispButton) # Binding the output$randomNumber reactive expression to dispButton\n}\n\n# Run the application \nshinyApp(ui = ui, server = server, options = list(display.mode='showcase'))\n\n\n7.4 eventReactive() (skip!)\n\nAlternative to bind_event()\neventReactive(): Similar to reactive(), but only re-evaluates when a certain event is triggered. Can be used in combination with observeEvent().\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nIn this app, when you click the “Generate Random Number” button, a random number is generated, but it’s not displayed yet. When you click the “Display Random Number” button, the generated number is then displayed. The eventReactive() function is used to create a reactive value (the random number) that is updated only when a specific event (clicking the “Generate Random Number” button) occurs.\n\n\n\nlibrary(shiny)\n\n# Define UI\nui &lt;- fluidPage(\n    actionButton(\"genButton\", \"Generate Random Number\"),\n    actionButton(\"dispButton\", \"Display Random Number\"),\n    textOutput(\"randomNumber\")\n)\n\n# Define server logic\nserver &lt;- function(input, output, session) {\n    randNum &lt;- eventReactive(input$genButton, {\n        runif(1) # Generate a random number when genButton is clicked\n    })\n    \n    observeEvent(input$dispButton, {\n        output$randomNumber &lt;- renderText({ randNum() }) # Display the random number when dispButton is clicked\n    })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server, options = list(display.mode='showcase'))\n\n\n7.5 isolate() (skip!)\n\nisolate(): used to access the value of a reactive expression or input without setting up a dependency\n\nuseful to access the current value of an input or reactive expression, but without re-running the code when that input or expression changes\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nIn this app, when you click the “Generate Random Number” button, a random number is generated. This number does not immediately cause a reactive event because it’s isolated within the isolate() function. It only gets displayed when you click the “Display Random Number” button. Changes to randNum$num after “Display Random Number” button is clicked won’t affect the displayed value until the button is clicked again. Thus, the isolate() function enables the use of reactive values without triggering reactivity.\n\n\n\nlibrary(shiny)\n\n# Define UI\nui &lt;- fluidPage(\n    actionButton(\"genButton\", \"Generate Random Number\"),\n    actionButton(\"dispButton\", \"Display Random Number\"),\n    textOutput(\"randomNumber\")\n)\n\n# Define server logic\nserver &lt;- function(input, output, session) {\n    randNum &lt;- reactiveValues(num = NULL) # Create object to store reactiv values\n\n    observeEvent(input$genButton, {\n        randNum$num &lt;- runif(1) # Generate a random number when genButton is clicked\n    })\n    \n    observeEvent(input$dispButton, {\n        output$randomNumber &lt;- renderText({ \n          isolate(randNum$num) # Display the random number when dispButton is clicked, but do not reactivity link it\n        }) \n    })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server, options = list(display.mode='showcase'))\n\n\n7.6 reactiveTimer() (skip!)\n\nreactiveTimer(): used to create a reactive expression that invalidates itself after a given number of milliseconds. This can be useful for causing certain parts of your Shiny app to update on a regular interval.\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nIn this example, autoInvalidate() is a reactive expression that becomes invalidated (i.e., signals that it needs to be re-evaluated) every 1000 milliseconds. By referencing autoInvalidate() inside the renderText() function, we’re creating a dependency — so, every time autoInvalidate() is invalidated, the current time is re-evaluated and the UI is updated with the new time.\n\n\n\nlibrary(shiny)\n\n# Define UI\nui &lt;- fluidPage(\n  textOutput(\"currentTime\")\n)\n\n# Define server logic\nserver &lt;- function(input, output, session) {\n  \n  # Define a reactive timer with a 1000ms (1s) interval\n  autoInvalidate &lt;- reactiveTimer(1000)\n  \n  output$currentTime &lt;- renderText({\n    autoInvalidate()  # This line causes the reactive expression to be invalidated (and thus re-evaluated) every second\n    as.character(Sys.time())  # Display the current time\n  })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "04-server-reactive-programming-i.html#guerry-app-reactivity-tabulate-data-tab",
    "href": "04-server-reactive-programming-i.html#guerry-app-reactivity-tabulate-data-tab",
    "title": "Server: Reactive programming",
    "section": "8 Guerry app (reactivity): Tabulate data tab",
    "text": "8 Guerry app (reactivity): Tabulate data tab\n\nThe Guerry app includes the following reactive functions: reactive(), observe(), isolate(), bindEvent().\nBelow the basic code underlying the Tabulate tab of our app.\n\nWhat would the reactive graph look like for this app (how many inputs, reatives, outputs)?\nWhich reactive functions can you identify?"
  },
  {
    "objectID": "04-server-reactive-programming-i.html#loading-things-in-shiny",
    "href": "04-server-reactive-programming-i.html#loading-things-in-shiny",
    "title": "Server: Reactive programming",
    "section": "9 Loading things in Shiny",
    "text": "9 Loading things in Shiny\n\n9.1 When is code run?\n\nWhen is code in a shiny app run? (Source)\nCode outside of ui and server is run once, when the app is launched.\n\n\n\nCode inside the server function is run once each time a user visits the app (opens the webpage).\n\n\n\nCode inside render functions is run each time a user changes a widget (input$...) that ouput$... depends on\n\n\n\nQ: So where shall we put the function to load the datasets?\nQ: What problem might occur if we place certain code wrongly ? Where would you place data management tasks?\n\n\n\n\n\n\n\nInsight\n\n\n\n\n\n\nIf possible place anything computationally intensive outside of the render functions.\n\ne.g., might make sense to estimate models/subset data beforehand if possible and access precalculated objects in reactive functions\n\n\n\n\n\n\n\n9.2 Where to load things\n\nCode outside server &lt;- function(input, output, session) {} is run once, when you launch your app\nCode inside server &lt;- function(input, output, session) {} is run once each time a user visits your app\nCode inside render* functions is rerun constantly (not only when user changes widget value ( see reactivity)\nThat means…\n\nLoad Source scripts, libraries, and data outside of server function (at the beginning)\n\nStore data in www/ folder in your app directory\nAccess with read.table(\"www/swiss.csv\", sep=\",\")\nAccess online data by inserting the url into the read* function (e.g. read.table())\n\nUser specific objects (e.g. object that records user’s session information) are defined inside shinyServer’s unnamed function, but outside of any render* calls\n\ne.g. user registers himself, user data as input data (compare income)\n\nCode/objects that are affected by choices in widgets must be placed within the a render* function\n\nShiny reruns code in a render* chunk each time a user changes a widget mentioned in the chunk\n\n\nAvoid placing code within render function that does not need to be there… for performance reasons!",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming-i.html#data-storage",
    "href": "04-server-reactive-programming-i.html#data-storage",
    "title": "Server: Reactive programming",
    "section": "10 Data storage",
    "text": "10 Data storage\n\nThings might get tricky for more data-hungry Shiny apps\nThe way data is stored and accessed has some important implications for\n\nMemory allocation: R stores objects in the working memory\nPerformance: “R does too much” - Colin Fay\nReadability: Putting everything in one file might get messy\n\nFor more sophisticated setups: databases (e.g., SQLite, PostgreSQL, MongoDB)\nR can work perfectly well with database connections (R Packages: DBI, dbplyr, sf) (see overview here)\n\nSQLite works well for casually trying out databases (see overview here)",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming-i.html#summary",
    "href": "04-server-reactive-programming-i.html#summary",
    "title": "Server: Reactive programming",
    "section": "11 Summary",
    "text": "11 Summary\nTo build reactive shiny apps…\n\nUse *Output functions to place reactive objects in the UI (webpage)\nUse render* functions to let R build output objects (on the server)\n\nRender functions are located in server &lt;- function(input, output, session) {...})\nR expressions are surrounded by braces, {} in render* functions\nOutputs of render* are saved in the output list, with one entry for each reactive object in your app\nReactivity by including an input values in a render* expression\n\nOften times you will adapt/modify examples that you find online",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming-i.html#appendix-visualizing-reactivity-with-reactlog",
    "href": "04-server-reactive-programming-i.html#appendix-visualizing-reactivity-with-reactlog",
    "title": "Server: Reactive programming",
    "section": "12 Appendix: Visualizing reactivity with reactlog",
    "text": "12 Appendix: Visualizing reactivity with reactlog\n\nreactlog can be used to visualize and explore the reactivity of a Shiny app\nBelow we do so for the Shiny app above (app is stored in a folder)\n\n\n# Restart R to delete log\n.rs.restartR()\n\nlibrary(shiny)\nlibrary(reactlog)\n\n# tell shiny to log all reactivity\nreactlog_enable()\n# reactlog_disable()\n\n# run a shiny app\nrunApp(\"C:/Users/Paul/Google Drive/13_SHINY_Workshop/shinyapps/example/app_table_tab.R\")\n\n# once app has closed, display reactlog from shiny\nshiny::reactlogShow()",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming-i.html#appendix-imperative-vs.-declarative-programming-and-laziness",
    "href": "04-server-reactive-programming-i.html#appendix-imperative-vs.-declarative-programming-and-laziness",
    "title": "Server: Reactive programming",
    "section": "13 Appendix: Imperative vs. Declarative programming and laziness",
    "text": "13 Appendix: Imperative vs. Declarative programming and laziness\n\nImperative vs. declarative programming (Chapter 3.3.1)\n\nImperative code: “Make me a sandwich” (“assertive” code)\nDeclarative code: “Ensure there is a sandwich in the refrigerator whenever I look inside of it” (“passive-aggressive” code)\nShiny follows the latter principles\n\nLaziness as strength of declarative programming (Chapter 3.3.2)\n\napp will only ever do the minimal amount of work needed to update the output controls that you can currently see",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "06-visualization.html",
    "href": "06-visualization.html",
    "title": "Modelling and visualizing data",
    "section": "",
    "text": "You will learn how to:",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "06-visualization.html#interactive-visualization-the-core-of-shiny",
    "href": "06-visualization.html#interactive-visualization-the-core-of-shiny",
    "title": "Modelling and visualizing data",
    "section": "1 Interactive visualization: The core of Shiny",
    "text": "1 Interactive visualization: The core of Shiny\n\nShiny offers the perfect basis for visualization\n\nPlots can be modified using UI inputs\nSeamless integration of interactivity elements (e.g. pan, zoom)\nDashboards facilitate the idea of story-telling by providing context to plots\n\n\n\n1.1 Good practice examples\n\nExamples of these concepts can be seen in many Shiny apps, one example is Edward Parker’s COVID-19 tracker\n\n\n\n\n\n\n\nQuestion\n\n\n\nExplore the COVID-19 tracker. Do you think this is a good Shiny app? If so, why? If not, why not?\n\n\n\n\n\nCOVID-19 Tracker\n\n\n\n\n1.2 Plain plotting vs. Shiny\n\n\n\nFeature\nPlain R\nShiny\nExamples\n\n\n\n\nReactivity\nChanges in the visualization have to be changed in the code\nVisualizations can be modified on the fly using widgets like drop-down menus\nExPanD\n\n\nInteractivity\nPlots are static raster or vector images\nPlots can be dynamic and can be interacted with\nCOVID-19 tracker\n\n\nNarrativity\nSense-making happens through manual annotation, e.g. in an article or a presentation\nPlots are embedded in a compilation of narrative elements that can tell a coherent story\nFreedom of Press Shiny app\nGRETA Analytics\n\n\n\n\n\n\nMedium\nReactivity\nInteractivity\nNarrativity\n\n\n\n\nPlain image\n❌\n❌\n❌\n\n\nPaper / report\n❌\n❌\n✅\n\n\nDashboard (e.g. Tableau)\n❌\n☑️\n✅\n\n\nQuarto / RMarkdown\n❌\n☑️\n✅\n\n\nTraditional website\n☑️\n✅\n✅\n\n\nShiny\n✅\n✅\n✅\n\n\n\n\n\n1.3 Current app state\n\nIn the last sections, we added a table and a plot and linked them to a number of inputs\nThe code chunk below contains the current app state\nIn this section, we will:\n\nAugment the violin plot\nAdd an interactive map\n\n\n\n\nFull code for the current app state\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(shiny)\nlibrary(plotly)\nlibrary(leaflet)\nlibrary(haven)\n\ness &lt;- readRDS(\"ess_trust.rds\")\ness_geo &lt;- readRDS(\"ess_trust_geo.rds\")\n\n# UI ----\nui &lt;- fluidPage(\n  titlePanel(\"European Social Survey - round 10\"),\n  \n  ## Sidebar ----\n  sidebarLayout(\n    sidebarPanel(\n      ### select dependent variable\n      selectInput(\n        \"xvar\",\n        label = \"Select a dependent variable\",\n        choices = c(\n          \"Trust in country's parliament\" = \"trust_parliament\",\n          \"Trust in the legal system\" = \"trust_legal\",\n          \"Trust in the police\" = \"trust_police\",\n          \"Trust in politicians\" = \"trust_politicians\",\n          \"Trust in political parties\" = \"trust_parties\",\n          \"Trust in the European Parliament\" = \"trust_eu\",\n          \"Trust in the United Nations\" = \"trust_un\"\n        )\n      ),\n      \n      ### select a variable ----\n      selectInput(\n        \"yvar\",\n        label = \"Select an independent variable\",\n        choices = c(\n          \"Placement on the left-right scale\" = \"left_right\",\n          \"Age\" = \"age\",\n          \"Feeling about household's income\" = \"income_feeling\",\n          \"How often do you use the internet?\" = \"internet_use\",\n          \"How happy are you?\" = \"happiness\"\n        )\n      ),\n      \n      ### select a country ----\n      selectizeInput(\n        \"countries\",\n        label = \"Filter by country\",\n        choices = unique(ess$country),\n        selected = \"FR\",\n        multiple = TRUE\n      ),\n      \n      ### filter values ----\n      sliderInput(\n        \"range\",\n        label = \"Set a value range\",\n        min = min(ess$trust_parliament, na.rm = TRUE),\n        max = max(ess$trust_parliament, na.rm = TRUE),\n        value = range(ess$trust_parliament, na.rm = TRUE),\n        step = 1\n      )\n    ),\n    \n    ## Main panel ----\n    mainPanel(\n      tabsetPanel(\n        type = \"tabs\",\n        \n        ### Table tab ----\n        tabPanel(\n          title = \"Table\",\n          div(\n            style = \"height: 600px; overflow-y: auto;\",\n            tableOutput(\"table\")\n          )\n        ),\n        \n        ### Plot tab ----\n        tabPanel(\n          title = \"Plot\",\n          plotOutput(\"plot\", height = 600)\n        ),\n        \n        ### Map tab ----\n        tabPanel(\n          title = \"Map\",\n          leafletOutput(\"map\", height = 600)\n        )\n      )\n    )\n  )\n)\n\n\n# Server ----\nserver &lt;- function(input, output, session) {\n  # update slider ----\n  observe({\n    var &lt;- na.omit(ess[[input$xvar]])\n    is_ordered &lt;- is.ordered(var)\n    var &lt;- as.numeric(var)\n    updateSliderInput(\n      inputId = \"range\",\n      min = min(var),\n      max = max(var),\n      value = range(var),\n      step = if (is_ordered) 1\n    )\n  }) %&gt;%\n    bindEvent(input$xvar)\n  \n  # filter data ----\n  filtered &lt;- reactive({\n    req(input$countries, cancelOutput = TRUE)\n    \n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    range &lt;- input$range\n    \n    # select country\n    ess &lt;- ess[ess$country %in% input$countries, ]\n    \n    # select variable\n    ess &lt;- ess[c(\"idno\", \"country\", xvar, yvar)]\n    \n    # apply range\n    ess &lt;- ess[ess[[xvar]] &gt; range[1] & ess[[xvar]] &lt; range[2], ]\n    ess\n  })\n  \n  # render table ----\n  output$table &lt;- renderTable({\n    filtered()\n  }, height = 400)\n  \n  # render plot ----\n  output$plot &lt;- renderPlot({\n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    plot_data &lt;- filtered() %&gt;%\n      drop_na() %&gt;%\n      mutate(across(where(is.numeric), .fns = as.ordered))\n    \n    ggplot(plot_data) +\n      aes(x = .data[[xvar]], y = .data[[yvar]], group = .data[[xvar]]) +\n      geom_violin(fill = \"lightblue\", show.legend = FALSE) +\n      theme_classic()\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n\n\n\n1.4 Recap: Plotting in Shiny\n\nInserting plots in Shiny apps works just like any other UI component\nYou need two things: plotOutput() (or similar) in the UI and renderPlot() (or similar) in the server function\n\nplotOutput() creates the empty element in the UI where the plot will go\nrenderPlot() renders the plot and updates the UI element every time a reactive dependency is invalidated",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "06-visualization.html#data-masking",
    "href": "06-visualization.html#data-masking",
    "title": "Modelling and visualizing data",
    "section": "2 Data masking",
    "text": "2 Data masking\n\nData masking means that function arguments are not evaluated traditionally, but captured or “defused” for later use\nThis strategy is employed by many functions for plotting or creating tables including the tidyverse (also called “tidy evaluation”)\nIn a practical sense, this means you can specify string values such as column names as you would variables\nTo learn more about data masking in Shiny, see chapter 20 of Advanced R and chapter 12 of Mastering Shiny\n\n\n# NSE as \"tidy evaluation\"\ness %&gt;%\n  summarize(mean = mean(trust_eu))\n\n# NSE in base R\nsubset(ess, select = trust_eu)\nwith(ess, sum(trust_eu))\n\n\n2.1 Why is data masking a problem?\n\nData masks are a little tricky to handle in higher levels of abstraction, i.e. functions or reactive expressions\nIn such cases, we do not need one specific variable, but a dynamically changing variable\n\n\nplot_df &lt;- function(df, var) {\n  ggplot(df) +\n    aes(x = var) +\n    geom_histogram()\n}\n\nplot_df(ess, \"trust_eu\")\n\nError in eval(expr, envir, enclos): object 'ess' not found\n\n\n\n\n2.2 Strategy 1: Use tidy pronouns\n\nTidyverse functions that feature tidy evaluation support the .data and .env pronouns\nThe .data pronoun is a representation of the original data which can be used in a masked environment\nSee also the reference of rlang\n\n\nplot_df &lt;- function(df, var) {\n  ggplot(df) +\n    aes(x = .data[[var]]) +\n    geom_histogram()\n}\n\nplot_df(ess, \"trust_eu\")\n\n\n\n2.3 Strategy 2: Convert strings to expressions\n\nSometimes, masked expressions can simply be constructed as strings\nOne example are formulas (e.g. in lm(y ~ x1 + x2))\nThe as.formula function can create formula objects manually\n\n\nlinreg &lt;- function(df, y, x) {\n  fm &lt;- paste(y, \"~\", paste(x, collapse = \" + \"))\n  fm &lt;- as.formula(fm)\n  lm(fm, data = df)\n}\n\nlinreg(ess, y = \"trust_eu\", x = c(\"age\", \"left_right\"))\n\n\n\n2.4 Strategy 3: Change names\n\nIn case of poorly implemented data masking, no tools are available to inject variables\nOne strategy to overcome such situations could be to simply change the object names\n\n\nplot_df &lt;- function(df, var) {\n  df &lt;- df[, var]\n  names(df) &lt;- \"x\"\n\n  ggplot(df) +\n    aes(x = x) +\n    geom_histogram()\n}\n\nplot_df(ess, \"trust_eu\")",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "06-visualization.html#interactivity",
    "href": "06-visualization.html#interactivity",
    "title": "Modelling and visualizing data",
    "section": "3 Interactivity",
    "text": "3 Interactivity\n\nR itself is very bad at interactivity\nShiny supports some very essential interactivity through plotOutput\n\nNot covered in this workshop! For a primer, check out chapter 7.1 of Mastering Shiny\n\nAll of today’s cool kids use interactivity through Javascript interfaces\nShiny can generally process all kinds of Javascript-based widgets because Shiny apps are HTML documents\n\n\n3.1 Popular Javascript interfaces\n\nExamples of Javascript libraries and their corresponding R packages\n\nPlotly (covered here)\nLeaflet (covered here)\nHighcharts\nBokeh\nD3\nApache ECharts\nFrappe Charts\nbillboard.js\napexcharts.js\nGoogle Charts\namCharts 4\nDeck.gl\nWebGL",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "06-visualization.html#plotly",
    "href": "06-visualization.html#plotly",
    "title": "Modelling and visualizing data",
    "section": "4 Plotly",
    "text": "4 Plotly\n\nPlotly is an open-source library to create charts that can be interacted with in various way\nIt supports several languages including R and Python\nPlotly is arguably the most renowned R package for interactive plotting\nIt even motivated an entire book: https://plotly-r.com/\n\n\n4.1 Plotly’s grammar of graphics\n\nSimilar to ggplot2, R plotly defines its own grammar of graphics\nA plotly canvas is created with plot_ly()\nAdditional plot elements can be added through pipes %&gt;% or |&gt;\n\n\ness_geo &lt;- readRDS(\"data/ess_trust_geo.rds\")\ness_geo &lt;- mutate(\n  ess_geo,\n  region = case_match(\n    country,\n    c(\"AT\", \"BE\", \"CH\", \"DE\", \"NL\", \"PL\", \"CZ\") ~ \"Central\",\n    c(\"BG\", \"EE\", \"HR\", \"HU\", \"LT\", \"LV\", \"PL\", \"SI\", \"SK\") ~ \"Eastern\",\n    c(\"ES\", \"IT\", \"PT\", \"RS\", \"ME\") ~ \"Southern\",\n    c(\"IS\", \"SE\", \"FI\", \"GB\", \"IE\", \"DK\") ~ \"Northern\"\n  )\n)\n\nplot_ly(\n  sf::st_drop_geometry(ess_geo),\n1  x = ~trust_eu,\n  y = ~left_right,\n  z = ~age,\n  color = ~region,\n  text = ~country\n) %&gt;%\n2  add_markers() %&gt;%\n3  layout(scene = list(\n    xaxis = list(title = 'Trust in the EU'),\n    yaxis = list(title = 'Left-right placement'),\n    zaxis = list(title = 'Age')\n  ))\n\n\n1\n\nVariables such as x, y, z and color are defined as formulas in a call to plot_ly. This is comparable to calling ggplot(aes(x, y, z, color)).\n\n2\n\nThe plot type is added through a pipe. This is comparable to ggplot2 functions such as geom_point or geom_bar.\n\n3\n\nVisual sugar is then added by calling layout and manually editing the axis titles.\n\n\n\n\n\n\n\n\n\n\n4.2 Quick and dirty interactivity\n\nOne important advantage of plotly is that you do not need to learn its grammar\nggplot2 plots can very easily be converted to an interactive plotly plot:\n\n\np &lt;- ggplot(iris) +\n  geom_point(aes(Sepal.Width, Sepal.Length))\np\n\n\n\n\n\n\n\n\n\nggplotly(p)\n\n\n\n\n\n\n\n4.3 Extending plotly\n\n4.3.1 Customization\n\nWe can extend Plotly objects using three functions:\n\nlayout() changes the plot organisation (think ggplot2::theme()), e.g.:\n\ncolors, sizes, fonts, positions, titles, ratios and alignment of all kinds of plot elements\nupdatemenus adds buttons or drop down menus that can change the plot style or layout (see here for examples)\nsliders adds sliders that can be useful for time series (see here for examples)\n\nconfig() changes interactivity configurations, e.g.:\n\nThe modeBarButtons options and displaylogo control the buttons in the mode bar\ntoImageButtonOptions controls the format of plot downloads\nscrollZoom enables or disables zooming by scrolling\n\nstyle() changes data-level attributes (think ggplot2::scale_), e.g.:\n\nhoverinfo controls whether tooltips are shown on hover\nmode controls whether to show points, lines and/or text in a scatter plot\nhovertext modifies the tooltips texts shown on hover\n\n\n\n\n\n4.3.2 Schema\n\nThe actual number of options is immense!\nYou can explore all options by calling plotly::schema()\n\n\nschema()\n\n\n\n\n\n\n\n\n4.3.3 Example\n\np &lt;- ggplot(iris) +\n  geom_point(aes(Sepal.Width, Sepal.Length))\n\nggplotly(p) %&gt;%\n  config(\n1    modeBarButtonsToRemove = c(\n      \"sendDataToCloud\", \"zoom2d\", \"select2d\", \"lasso2d\", \"autoScale2d\",\n      \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\"\n    ),\n\n2    displaylogo = FALSE,\n\n3    toImageButtonOptions = list(\n      format = \"svg\",\n      filename = \"plot\",\n      height = NULL,\n      width = NULL\n    ),\n\n4    scrollZoom = TRUE\n  )\n\n\n1\n\nRemoves specified buttons from the modebar.\n\n2\n\nRemoves the Plotly logo.\n\n3\n\nChanges the output of snapshots taken of the plot. Setting height and width to NULL keeps the aspect ratio of the plot as it is shown in the app.\n\n4\n\nEnables zooming through scrolling.\n\n\n\n\n\n\n\n\n\n\n\n4.4 Plotly and Shiny\n\nSince plotly does not produce static plots like ggplot2, it cannot be served by plotOutput and renderPlot\nPlotly defines two new functions:\n\nplotlyOutput on the UI side\nrenderPlotly on the server side\n\n\nUI:\n\nmainPanel(\n  tabsetPanel(\n    type = \"tabs\",\n    \n    ### Table tab ----\n    tabPanel(\n      title = \"Table\",\n      div(\n        style = \"height: 600px; overflow-y: auto;\",\n        tableOutput(\"table\")\n      )\n    ),\n    \n    ### Plot tab ----\n    tabPanel(\n      title = \"Plot\",\n      plotlyOutput(\"plot\", height = 600)\n    )\n  )\n)\n\nServer:\n\noutput$plot &lt;- renderPlotly({\n  xvar &lt;- input$xvar\n  yvar &lt;- input$yvar\n  plot_data &lt;- filtered() %&gt;%\n    drop_na() %&gt;%\n    mutate(across(where(is.numeric), .fns = as.ordered))\n  \n  p &lt;- ggplot(plot_data) +\n    aes(x = .data[[xvar]], y = .data[[yvar]], group = .data[[xvar]]) +\n    geom_violin(fill = \"lightblue\", show.legend = FALSE) +\n    theme_classic()\n  ggplotly(p)\n})\n\n\n\nComplete code (important lines are highlighted)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(shiny)\nlibrary(plotly)\nlibrary(leaflet)\nlibrary(haven)\n\ness &lt;- readRDS(\"ess_trust.rds\")\ness_geo &lt;- readRDS(\"ess_trust_geo.rds\")\n\n# UI ----\nui &lt;- fluidPage(\n  titlePanel(\"European Social Survey - round 10\"),\n  \n  ## Sidebar ----\n  sidebarLayout(\n    sidebarPanel(\n      ### select dependent variable\n      selectInput(\n        \"xvar\",\n        label = \"Select a dependent variable\",\n        choices = c(\n          \"Trust in country's parliament\" = \"trust_parliament\",\n          \"Trust in the legal system\" = \"trust_legal\",\n          \"Trust in the police\" = \"trust_police\",\n          \"Trust in politicians\" = \"trust_politicians\",\n          \"Trust in political parties\" = \"trust_parties\",\n          \"Trust in the European Parliament\" = \"trust_eu\",\n          \"Trust in the United Nations\" = \"trust_un\"\n        )\n      ),\n      \n      ### select a variable ----\n      selectInput(\n        \"yvar\",\n        label = \"Select an independent variable\",\n        choices = c(\n          \"Placement on the left-right scale\" = \"left_right\",\n          \"Age\" = \"age\",\n          \"Feeling about household's income\" = \"income_feeling\",\n          \"How often do you use the internet?\" = \"internet_use\",\n          \"How happy are you?\" = \"happiness\"\n        )\n      ),\n      \n      ### select a country ----\n      selectizeInput(\n        \"countries\",\n        label = \"Filter by country\",\n        choices = unique(ess$country),\n        selected = \"FR\",\n        multiple = TRUE\n      ),\n      \n      ### filter values ----\n      sliderInput(\n        \"range\",\n        label = \"Set a value range\",\n        min = min(ess$trust_parliament, na.rm = TRUE),\n        max = max(ess$trust_parliament, na.rm = TRUE),\n        value = range(ess$trust_parliament, na.rm = TRUE),\n        step = 1\n      )\n    ),\n    \n    ## Main panel ----\n    mainPanel(\n      tabsetPanel(\n        type = \"tabs\",\n        \n        ### Table tab ----\n        tabPanel(\n          title = \"Table\",\n          div(\n            style = \"height: 600px; overflow-y: auto;\",\n            tableOutput(\"table\")\n          )\n        ),\n        \n        ### Plot tab ----\n        tabPanel(\n          title = \"Plot\",\n          plotlyOutput(\"plot\", height = 600)\n        ),\n        \n        ### Map tab ----\n        tabPanel(\n          title = \"Map\",\n          leafletOutput(\"map\", height = 600)\n        )\n      )\n    )\n  )\n)\n\n\n# Server ----\nserver &lt;- function(input, output, session) {\n  # update slider ----\n  observe({\n    var &lt;- na.omit(ess[[input$xvar]])\n    is_ordered &lt;- is.ordered(var)\n    var &lt;- as.numeric(var)\n    updateSliderInput(\n      inputId = \"range\",\n      min = min(var),\n      max = max(var),\n      value = range(var),\n      step = if (is_ordered) 1\n    )\n  }) %&gt;%\n    bindEvent(input$xvar)\n  \n  # filter data ----\n  filtered &lt;- reactive({\n    req(input$countries, cancelOutput = TRUE)\n    \n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    range &lt;- input$range\n    \n    # select country\n    ess &lt;- ess[ess$country %in% input$countries, ]\n    \n    # select variable\n    ess &lt;- ess[c(\"idno\", \"country\", xvar, yvar)]\n    \n    # apply range\n    ess &lt;- ess[ess[[xvar]] &gt; range[1] & ess[[xvar]] &lt; range[2], ]\n    ess\n  })\n  \n  # render table ----\n  output$table &lt;- renderTable({\n    filtered()\n  }, height = 400)\n  \n  # render plot ----\n  output$plot &lt;- renderPlotly({\n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    plot_data &lt;- filtered() %&gt;%\n      drop_na() %&gt;%\n      mutate(across(where(is.numeric), .fns = as.ordered))\n    \n    p &lt;- ggplot(plot_data) +\n      aes(x = .data[[xvar]], y = .data[[yvar]], group = .data[[xvar]]) +\n      geom_violin(fill = \"lightblue\", show.legend = FALSE) +\n      theme_classic()\n    ggplotly(p)\n  })\n}\n\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "06-visualization.html#leaflet",
    "href": "06-visualization.html#leaflet",
    "title": "Modelling and visualizing data",
    "section": "5 Leaflet",
    "text": "5 Leaflet\n\nLeaflet is an open-source JavaScript library to create interactive maps\nLike plotly it is one of the most popular applications for interactive mapping\nThe leaflet package makes it easy to create interactive maps directly in R\nLeaflet is very light-weight! This is good, but it’s also bad because it means extra work.\n\n\n5.1 Leaflet’s grammar of graphics\n\nJust like ggplot2 and plotly, leaflet is inspired by a grammar of graphics\nA map canvas can be created using the leaflet() function\nAdditional elements are added through pipes %&gt;% or |&gt;\nPalettes are created using the leaflet::color function family\n\n\n1leaflet(ess_geo) %&gt;%\n2  addTiles() %&gt;%\n3  addPolygons(\n    weight = 2,\n    opacity = 1,\n    fillOpacity = 0.7\n4  )\n\n\n1\n\nLeaflet supports four types of palettes: Bin, Quantile, Factor, and Numeric. In this case we have a numeric variable.\n\n2\n\nleaflet() is the powerhorse of the leaflet package. It is comparable to ggplot() or plot_ly().\n\n3\n\naddTiles() adds a background map.\n\n4\n\naddPolygons() adds polygons to the map. This function accepts several visual arguments to control, for example, the line width and opacity.\n\n\n\n\n\n\n\n\n\n\n5.2 Adding data\n\nTo add colorized data, we must first define how to color this data\nLeaflet defines four color functions to create a palette:\n\nNumeric\nBin\nQuantile\nFactor\n\nDepending on the data\n\n\n1pal &lt;- colorNumeric(\"YlOrRd\", domain = NULL)\n\nleaflet(ess_geo) %&gt;%\n  addTiles() %&gt;%\n  addPolygons(\n2    fillColor = pal(ess_geo[[\"trust_eu\"]]),\n    weight = 2,\n    opacity = 1,\n    color = \"white\",\n    fillOpacity = 0.7\n  )\n\n\n1\n\nDefine a numeric palette with a gradient Yellow-Orange-Red\n\n2\n\nApply this palette to the data to generate color values\n\n\n\n\n\n\n\n\n\n\n5.3 Adding a legend\n\nJust like adding data, adding legends has to be done manually\nThe addLegend() function\n\n\npal &lt;- colorNumeric(\"YlOrRd\", domain = NULL)\n\nleaflet(ess_geo) %&gt;%\n  addTiles() %&gt;%\n  addPolygons(\n    fillColor = pal(ess_geo[[\"trust_eu\"]]),\n    weight = 2,\n    opacity = 1,\n    color = \"white\",\n    fillOpacity = 0.7\n  ) %&gt;%\n  addLegend(\n    position = \"bottomleft\",\n    pal = pal,\n    values = ess_geo[[\"trust_eu\"]],\n    opacity = 0.7,\n    title = \"Trust in the EU\"\n  )\n\n\n\n\n\n\n\n5.4 Adding interactivity\n\nRight now, the leaflet map cannot be interacted with\nInteractivity has to be added manually\nTwo new features:\n\nhighlightOptions adds a highlight effect when hovering over a polygon\nlabels adds labels that appear when hovering over a polygon\n\nCaveats:\n\nLabels have to be formatted manually, as per usual\nBeautifully styled labels require some knowledge of HTML and CSS\n\n\n\n1labels &lt;- sprintf(\n  \"&lt;strong&gt;%s&lt;/strong&gt;&lt;br&gt;%s\",\n  ess_geo$country,\n  ess_geo$trust_eu\n)\n2labels &lt;- lapply(labels, HTML)\n\npal &lt;- colorNumeric(\"YlOrRd\", domain = NULL)\n\nleaflet(ess_geo) %&gt;%\n  addTiles() %&gt;%\n  addPolygons(\n    fillColor = pal(ess_geo[[\"trust_eu\"]]),\n    weight = 2,\n    opacity = 1,\n    color = \"white\",\n    fillOpacity = 0.7,\n3    highlightOptions = highlightOptions(\n      weight = 2,\n      color = \"#666\",\n      fillOpacity = 0.7,\n      bringToFront = TRUE\n    ),\n    label = labels\n  ) %&gt;%\n  addLegend(\n    position = \"bottomleft\",\n    pal = pal,\n    values = ess_geo[[\"trust_eu\"]],\n    opacity = 0.7,\n    title = \"Trust in the EU\"\n  )\n\n\n1\n\nLabels need to be created manually. Here, I generate very essential labels containing the country in bold and the trust value below it.\n\n2\n\nLabels must be explicitly classified as HTML code. This can be done using the shiny::HTML function.\n\n3\n\nInteractivity is then simply added through the label and highlightOptions arguments to addPolygons().\n\n\n\n\n\n\n\n\n\n\n5.5 Leaflet and Shiny\n\nAgain, Leaflet does not produce static plots and thus cannot be served by plotOutput and renderPlot\nThe leaflet package defines two functions:\n\nleafletOutput to create the canvas in the UI\nrenderLeaflet to render the Leaflet widget in the server function\n\n\nUI:\n\nmainPanel(\n  tabsetPanel(\n    type = \"tabs\",\n    \n    ### Table tab ----\n    tabPanel(\n      title = \"Table\",\n      div(\n        style = \"height: 600px; overflow-y: auto;\",\n        tableOutput(\"table\")\n      )\n    ),\n    \n    ### Plot tab ----\n    tabPanel(\n      title = \"Plot\",\n      plotlyOutput(\"plot\", height = 600)\n    ),\n    \n    ### Map tab ----\n    tabPanel(\n      title = \"Map\",\n      leafletOutput(\"map\", height = 600)\n    )\n  )\n)\n\nServer:\n\noutput$map &lt;- renderLeaflet({\n  var &lt;- input$xvar\n  plot_data &lt;- ess_geo[c(\"country\", var)]\n  \n  # create labels with a bold title and a body\n  labels &lt;- sprintf(\n    \"&lt;strong&gt;%s&lt;/strong&gt;&lt;br&gt;%s\",\n    plot_data$country,\n    plot_data[[var]]\n  )\n  labels &lt;- lapply(labels, HTML)\n  \n  # create a palette for numerics and ordinals\n  if (is.ordered(plot_data[[var]])) {\n    pal &lt;- colorFactor(\"YlOrRd\", domain = NULL)\n  } else {\n    pal &lt;- colorNumeric(\"YlOrRd\", domain = NULL)\n  }\n\n  # construct leaflet canvas\n  leaflet(plot_data) %&gt;%\n    # add base map\n    addTiles() %&gt;%\n    # add choropleths\n    addPolygons(\n      fillColor = pal(plot_data[[var]]),\n      weight = 2,\n      opacity = 1,\n      color = \"white\",\n      fillOpacity = 0.7,\n      # highlight polygons on hover\n      highlightOptions = highlightOptions(\n        weight = 2,\n        color = \"#666\",\n        fillOpacity = 0.7,\n        bringToFront = TRUE\n      ),\n      label = labels\n    ) %&gt;%\n    # add a legend\n    addLegend(\n      position = \"bottomleft\",\n      pal = pal,\n      values = plot_data[[var]],\n      opacity = 0.7,\n      title = var\n    )\n})\n\n\n\nComplete code (important lines are highlighted)\nlibrary(tidyverse)\nlibrary(shiny)\nlibrary(plotly)\nlibrary(leaflet)\nlibrary(haven)\n\ness &lt;- readRDS(\"ess_trust.rds\")\ness_geo &lt;- readRDS(\"ess_trust_geo.rds\")\n\n# UI ----\nui &lt;- fluidPage(\n  titlePanel(\"European Social Survey - round 10\"),\n  \n  ## Sidebar ----\n  sidebarLayout(\n    sidebarPanel(\n      ### select dependent variable\n      selectInput(\n        \"xvar\",\n        label = \"Select a dependent variable\",\n        choices = c(\n          \"Trust in country's parliament\" = \"trust_parliament\",\n          \"Trust in the legal system\" = \"trust_legal\",\n          \"Trust in the police\" = \"trust_police\",\n          \"Trust in politicians\" = \"trust_politicians\",\n          \"Trust in political parties\" = \"trust_parties\",\n          \"Trust in the European Parliament\" = \"trust_eu\",\n          \"Trust in the United Nations\" = \"trust_un\"\n        )\n      ),\n      \n      ### select a variable ----\n      selectInput(\n        \"yvar\",\n        label = \"Select an independent variable\",\n        choices = c(\n          \"Placement on the left-right scale\" = \"left_right\",\n          \"Age\" = \"age\",\n          \"Feeling about household's income\" = \"income_feeling\",\n          \"How often do you use the internet?\" = \"internet_use\",\n          \"How happy are you?\" = \"happiness\"\n        )\n      ),\n      \n      ### select a country ----\n      selectizeInput(\n        \"countries\",\n        label = \"Filter by country\",\n        choices = unique(ess$country),\n        selected = \"FR\",\n        multiple = TRUE\n      ),\n      \n      ### filter values ----\n      sliderInput(\n        \"range\",\n        label = \"Set a value range\",\n        min = min(ess$trust_parliament, na.rm = TRUE),\n        max = max(ess$trust_parliament, na.rm = TRUE),\n        value = range(ess$trust_parliament, na.rm = TRUE),\n        step = 1\n      )\n    ),\n    \n    ## Main panel ----\n    mainPanel(\n      tabsetPanel(\n        type = \"tabs\",\n        \n        ### Table tab ----\n        tabPanel(\n          title = \"Table\",\n          div(\n            style = \"height: 600px; overflow-y: auto;\",\n            tableOutput(\"table\")\n          )\n        ),\n        \n        ### Plot tab ----\n        tabPanel(\n          title = \"Plot\",\n          plotlyOutput(\"plot\", height = 600)\n        ),\n        \n        ### Map tab ----\n        tabPanel(\n          title = \"Map\",\n          leafletOutput(\"map\", height = 600)\n        )\n      )\n    )\n  )\n)\n\n\n# Server ----\nserver &lt;- function(input, output, session) {\n  # update slider ----\n  observe({\n    var &lt;- na.omit(ess[[input$xvar]])\n    is_ordered &lt;- is.ordered(var)\n    var &lt;- as.numeric(var)\n    updateSliderInput(\n      inputId = \"range\",\n      min = min(var),\n      max = max(var),\n      value = range(var),\n      step = if (is_ordered) 1\n    )\n  }) %&gt;%\n    bindEvent(input$xvar)\n  \n  # filter data ----\n  filtered &lt;- reactive({\n    req(input$countries, cancelOutput = TRUE)\n    \n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    range &lt;- input$range\n    \n    # select country\n    ess &lt;- ess[ess$country %in% input$countries, ]\n    \n    # select variable\n    ess &lt;- ess[c(\"idno\", \"country\", xvar, yvar)]\n    \n    # apply range\n    ess &lt;- ess[ess[[xvar]] &gt; range[1] & ess[[xvar]] &lt; range[2], ]\n    ess\n  })\n  \n  # render table ----\n  output$table &lt;- renderTable({\n    filtered()\n  }, height = 400)\n  \n  # render plot ----\n  output$plot &lt;- renderPlotly({\n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    plot_data &lt;- filtered() %&gt;%\n      drop_na() %&gt;%\n      mutate(across(where(is.numeric), .fns = as.ordered))\n    \n    p &lt;- ggplot(plot_data) +\n      aes(x = .data[[xvar]], y = .data[[yvar]], group = .data[[xvar]]) +\n      geom_violin(fill = \"lightblue\", show.legend = FALSE) +\n      theme_classic()\n    ggplotly(p)\n  })\n  \n  # render map ----\n  output$map &lt;- renderLeaflet({\n    var &lt;- input$xvar\n    ess_geo &lt;- ess_geo[c(\"country\", var)]\n    \n    # create labels with a bold title and a body\n    labels &lt;- sprintf(\n      \"&lt;strong&gt;%s&lt;/strong&gt;&lt;br&gt;%s\",\n      ess_geo$country,\n      ess_geo[[var]]\n    )\n    labels &lt;- lapply(labels, HTML)\n    \n    # create a palette for numerics and ordinals\n    pal &lt;- colorNumeric(\"YlOrRd\", domain = NULL)\n    \n    # construct leaflet canvas\n    leaflet(ess_geo) %&gt;%\n      # add base map\n      addTiles() %&gt;%\n      # add choropleths\n      addPolygons(\n        fillColor = pal(ess_geo[[var]]),\n        weight = 2,\n        opacity = 1,\n        color = \"white\",\n        fillOpacity = 0.7,\n        # highlight polygons on hover\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"#666\",\n          fillOpacity = 0.7,\n          bringToFront = TRUE\n        ),\n        label = labels\n      ) %&gt;%\n      # add a legend\n      addLegend(\n        position = \"bottomleft\",\n        pal = pal,\n        values = ess_geo[[var]],\n        opacity = 0.7,\n        title = var\n      )\n  })\n}\n\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "06-visualization.html#reactivity",
    "href": "06-visualization.html#reactivity",
    "title": "Modelling and visualizing data",
    "section": "6 Reactivity",
    "text": "6 Reactivity\n\nWe already covered Shiny’s reactivity quite extensively\nRecall:\n\nA user changes an input\nThe server processes that input\nThe UI updates\n\nIt turns out, most plotting systems in Shiny support what we will call “plot events”\n\n\n6.1 Plot events\n\nA plot event is triggered by a widget if a user interacts with it\nIn a sense, plot events are a cross-over of interactivity and reactivity\nA plot event is hidden, i.e. it does not have to be explicitly defined in the UI – it’s just created automatically on the go.\nBy far not all widgets define plot events, but the most important plotting frameworks do:\n\nplotly defines a plethora of plot events through the event_data function\nleaflet automatically creates a number of plot events for each map\nEven basic plotting supports plot events through additional arguments to plotOutput\n\nTo illustrate plot events, we will use leaflet events\n\n\n\n6.2 Leaflet’s plot events\n\nLeaflet events are accessed like so:\n\n\ninput$&lt;Map ID&gt;_&lt;Object type&gt;_&lt;Event type&gt;\n\n\nMap ID refers to the input ID given to the leaflet map\n\n\n6.2.1 Leaflet object types\n\n“Object type” refers to the geometry, which can be one of:\n\nmarker for points\nshape for polygons and lines\ngeojson and topojson for data that was passed in GeoJSON or TopoJSON format\n\n\n\n\n6.2.2 Leaflet event types\n\n“Event type” refers to the action that is performed on the geometry to trigger the event, one of:\n\nclick\nmouseover\nmouseout\n\n\n\n\n6.2.3 Other events\n\nAdditionally, Leaflet has some more general events:\n\ninput$&lt;Map ID&gt;_click triggers when the background of the map is clicked\ninput$&lt;Map ID&gt;_bounds provides the bounding box of the current view\ninput$&lt;Map ID&gt;_zoom provides the current zoom level\ninput$&lt;Map ID&gt;_center provides the center point of the current view",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "06-visualization.html#proxies",
    "href": "06-visualization.html#proxies",
    "title": "Modelling and visualizing data",
    "section": "7 Proxies",
    "text": "7 Proxies\n\nSimilar to plot events, most Shiny plotting frameworks implement what is called proxies\nA proxy is a representation of an existing widget\nSuch proxies can be manipulated in place, i.e. they do not need to be re-rendered\n\n\n7.1 Proxies in Shiny frameworks\n\nMany Shiny extensions provide proxy functions:\n\nDT::dataTableProxy()\nplotly::plotlyProxy()\nleaflet::leafletProxy()\n\n\n\n\n7.2 Proxy workflow\n\nInitialize an isolated output widget (i.e., no dependencies) / isolate()\nCreate an observer that updates input dependencies / observe()\nInvalidate an input\nRemove existing features and add new ones\n\n\n\n\nReactive graph for proxies\n\n\n\n\n7.3 Manipulating proxies\n\nProxies are best combined with functions that add to, remove to, or clear a widget\nThe following table summarizes these functions\n\n\n\n\n\n\n\n\n\n\nCategory\nAdd functions\nRemove\nClear\n\n\n\n\ntile\naddTiles(), addProviderTiles()\nremoveTiles()\nclearTiles()\n\n\nmarker\naddMarkers(), addCircleMarkers()\nremoveMarker()\nclearMarkers()\n\n\nshape\naddPolygons(), addPolylines(), addCircles(), addRectangles()\nremoveShape()\nclearShapes()\n\n\ngeojson\naddGeoJSON()\nremoveGeoJSON()\nclearGeoJSON()\n\n\ntopojson\naddTopoJSON()\nremoveTopoJSON()\nclearTopoJSON()\n\n\ncontrol\naddControl()\nremoveControl()\nclearControls()\n\n\n\n\n\n7.4 Synthesis: Plot events, proxies, and plot manipulation\n\nProxies unleash their potential when combined with plot events and plot manipulation:\nThis combination allows users to manipulate plots themselves (e.g. adding or removing elements)\nThe following example makes use of all three concepts to create a map that can add and remove simple markers\n\nPlot events: input$map_click and input$map_marker_click to register where markers should be added and removed\nleafletProxy(\"map\"): A proxy is needed to manipulate the map without resetting the view\naddMarkers and removeMarker to add and remove markers\n\n\n\nui &lt;- fluidPage(\n  leafletOutput(\"map\")\n)\n\nserver &lt;- function(input, output, session) {\n\n  # initial map render\n1  output$map &lt;- renderLeaflet({\n    leaflet() %&gt;%\n      addTiles() %&gt;%\n      setView(lng = 7, lat = 52, zoom = 7)\n  })\n\n  # add marker\n2  observe({\n    click &lt;- input$map_click\n    leafletProxy(\"map\") %&gt;%\n      addMarkers(lng = click$lng, lat = click$lat, layerId = toString(click))\n  }) %&gt;%\n    bindEvent(input$map_click)\n\n  # remove marker\n3  observe({\n    click &lt;- input$map_marker_click\n    leafletProxy(\"map\") %&gt;%\n      removeMarker(click$id)\n  }) %&gt;%\n    bindEvent(input$map_marker_click)\n}\n\nrunApp(shinyApp(ui, server))\n\n\n1\n\nRender the leaflet map once. Note that the render function does not take any dependencies and is thus only run once.\n\n2\n\nAdd a marker every time the map is clicked somewhere. Note that the marker is added not to a new map, but to a proxy of the map that is already rendered.\n\n3\n\nRemove a marker that is clicked. Note how the observer is only triggered when a marker is clicked, i.e. when input$map_marker_click is triggered.",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "06-visualization.html#exercise-session",
    "href": "06-visualization.html#exercise-session",
    "title": "Modelling and visualizing data",
    "section": "8 Exercise session",
    "text": "8 Exercise session\n\n8.1 Plotly\n\n\n\n\n\n\nExercise 1.1\n\n\n\nAdd a new tab to the app. Add an output canvas to the UI and a render function to the server function such that the new tab is able to display an interactive plotly widget.\n\n\n\n\n\n\n\n\nSolution 1.2\n\n\n\n\n\nIn the UI, add a new tabPanel() to the tabsetPanel().\n\nmainPanel(\n  tabsetPanel(\n    type = \"tabs\",\n    \n    ### Table tab ----\n    tabPanel(\n      title = \"Table\",\n      div(\n        style = \"height: 600px; overflow-y: auto;\",\n        tableOutput(\"table\")\n      )\n    ),\n    \n    ### Plot tab ----\n    tabPanel(\n      title = \"Plot\",\n      plotlyOutput(\"plot\", height = 600)\n    ),\n    \n    ### Map tab ----\n    tabPanel(\n      title = \"Map\",\n      leafletOutput(\"map\", height = 600)\n    ),\n\n    ### New tab ----\n    tabPanel(\n      title = \"Histogram\",\n      plotlyOutput(\"hist\", height = 600)\n    )\n  )\n)\n\nIn the server function, add renderPlotly and assign it to the output object.\n\noutput$hist &lt;- renderPlotly({\n\n})\n\n\n\nComplete code (important lines are highlighted)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(shiny)\nlibrary(plotly)\nlibrary(leaflet)\nlibrary(haven)\n\ness &lt;- readRDS(\"data/ess_trust.rds\")\ness_geo &lt;- readRDS(\"data/ess_trust_geo.rds\")\n\n# UI ----\nui &lt;- fluidPage(\n  titlePanel(\"European Social Survey - round 10\"),\n  \n  ## Sidebar ----\n  sidebarLayout(\n    sidebarPanel(\n      ### select dependent variable\n      selectInput(\n        \"xvar\",\n        label = \"Select a dependent variable\",\n        choices = c(\n          \"Trust in country's parliament\" = \"trust_parliament\",\n          \"Trust in the legal system\" = \"trust_legal\",\n          \"Trust in the police\" = \"trust_police\",\n          \"Trust in politicians\" = \"trust_politicians\",\n          \"Trust in political parties\" = \"trust_parties\",\n          \"Trust in the European Parliament\" = \"trust_eu\",\n          \"Trust in the United Nations\" = \"trust_un\"\n        )\n      ),\n      \n      ### select a variable ----\n      selectInput(\n        \"yvar\",\n        label = \"Select an independent variable\",\n        choices = c(\n          \"Placement on the left-right scale\" = \"left_right\",\n          \"Age\" = \"age\",\n          \"Feeling about household's income\" = \"income_feeling\",\n          \"How often do you use the internet?\" = \"internet_use\",\n          \"How happy are you?\" = \"happiness\"\n        )\n      ),\n      \n      ### select a country ----\n      selectizeInput(\n        \"countries\",\n        label = \"Filter by country\",\n        choices = unique(ess$country),\n        selected = \"FR\",\n        multiple = TRUE\n      ),\n      \n      ### filter values ----\n      sliderInput(\n        \"range\",\n        label = \"Set a value range\",\n        min = min(ess$trust_parliament, na.rm = TRUE),\n        max = max(ess$trust_parliament, na.rm = TRUE),\n        value = range(ess$trust_parliament, na.rm = TRUE),\n        step = 1\n      )\n    ),\n    \n    ## Main panel ----\n    mainPanel(\n      tabsetPanel(\n        type = \"tabs\",\n        \n        ### Table tab ----\n        tabPanel(\n          title = \"Table\",\n          div(\n            style = \"height: 600px; overflow-y: auto;\",\n            tableOutput(\"table\")\n          )\n        ),\n        \n        ### Plot tab ----\n        tabPanel(\n          title = \"Plot\",\n          plotlyOutput(\"plot\", height = 600)\n        ),\n        \n        ### Map tab ----\n        tabPanel(\n          title = \"Map\",\n          leafletOutput(\"map\", height = 600)\n        ),\n\n        ### New tab ----\n        tabPanel(\n          title = \"Histogram\",\n          plotlyOutput(\"hist\", height = 600)\n        )\n      )\n    )\n  )\n)\n\n\n# Server ----\nserver &lt;- function(input, output, session) {\n  # update slider ----\n  observe({\n    var &lt;- na.omit(ess[[input$xvar]])\n    is_ordered &lt;- is.ordered(var)\n    var &lt;- as.numeric(var)\n    updateSliderInput(\n      inputId = \"range\",\n      min = min(var),\n      max = max(var),\n      value = range(var),\n      step = if (is_ordered) 1\n    )\n  }) %&gt;%\n    bindEvent(input$xvar)\n  \n  # filter data ----\n  filtered &lt;- reactive({\n    req(input$countries, cancelOutput = TRUE)\n    \n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    range &lt;- input$range\n    \n    # select country\n    ess &lt;- ess[ess$country %in% input$countries, ]\n    \n    # select variable\n    ess &lt;- ess[c(\"idno\", \"country\", xvar, yvar)]\n    \n    # apply range\n    ess &lt;- ess[ess[[xvar]] &gt; range[1] & ess[[xvar]] &lt; range[2], ]\n    ess\n  })\n  \n  # render table ----\n  output$table &lt;- renderTable({\n    filtered()\n  }, height = 400)\n  \n  # render plot ----\n  output$plot &lt;- renderPlotly({\n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    plot_data &lt;- filtered() %&gt;%\n      drop_na() %&gt;%\n      mutate(across(where(is.numeric), .fns = as.ordered))\n    \n    p &lt;- ggplot(plot_data) +\n      aes(x = .data[[xvar]], y = .data[[yvar]], group = .data[[xvar]]) +\n      geom_violin(fill = \"lightblue\", show.legend = FALSE) +\n      theme_classic()\n    ggplotly(p)\n  })\n  \n  # render map ----\n  output$map &lt;- renderLeaflet({\n    var &lt;- input$xvar\n    ess_geo &lt;- ess_geo[c(\"country\", var)]\n    \n    # create labels with a bold title and a body\n    labels &lt;- sprintf(\n      \"&lt;strong&gt;%s&lt;/strong&gt;&lt;br&gt;%s\",\n      ess_geo$country,\n      ess_geo[[var]]\n    )\n    labels &lt;- lapply(labels, HTML)\n    \n    # create a palette for numerics and ordinals\n    if (is.ordered(ess_geo[[var]])) {\n      pal &lt;- colorFactor(\"YlOrRd\", domain = NULL)\n    } else {\n      pal &lt;- colorNumeric(\"YlOrRd\", domain = NULL)\n    }\n    \n    # construct leaflet canvas\n    leaflet(ess_geo) %&gt;%\n      # add base map\n      addTiles() %&gt;%\n      # add choropleths\n      addPolygons(\n        fillColor = pal(ess_geo[[var]]),\n        weight = 2,\n        opacity = 1,\n        color = \"white\",\n        fillOpacity = 0.7,\n        # highlight polygons on hover\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"#666\",\n          fillOpacity = 0.7,\n          bringToFront = TRUE\n        ),\n        label = labels\n      ) %&gt;%\n      # add a legend\n      addLegend(\n        position = \"bottomleft\",\n        pal = pal,\n        values = ess_geo[[var]],\n        opacity = 0.7,\n        title = var\n      )\n  })\n  \n  output$hist &lt;- renderPlotly({\n    \n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n\n\n\n\n\n\n\n\n\n\nExercise 1.2\n\n\n\nIn section 3, we implemented a bivariate plot of the ESS data. For this exercise, create a univariate plotly plot of one of the trust variables. In the solution, I will be using a histogram, but this could also be a stacked bar chart, a kernel density curve, etc. The idea is to get a quick overview of the statistical distribution of a trust variable.\nYou can do this either through plotly’s own grammar (plot_ly()) or by converting a ggplot (ggplotly()). In the solutions, I will be using plotly though.\nNote that, due to a bug in plotly, the labels of the ESS dataset have to be removed from the dataset. This can be done either by casting as.numeric on a variable or by zapping labels with haven::zap_labels().\n\n\n\n\n\n\n\n\nSolution 1.2\n\n\n\n\n\nThe following solution implements a histogram of the trust_parliament variable.\n\ness &lt;- readRDS(\"data/ess_trust.rds\")\n\nplot_ly(ess, x = ~as.numeric(trust_parliament)) %&gt;%\n  add_histogram()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 1.3\n\n\n\nCustomize the plotly plot according to the following requests:\n\nChange the axis titles to something useful\nDecrease the opacity to 70%\nRemove the modebar\nIncrease the gap between histogram bars to 20%.\nChange the bar color to green\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nRecall that plotly can be customized using the layout, style, and config functions.\nTo find out about options specific to a plotly histogram, call plotly::schema() and navigate to traces -&gt; histogram.\nPlotly can be very confusing and there is no shame in using google!\n\n\n\n\n\n\n\n\n\nSolution 1.3\n\n\n\n\n\n\nplot_ly(ess) %&gt;%\n  add_histogram(x = ~as.numeric(trust_parliament)) %&gt;%\n\n  # everything that changes the overall theming goes here\n  layout(\n      xaxis = list(title = \"Trust in the national parliament\"),\n      yaxis = list(title = \"Observations\"),\n      bargap = 0.2\n  ) %&gt;%\n\n  # everything that changes the data- and plot-specific theming goes here\n  style(opacity = 0.7, marker = list(color = \"green\")) %&gt;%\n\n  # everything that changes the interactivity goes here\n  config(displayModeBar = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 1.4\n\n\n\nImplement the plot from exercise 1.3 in the Shiny app. Instead of plotting a single static variable, link the histogram to the input selector for the dependent variable (input$xvar) such that choosing a different trust variable updates the histogram.\n\n\n\n\n\n\n\n\nSolution 1.4\n\n\n\n\n\n\noutput$hist &lt;- renderPlotly({\n  plot_ly(filtered()) %&gt;%\n  add_histogram(x = as.numeric(ess[input$xvar])) %&gt;%\n\n  # everything that changes the overall theming goes here\n  layout(\n      xaxis = list(title = \"Trust in the national parliament\"),\n      yaxis = list(title = \"Observations\"),\n      bargap = 0.2\n  ) %&gt;%\n\n  # everything that changes the data- and plot-specific theming goes here\n  style(opacity = 0.7, marker = list(color = \"green\")) %&gt;%\n\n  # everything that changes the interactivity goes here\n  config(displayModeBar = FALSE)\n})\n\n\n\nComplete code (important lines are highlighted)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(shiny)\nlibrary(plotly)\nlibrary(leaflet)\nlibrary(haven)\n\ness &lt;- readRDS(\"ess_trust.rds\")\ness_geo &lt;- readRDS(\"ess_trust_geo.rds\")\n\n# UI ----\nui &lt;- fluidPage(\n  titlePanel(\"European Social Survey - round 10\"),\n  \n  ## Sidebar ----\n  sidebarLayout(\n    sidebarPanel(\n      ### select dependent variable\n      selectInput(\n        \"xvar\",\n        label = \"Select a dependent variable\",\n        choices = c(\n          \"Trust in country's parliament\" = \"trust_parliament\",\n          \"Trust in the legal system\" = \"trust_legal\",\n          \"Trust in the police\" = \"trust_police\",\n          \"Trust in politicians\" = \"trust_politicians\",\n          \"Trust in political parties\" = \"trust_parties\",\n          \"Trust in the European Parliament\" = \"trust_eu\",\n          \"Trust in the United Nations\" = \"trust_un\"\n        )\n      ),\n      \n      ### select a variable ----\n      selectInput(\n        \"yvar\",\n        label = \"Select an independent variable\",\n        choices = c(\n          \"Placement on the left-right scale\" = \"left_right\",\n          \"Age\" = \"age\",\n          \"Feeling about household's income\" = \"income_feeling\",\n          \"How often do you use the internet?\" = \"internet_use\",\n          \"How happy are you?\" = \"happiness\"\n        )\n      ),\n      \n      ### select a country ----\n      selectizeInput(\n        \"countries\",\n        label = \"Filter by country\",\n        choices = unique(ess$country),\n        selected = \"FR\",\n        multiple = TRUE\n      ),\n      \n      ### filter values ----\n      sliderInput(\n        \"range\",\n        label = \"Set a value range\",\n        min = min(ess$trust_parliament, na.rm = TRUE),\n        max = max(ess$trust_parliament, na.rm = TRUE),\n        value = range(ess$trust_parliament, na.rm = TRUE),\n        step = 1\n      )\n    ),\n    \n    ## Main panel ----\n    mainPanel(\n      tabsetPanel(\n        type = \"tabs\",\n        \n        ### Table tab ----\n        tabPanel(\n          title = \"Table\",\n          div(\n            style = \"height: 600px; overflow-y: auto;\",\n            tableOutput(\"table\")\n          )\n        ),\n        \n        ### Plot tab ----\n        tabPanel(\n          title = \"Plot\",\n          plotlyOutput(\"plot\", height = 600)\n        ),\n        \n        ### Map tab ----\n        tabPanel(\n          title = \"Map\",\n          leafletOutput(\"map\", height = 600)\n        ),\n        \n        ### New tab ----\n        tabPanel(\n          title = \"Histogram\",\n          plotlyOutput(\"hist\", height = 600)\n        )\n      )\n    )\n  )\n)\n\n\n# Server ----\nserver &lt;- function(input, output, session) {\n  # update slider ----\n  observe({\n    var &lt;- na.omit(ess[[input$xvar]])\n    is_ordered &lt;- is.ordered(var)\n    var &lt;- as.numeric(var)\n    updateSliderInput(\n      inputId = \"range\",\n      min = min(var),\n      max = max(var),\n      value = range(var),\n      step = if (is_ordered) 1\n    )\n  }) %&gt;%\n    bindEvent(input$xvar)\n  \n  # filter data ----\n  filtered &lt;- reactive({\n    req(input$countries, cancelOutput = TRUE)\n    \n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    range &lt;- input$range\n    \n    # select country\n    ess &lt;- ess[ess$country %in% input$countries, ]\n    \n    # select variable\n    ess &lt;- ess[c(\"idno\", \"country\", xvar, yvar)]\n    \n    # apply range\n    ess &lt;- ess[ess[[xvar]] &gt; range[1] & ess[[xvar]] &lt; range[2], ]\n    ess\n  })\n  \n  # render table ----\n  output$table &lt;- renderTable({\n    filtered()\n  }, height = 400)\n  \n  # render plot ----\n  output$plot &lt;- renderPlotly({\n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    plot_data &lt;- filtered() %&gt;%\n      drop_na() %&gt;%\n      mutate(across(where(is.numeric), .fns = as.ordered))\n    \n    p &lt;- ggplot(plot_data) +\n      aes(x = .data[[xvar]], y = .data[[yvar]], group = .data[[xvar]]) +\n      geom_violin(fill = \"lightblue\", show.legend = FALSE) +\n      theme_classic()\n    ggplotly(p)\n  })\n  \n  # render map ----\n  output$map &lt;- renderLeaflet({\n    var &lt;- input$xvar\n    ess_geo &lt;- ess_geo[c(\"country\", var)]\n    \n    # create labels with a bold title and a body\n    labels &lt;- sprintf(\n      \"&lt;strong&gt;%s&lt;/strong&gt;&lt;br&gt;%s\",\n      ess_geo$country,\n      ess_geo[[var]]\n    )\n    labels &lt;- lapply(labels, HTML)\n    \n    # create a palette for numerics and ordinals\n    if (is.ordered(ess_geo[[var]])) {\n      pal &lt;- colorFactor(\"YlOrRd\", domain = NULL)\n    } else {\n      pal &lt;- colorNumeric(\"YlOrRd\", domain = NULL)\n    }\n    \n    # construct leaflet canvas\n    leaflet(ess_geo) %&gt;%\n      # add base map\n      addTiles() %&gt;%\n      # add choropleths\n      addPolygons(\n        fillColor = pal(ess_geo[[var]]),\n        weight = 2,\n        opacity = 1,\n        color = \"white\",\n        fillOpacity = 0.7,\n        # highlight polygons on hover\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"#666\",\n          fillOpacity = 0.7,\n          bringToFront = TRUE\n        ),\n        label = labels\n      ) %&gt;%\n      # add a legend\n      addLegend(\n        position = \"bottomleft\",\n        pal = pal,\n        values = ess_geo[[var]],\n        opacity = 0.7,\n        title = var\n      )\n  })\n  \n  output$hist &lt;- renderPlotly({\n    plot_ly(filtered()) %&gt;%\n      add_histogram(x = as.numeric(ess[[input$xvar]])) %&gt;%\n      \n      # everything that changes the overall theming goes here\n      layout(\n        xaxis = list(title = input$xvar),\n        yaxis = list(title = \"Observations\"),\n        bargap = 0.2\n      ) %&gt;%\n      \n      # everything that changes the data- and plot-specific theming goes here\n      style(opacity = 0.7, marker = list(color = \"green\")) %&gt;%\n      \n      # everything that changes the interactivity goes here\n      config(displayModeBar = FALSE)\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n\n\n\n\n\n\n8.2 Leaflet\n\n\n\n\n\n\nExercise 2.1\n\n\n\nAdd a new tab to the app. Add an output canvas to the UI and a render function to the server function such that the new tab is able to display an interactive leaflet widget.\n\n\n\n\n\n\n\n\nSolution 2.1\n\n\n\n\n\nIn the UI, add a new tabPanel() to the tabsetPanel().\n\nmainPanel(\n  tabsetPanel(\n    type = \"tabs\",\n    \n    ### Table tab ----\n    tabPanel(\n      title = \"Table\",\n      div(\n        style = \"height: 600px; overflow-y: auto;\",\n        tableOutput(\"table\")\n      )\n    ),\n    \n    ### Plot tab ----\n    tabPanel(\n      title = \"Plot\",\n      plotlyOutput(\"plot\", height = 600)\n    ),\n    \n    ### Map tab ----\n    tabPanel(\n      title = \"Map\",\n      leafletOutput(\"map\", height = 600)\n    ),\n\n    ### New tab ----\n    tabPanel(\n      title = \"Countries\",\n      leafletOutput(\"countrymap\", height = 600)\n    )\n  )\n)\n\nIn the server function, add renderLeaflet and assign it to the output object.\n\noutput$hist &lt;- renderLeaflet({\n\n})\n\n\n\nComplete code (important lines are highlighted)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(shiny)\nlibrary(plotly)\nlibrary(leaflet)\nlibrary(haven)\n\ness &lt;- readRDS(\"data/ess_trust.rds\")\ness_geo &lt;- readRDS(\"data/ess_trust_geo.rds\")\n\n# UI ----\nui &lt;- fluidPage(\n  titlePanel(\"European Social Survey - round 10\"),\n  \n  ## Sidebar ----\n  sidebarLayout(\n    sidebarPanel(\n      ### select dependent variable\n      selectInput(\n        \"xvar\",\n        label = \"Select a dependent variable\",\n        choices = c(\n          \"Trust in country's parliament\" = \"trust_parliament\",\n          \"Trust in the legal system\" = \"trust_legal\",\n          \"Trust in the police\" = \"trust_police\",\n          \"Trust in politicians\" = \"trust_politicians\",\n          \"Trust in political parties\" = \"trust_parties\",\n          \"Trust in the European Parliament\" = \"trust_eu\",\n          \"Trust in the United Nations\" = \"trust_un\"\n        )\n      ),\n      \n      ### select a variable ----\n      selectInput(\n        \"yvar\",\n        label = \"Select an independent variable\",\n        choices = c(\n          \"Placement on the left-right scale\" = \"left_right\",\n          \"Age\" = \"age\",\n          \"Feeling about household's income\" = \"income_feeling\",\n          \"How often do you use the internet?\" = \"internet_use\",\n          \"How happy are you?\" = \"happiness\"\n        )\n      ),\n      \n      ### select a country ----\n      selectizeInput(\n        \"countries\",\n        label = \"Filter by country\",\n        choices = unique(ess$country),\n        selected = \"FR\",\n        multiple = TRUE\n      ),\n      \n      ### filter values ----\n      sliderInput(\n        \"range\",\n        label = \"Set a value range\",\n        min = min(ess$trust_parliament, na.rm = TRUE),\n        max = max(ess$trust_parliament, na.rm = TRUE),\n        value = range(ess$trust_parliament, na.rm = TRUE),\n        step = 1\n      )\n    ),\n    \n    ## Main panel ----\n    mainPanel(\n      tabsetPanel(\n        type = \"tabs\",\n        \n        ### Table tab ----\n        tabPanel(\n          title = \"Table\",\n          div(\n            style = \"height: 600px; overflow-y: auto;\",\n            tableOutput(\"table\")\n          )\n        ),\n        \n        ### Plot tab ----\n        tabPanel(\n          title = \"Plot\",\n          plotlyOutput(\"plot\", height = 600)\n        ),\n        \n        ### Map tab ----\n        tabPanel(\n          title = \"Map\",\n          leafletOutput(\"map\", height = 600)\n        ),\n\n        ### New tab ----\n        tabPanel(\n          title = \"Histogram\",\n          leafletOutput(\"hist\", height = 600)\n        )\n      )\n    )\n  )\n)\n\n\n# Server ----\nserver &lt;- function(input, output, session) {\n  # update slider ----\n  observe({\n    var &lt;- na.omit(ess[[input$xvar]])\n    is_ordered &lt;- is.ordered(var)\n    var &lt;- as.numeric(var)\n    updateSliderInput(\n      inputId = \"range\",\n      min = min(var),\n      max = max(var),\n      value = range(var),\n      step = if (is_ordered) 1\n    )\n  }) %&gt;%\n    bindEvent(input$xvar)\n  \n  # filter data ----\n  filtered &lt;- reactive({\n    req(input$countries, cancelOutput = TRUE)\n    \n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    range &lt;- input$range\n    \n    # select country\n    ess &lt;- ess[ess$country %in% input$countries, ]\n    \n    # select variable\n    ess &lt;- ess[c(\"idno\", \"country\", xvar, yvar)]\n    \n    # apply range\n    ess &lt;- ess[ess[[xvar]] &gt; range[1] & ess[[xvar]] &lt; range[2], ]\n    ess\n  })\n  \n  # render table ----\n  output$table &lt;- renderTable({\n    filtered()\n  }, height = 400)\n  \n  # render plot ----\n  output$plot &lt;- renderPlotly({\n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    plot_data &lt;- filtered() %&gt;%\n      drop_na() %&gt;%\n      mutate(across(where(is.numeric), .fns = as.ordered))\n    \n    p &lt;- ggplot(plot_data) +\n      aes(x = .data[[xvar]], y = .data[[yvar]], group = .data[[xvar]]) +\n      geom_violin(fill = \"lightblue\", show.legend = FALSE) +\n      theme_classic()\n    ggplotly(p)\n  })\n  \n  # render map ----\n  output$map &lt;- renderLeaflet({\n    var &lt;- input$xvar\n    ess_geo &lt;- ess_geo[c(\"country\", var)]\n    \n    # create labels with a bold title and a body\n    labels &lt;- sprintf(\n      \"&lt;strong&gt;%s&lt;/strong&gt;&lt;br&gt;%s\",\n      ess_geo$country,\n      ess_geo[[var]]\n    )\n    labels &lt;- lapply(labels, HTML)\n    \n    # create a palette for numerics and ordinals\n    if (is.ordered(ess_geo[[var]])) {\n      pal &lt;- colorFactor(\"YlOrRd\", domain = NULL)\n    } else {\n      pal &lt;- colorNumeric(\"YlOrRd\", domain = NULL)\n    }\n    \n    # construct leaflet canvas\n    leaflet(ess_geo) %&gt;%\n      # add base map\n      addTiles() %&gt;%\n      # add choropleths\n      addPolygons(\n        fillColor = pal(ess_geo[[var]]),\n        weight = 2,\n        opacity = 1,\n        color = \"white\",\n        fillOpacity = 0.7,\n        # highlight polygons on hover\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"#666\",\n          fillOpacity = 0.7,\n          bringToFront = TRUE\n        ),\n        label = labels\n      ) %&gt;%\n      # add a legend\n      addLegend(\n        position = \"bottomleft\",\n        pal = pal,\n        values = ess_geo[[var]],\n        opacity = 0.7,\n        title = var\n      )\n  })\n  \n  output$hist &lt;- renderLeaflet({\n    \n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n\n\n\n\n\n\n\n\n\n\nExercise 2.2\n\n\n\nIn section 4, we added an interactive map showing the average of the ESS dataset across Europe. For this exercise, create an interactive map that maps one of the trust variables using a binned scale. Add a basemap, polygons, a legend, and set the default view on Southeastern Europe.\n\n\n\n\n\n\n\n\nSolution 2.2\n\n\n\n\n\n\ncolorBin creates a binned palette function to use in Leaflet. The domain argument must be passed, else the legend will be empty\naddTiles adds an OpenStreetMap basemap\nsetView zooms in to a specific location\naddPolygons adds polygon data to the map\n\nThe fillColor argument takes a vector of colors which can be created using the pal palette function\n\naddLegend adds the legend\n\n\ness_geo &lt;- readRDS(\"data/ess_trust_geo.rds\")\n\npal &lt;- colorBin(\"YlOrRd\", domain = ess_geo$trust_eu)\n\nleaflet(ess_geo) %&gt;%\n  addTiles() %&gt;%\n  setView(13, 45, 5) %&gt;%\n  addPolygons(\n    fillColor = ~pal(trust_eu)\n  ) %&gt;%\n  addLegend(\n    pal = pal,\n    values = ~trust_eu\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 2.3\n\n\n\nCustomize the map from exercise 2.2 according to the following requests:\n\nIncrease the fill opacity to 60%\nReplace the polygon borders with small, opaque, black lines\nReplace the OpenStreetMap basemap with a Stamen basemap\nAdd a small blue dot where GESIS Mannheim is (Longitude: 8.46°, Latitude: 49.48°)\nMove the legend to the bottomleft and make it opaque\n\n\n\n\n\n\n\n\n\nSolution 2.3\n\n\n\n\n\n\nFill opacity is controlled with the fillOpacity argument to addPolygons\nBorder size is controlled with the weight argument\nBorder opacity is controlled with the opacity argument\nBorder color is controlled with the color argument\nBasemaps from known providers can be added with the addProviderTiles function\nDots can be added with the addCircleMarkers function\n\nTo control color and size, you can use the color, fillOpacity, opacity, and radius arguments\n\nLegend positioning is controlled with the position argument of addLegend\n\n\npal &lt;- colorBin(\"YlOrRd\", domain = ess_geo$trust_eu)\n\nleaflet(ess_geo) %&gt;%\n    addProviderTiles(\"Stadia.StamenTerrain\") %&gt;%\n    setView(13, 45, 5) %&gt;%\n    addPolygons(\n      fillColor = ~pal(trust_eu),\n      color = \"black\",\n      opacity = 1,\n      weight = 1,\n      fillOpacity = 0.6\n    ) %&gt;%\n    addLegend(\n      pal = pal,\n      values = ~trust_eu,\n      position = \"bottomright\",\n      opacity = 1\n    ) %&gt;%\n    addCircleMarkers(\n      lng = 8.46,\n      lat = 49.48,\n      color = \"blue\",\n      fillOpacity = 1,\n      opacity = 1,\n      radius = 3\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 2.4\n\n\n\nIn section 4, we added labels that appear when hovering over a polygon. In this exercise, add labels that appear when clicking on the GESIS marker from the last exercise. The label should read “This is GESIS in Mannheim, DE” (incl. formatting).\n\n\n\n\n\n\n\n\nSolution 2.3\n\n\n\n\n\n\npal &lt;- colorBin(\"YlOrRd\", domain = ess_geo$trust_eu)\npopup &lt;- HTML(\"This is &lt;strong&gt;GESIS&lt;/strong&gt; in Mannheim, DE\")\n\nleaflet(ess_geo) %&gt;%\n    addProviderTiles(\"Stadia.StamenTerrain\") %&gt;%\n    setView(13, 45, 5) %&gt;%\n    addPolygons(\n      fillColor = ~pal(trust_eu),\n      color = \"black\",\n      opacity = 1,\n      weight = 1,\n      fillOpacity = 0.6\n    ) %&gt;%\n    addLegend(\n      pal = pal,\n      values = ~trust_eu,\n      position = \"bottomright\",\n      opacity = 1\n    ) %&gt;%\n    addCircleMarkers(\n      lng = 8.46,\n      lat = 49.48,\n      color = \"blue\",\n      fillOpacity = 1,\n      opacity = 1,\n      radius = 3,\n      popup = popup\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 2.5\n\n\n\nImplement the leafelt map from exercise 2.2 to 2.4 in the Shiny app. Instead of plotting a single static variable, link the histogram to the input selector for the dependent variable (input$xvar) such that choosing a different trust variable updates the histogram.\n\n\n\n\n\n\n\n\nSolution 2.5\n\n\n\n\n\noutput$gmap &lt;- renderLeaflet({\n  xvar &lt;- input$xvar\n  pal &lt;- colorBin(\"YlOrRd\", domain = ess_geo[[xvar]])\n  popup &lt;- HTML(\"This is &lt;strong&gt;GESIS&lt;/strong&gt; in Mannheim, DE\")\n\n  leaflet(ess_geo) %&gt;%\n    addProviderTiles(\"Stadia.StamenTerrain\") %&gt;%\n    setView(13, 45, 5) %&gt;%\n    addPolygons(\n      fillColor = pal(ess_geo[[xvar]]),\n      color = \"black\",\n      opacity = 1,\n      weight = 1,\n      fillOpacity = 0.6\n    ) %&gt;%\n    addLegend(\n      pal = pal,\n      values = ess_geo[[xvar]],\n      position = \"bottomright\",\n      opacity = 1\n    ) %&gt;%\n    addCircleMarkers(\n      lng = 8.46,\n      lat = 49.48,\n      color = \"blue\",\n      fillOpacity = 1,\n      opacity = 1,\n      radius = 3,\n      popup = popup\n    )\n})\n\n\nComplete code (important lines are highlighted)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(shiny)\nlibrary(plotly)\nlibrary(leaflet)\nlibrary(haven)\n\ness &lt;- readRDS(\"ess_trust.rds\")\ness_geo &lt;- readRDS(\"ess_trust_geo.rds\")\n\n# UI ----\nui &lt;- fluidPage(\n  titlePanel(\"European Social Survey - round 10\"),\n  \n  ## Sidebar ----\n  sidebarLayout(\n    sidebarPanel(\n      ### select dependent variable\n      selectInput(\n        \"xvar\",\n        label = \"Select a dependent variable\",\n        choices = c(\n          \"Trust in country's parliament\" = \"trust_parliament\",\n          \"Trust in the legal system\" = \"trust_legal\",\n          \"Trust in the police\" = \"trust_police\",\n          \"Trust in politicians\" = \"trust_politicians\",\n          \"Trust in political parties\" = \"trust_parties\",\n          \"Trust in the European Parliament\" = \"trust_eu\",\n          \"Trust in the United Nations\" = \"trust_un\"\n        )\n      ),\n      \n      ### select a variable ----\n      selectInput(\n        \"yvar\",\n        label = \"Select an independent variable\",\n        choices = c(\n          \"Placement on the left-right scale\" = \"left_right\",\n          \"Age\" = \"age\",\n          \"Feeling about household's income\" = \"income_feeling\",\n          \"How often do you use the internet?\" = \"internet_use\",\n          \"How happy are you?\" = \"happiness\"\n        )\n      ),\n      \n      ### select a country ----\n      selectizeInput(\n        \"countries\",\n        label = \"Filter by country\",\n        choices = unique(ess$country),\n        selected = \"FR\",\n        multiple = TRUE\n      ),\n      \n      ### filter values ----\n      sliderInput(\n        \"range\",\n        label = \"Set a value range\",\n        min = min(ess$trust_parliament, na.rm = TRUE),\n        max = max(ess$trust_parliament, na.rm = TRUE),\n        value = range(ess$trust_parliament, na.rm = TRUE),\n        step = 1\n      )\n    ),\n    \n    ## Main panel ----\n    mainPanel(\n      tabsetPanel(\n        type = \"tabs\",\n        \n        ### Table tab ----\n        tabPanel(\n          title = \"Table\",\n          div(\n            style = \"height: 600px; overflow-y: auto;\",\n            tableOutput(\"table\")\n          )\n        ),\n        \n        ### Plot tab ----\n        tabPanel(\n          title = \"Plot\",\n          plotlyOutput(\"plot\", height = 600)\n        ),\n        \n        ### Map tab ----\n        tabPanel(\n          title = \"Map\",\n          leafletOutput(\"map\", height = 600)\n        ),\n        \n        ### New tab ----\n        tabPanel(\n          title = \"GESIS map\",\n          leafletOutput(\"gmap\", height = 600)\n        )\n      )\n    )\n  )\n)\n\n\n# Server ----\nserver &lt;- function(input, output, session) {\n  # update slider ----\n  observe({\n    var &lt;- na.omit(ess[[input$xvar]])\n    is_ordered &lt;- is.ordered(var)\n    var &lt;- as.numeric(var)\n    updateSliderInput(\n      inputId = \"range\",\n      min = min(var),\n      max = max(var),\n      value = range(var),\n      step = if (is_ordered) 1\n    )\n  }) %&gt;%\n    bindEvent(input$xvar)\n  \n  # filter data ----\n  filtered &lt;- reactive({\n    req(input$countries, cancelOutput = TRUE)\n    \n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    range &lt;- input$range\n    \n    # select country\n    ess &lt;- ess[ess$country %in% input$countries, ]\n    \n    # select variable\n    ess &lt;- ess[c(\"idno\", \"country\", xvar, yvar)]\n    \n    # apply range\n    ess &lt;- ess[ess[[xvar]] &gt; range[1] & ess[[xvar]] &lt; range[2], ]\n    ess\n  })\n  \n  # render table ----\n  output$table &lt;- renderTable({\n    filtered()\n  }, height = 400)\n  \n  # render plot ----\n  output$plot &lt;- renderPlotly({\n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    plot_data &lt;- filtered() %&gt;%\n      drop_na() %&gt;%\n      mutate(across(where(is.numeric), .fns = as.ordered))\n    \n    p &lt;- ggplot(plot_data) +\n      aes(x = .data[[xvar]], y = .data[[yvar]], group = .data[[xvar]]) +\n      geom_violin(fill = \"lightblue\", show.legend = FALSE) +\n      theme_classic()\n    ggplotly(p)\n  })\n  \n  # render map ----\n  output$map &lt;- renderLeaflet({\n    var &lt;- input$xvar\n    ess_geo &lt;- ess_geo[c(\"country\", var)]\n    \n    # create labels with a bold title and a body\n    labels &lt;- sprintf(\n      \"&lt;strong&gt;%s&lt;/strong&gt;&lt;br&gt;%s\",\n      ess_geo$country,\n      ess_geo[[var]]\n    )\n    labels &lt;- lapply(labels, HTML)\n    \n    # create a palette for numerics and ordinals\n    if (is.ordered(ess_geo[[var]])) {\n      pal &lt;- colorFactor(\"YlOrRd\", domain = NULL)\n    } else {\n      pal &lt;- colorNumeric(\"YlOrRd\", domain = NULL)\n    }\n    \n    # construct leaflet canvas\n    leaflet(ess_geo) %&gt;%\n      # add base map\n      addTiles() %&gt;%\n      # add choropleths\n      addPolygons(\n        fillColor = pal(ess_geo[[var]]),\n        weight = 2,\n        opacity = 1,\n        color = \"white\",\n        fillOpacity = 0.7,\n        # highlight polygons on hover\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"#666\",\n          fillOpacity = 0.7,\n          bringToFront = TRUE\n        ),\n        label = labels\n      ) %&gt;%\n      # add a legend\n      addLegend(\n        position = \"bottomleft\",\n        pal = pal,\n        values = ess_geo[[var]],\n        opacity = 0.7,\n        title = var\n      )\n  })\n  \n  # plot gesis map\n  output$gmap &lt;- renderLeaflet({\n    xvar &lt;- input$xvar\n    pal &lt;- colorBin(\"YlOrRd\", domain = ess_geo[[xvar]])\n    popup &lt;- HTML(\"This is &lt;strong&gt;GESIS&lt;/strong&gt; in Mannheim, DE\")\n\n    leaflet(ess_geo) %&gt;%\n      addProviderTiles(\"Stadia.StamenTerrain\") %&gt;%\n      setView(13, 45, 5) %&gt;%\n      addPolygons(\n        fillColor = pal(ess_geo[[xvar]]),\n        color = \"black\",\n        opacity = 1,\n        weight = 1,\n        fillOpacity = 0.6\n      ) %&gt;%\n      addLegend(\n        pal = pal,\n        values = ess_geo[[xvar]],\n        position = \"bottomright\",\n        opacity = 1\n      ) %&gt;%\n      addCircleMarkers(\n        lng = 8.46,\n        lat = 49.48,\n        color = \"blue\",\n        fillOpacity = 1,\n        opacity = 1,\n        radius = 3,\n        popup = popup\n      )\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n\n\n\n\n\n\n8.3 Proxies and plot events\n\n\n\n\n\n\nExercise 3.1\n\n\n\nTaking the body of a server function below, how can you modify a proxy of the plot output every time the input is updated? Add a reactive expression that accesses the plot proxy on each input update.\n\noutput$map &lt;- renderPlotly({\n  var &lt;- input$variable\n  plot_ly(x = ess[[var]]) %&gt;%\n    add_histogram()\n})\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nA proxy typically resides in an observer.\nHow can you ensure that the observer triggers when the input is updated?\n\n\n\n\n\n\n\n\n\nSolution 3.1\n\n\n\n\n\n\noutput$map &lt;- renderPlotly({\n  var &lt;- input$variable\n  plot_ly(x = ess[[var]]) %&gt;%\n    add_histogram()\n})\n\nobserve({\n  plotlyProxy(\"plot\")\n}) %&gt;%\n  bindEvent(input$variable)\n\n\n\n\n\n\n\n\n\n\nExercise 3.2\n\n\n\nTaking the code below, implement a proxy of the Leaflet map, that is, whenever the map is updated update the map proxy (leafletProxy()) instead of re-rendering the map. What are the advantages of updating the map using a proxy?\nNote that you need to isolate input$xvar in renderLeaflet(). This step is necessary in order to render the leaflet map exactly once. You can isolate an input by typing isolate(input$xvar). Isolation severs an input from the reactive graph.\n\n\nCode for exercise 3.2\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(shiny)\nlibrary(leaflet)\nlibrary(haven)\n\ness_geo &lt;- readRDS(\"ess_trust_geo.rds\")\n\n# UI ----\nui &lt;- fluidPage(\n  titlePanel(\"European Social Survey - round 10\"),\n  \n  ## Sidebar ----\n  sidebarLayout(\n    sidebarPanel(\n      ### select dependent variable\n      selectInput(\n        \"xvar\",\n        label = \"Select a dependent variable\",\n        choices = c(\n          \"Trust in country's parliament\" = \"trust_parliament\",\n          \"Trust in the legal system\" = \"trust_legal\",\n          \"Trust in the police\" = \"trust_police\",\n          \"Trust in politicians\" = \"trust_politicians\",\n          \"Trust in political parties\" = \"trust_parties\",\n          \"Trust in the European Parliament\" = \"trust_eu\",\n          \"Trust in the United Nations\" = \"trust_un\"\n        )\n      ),\n    ),\n    \n    ## Main panel ----\n    mainPanel(leafletOutput(\"map\", height = 600))\n  )\n)\n\n\n# Server ----\nserver &lt;- function(input, output, session) {\n  # render map ----\n  output$map &lt;- renderLeaflet({\n    var &lt;- input$xvar\n    ess_geo &lt;- ess_geo[c(\"country\", var)]\n    \n    # create a palette for numerics and ordinals\n    pal &lt;- colorNumeric(\"YlOrRd\", domain = NULL)\n    \n    # construct leaflet canvas\n    leaflet(ess_geo) %&gt;%\n      # add base map\n      addTiles() %&gt;%\n      # add choropleths\n      addPolygons(\n        fillColor = pal(ess_geo[[var]]),\n        weight = 2,\n        opacity = 1,\n        color = \"white\",\n        fillOpacity = 0.7,\n        # highlight polygons on hover\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"#666\",\n          fillOpacity = 0.7,\n          bringToFront = TRUE\n        )\n      ) %&gt;%\n      # add a legend\n      addLegend(\n        position = \"bottomleft\",\n        pal = pal,\n        values = ess_geo[[var]],\n        opacity = 0.7,\n        title = var\n      )\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nThe workflow to update the map using a proxy is the following:\n\nRender the map once using renderLeaflet()\nEverytime the map is updated (by changing input$xvar), trigger an observer\nThe observer changes leafletProxy(\"map\")\nUsing the proxy, clear all polygons and add the updated polygons\n\nYou can clear the existing polygons and the legend using the leaflet::clearShapes() and leaflet::clearControls() functions.\n\n\n\n\n\n\n\n\n\nSolution 3.2\n\n\n\n\n\nA solution for exercise 3.1 is presented in the collapsed code chunk below. A proxy is implemented by first rendering the map once through renderLeaflet and then triggering an observer each time the map is updated. The observer contains a call to leafletProxy which updates the map in place instead of re-rendering.\nAlthough the proxy does not serve any important purpose in this case, there are two key advantages which can be observed in the result:\n\nThe map becomes much snappier, that means the updates are shown much faster than before\nThe map view does not reset when the map updates. You can preserve the pan position and zoom level\n\nThese advantages might be irrelevant in this scenario, but can come in handy in more specific use cases.\n\n\nComplete solution code\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(shiny)\nlibrary(leaflet)\nlibrary(haven)\n\ness_geo &lt;- readRDS(\"ess_trust_geo.rds\")\n\n# UI ----\nui &lt;- fluidPage(\n  titlePanel(\"European Social Survey - round 10\"),\n  \n  ## Sidebar ----\n  sidebarLayout(\n    sidebarPanel(\n      ### select dependent variable\n      selectInput(\n        \"xvar\",\n        label = \"Select a dependent variable\",\n        choices = c(\n          \"Trust in country's parliament\" = \"trust_parliament\",\n          \"Trust in the legal system\" = \"trust_legal\",\n          \"Trust in the police\" = \"trust_police\",\n          \"Trust in politicians\" = \"trust_politicians\",\n          \"Trust in political parties\" = \"trust_parties\",\n          \"Trust in the European Parliament\" = \"trust_eu\",\n          \"Trust in the United Nations\" = \"trust_un\"\n        )\n      ),\n    ),\n    \n    ## Main panel ----\n    mainPanel(leafletOutput(\"map\", height = 600))\n  )\n)\n\n\n# Server ----\nserver &lt;- function(input, output, session) {\n  # render map ----\n  output$map &lt;- renderLeaflet({\n    var &lt;- isolate(input$xvar)\n    ess_geo &lt;- ess_geo[c(\"country\", var)]\n    \n    # create a palette for numerics and ordinals\n    pal &lt;- colorNumeric(\"YlOrRd\", domain = NULL)\n    \n    # construct leaflet canvas\n    leaflet(ess_geo) %&gt;%\n      # add base map\n      addTiles() %&gt;%\n      # add choropleths\n      addPolygons(\n        fillColor = pal(ess_geo[[var]]),\n        weight = 2,\n        opacity = 1,\n        color = \"white\",\n        fillOpacity = 0.7,\n        # highlight polygons on hover\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"#666\",\n          fillOpacity = 0.7,\n          bringToFront = TRUE\n        )\n      ) %&gt;%\n      # add a legend\n      addLegend(\n        position = \"bottomleft\",\n        pal = pal,\n        values = ess_geo[[var]],\n        opacity = 0.7,\n        title = var\n      )\n  })\n  \n  \n  # map proxy\n  observe({\n    var &lt;- input$xvar\n    ess_geo &lt;- ess_geo[c(\"country\", var)]\n    pal &lt;- colorNumeric(\"YlOrRd\", domain = NULL)\n    \n    leafletProxy(\"map\") %&gt;%\n      clearShapes() %&gt;%\n      clearControls() %&gt;%\n      addPolygons(\n        data = ess_geo,\n        fillColor = pal(ess_geo[[var]]),\n        weight = 2,\n        opacity = 1,\n        color = \"white\",\n        fillOpacity = 0.7,\n        # highlight polygons on hover\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"#666\",\n          fillOpacity = 0.7,\n          bringToFront = TRUE\n        )\n      ) %&gt;%\n      # add a legend\n      addLegend(\n        position = \"bottomleft\",\n        pal = pal,\n        values = ess_geo[[var]],\n        opacity = 0.7,\n        title = var\n      )\n  }) %&gt;%\n    bindEvent(input$xvar)\n}\n\nshinyApp(ui = ui, server = server)\n\n\n\n\n\n\n\n\n\n\n\nExercise 3.3\n\n\n\nTaking the code from exercise 3.1, add a proxy that adds small blue dots when clicking anywhere on one of the polygons.\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nThe proxy should only be triggered in case of a specific plot event. How can this plot event be accessed?\nTo add a blue dot, see the addCircleMarkers function.\n\n\n\n\n\n\n\n\n\nSolution 3.3\n\n\n\n\n\nTo add a blue dot when a user clicks on a polygon, add a observer that holds a proxy to “map” and depends on input$map_click_shape\n\nobserve({\n  \n}) %&gt;%\n  bindEvent()\n\n\n\n\n\n\n\n\n\n\nExercise 3.4\n\n\n\nSo far, we have only talked about plot events in Leaflet. Taking the code below, implement an observer that prints the current plot coordinates every time the plot legend is double-clicked. Use plotly’s event_data() function.\n\n\nCode for exercise 3.4\nlibrary(tidyverse)\nlibrary(shiny)\nlibrary(plotly)\nlibrary(haven)\n\ness &lt;- readRDS(\"ess_trust.rds\")\n\n# UI ----\nui &lt;- fluidPage(\n  plotlyOutput(\"plot\", height = 600),\n  br(),\n  verbatimTextOutput(\"text\", placeholder = TRUE)\n)\n\n\n# Server ----\nserver &lt;- function(input, output, session) {\n  # render plot ----\n  output$plot &lt;- renderPlotly({\n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    plot_data &lt;- ess[ess$country %in% \"FR\", ] %&gt;%\n      drop_na() %&gt;%\n      mutate(across(where(is.numeric), .fns = as.ordered))\n    \n    p &lt;- ggplot(plot_data) +\n      aes(x = .data[[\"left_right\"]], y = .data[[\"trust_eu\"]], group = .data[[\"left_right\"]]) +\n      geom_violin(fill = \"lightblue\", show.legend = FALSE) +\n      theme_classic()\n    plotly::ggplotly(p)\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n\n\n\n\n\n\n\n\n\nSolution 3.4\n\n\n\n\n\nA solution for exercise 3.4 is presented in the collapsed code chunk below.\n\n\n\n\n\n8.4 Beyond plotly and leaflet\n\n\n\n\n\n\nExercise 4.1\n\n\n\nThinking back to the list of Javascript libraries for interactive plotting in section 2.1, pick one R interface that appeals to you the most. Study its documentation and vignettes to get a basic understanding of the interface.\n\n\n\n\n\n\n\n\nExercise 4.2\n\n\n\nAdd a new tab to the app. Replicate the violin plots from section 3 as boxplots using an R interface of your choice.\nNote that not all plotting libraries support violin and boxplots to the same degree.\n\n\n\n\n\n\n\n\nExample solution 4.2\n\n\n\n\n\nAn example solution with the highcharter package:\n\n\nComplete code (important lines are highlighted)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(shiny)\nlibrary(plotly)\nlibrary(leaflet)\nlibrary(haven)\nlibrary(highcharter)\n\ness &lt;- readRDS(\"ess_trust.rds\")\ness_geo &lt;- readRDS(\"ess_trust_geo.rds\")\n\n# UI ----\nui &lt;- fluidPage(\n  titlePanel(\"European Social Survey - round 10\"),\n  \n  ## Sidebar ----\n  sidebarLayout(\n    sidebarPanel(\n      ### select dependent variable\n      selectInput(\n        \"xvar\",\n        label = \"Select a dependent variable\",\n        choices = c(\n          \"Trust in country's parliament\" = \"trust_parliament\",\n          \"Trust in the legal system\" = \"trust_legal\",\n          \"Trust in the police\" = \"trust_police\",\n          \"Trust in politicians\" = \"trust_politicians\",\n          \"Trust in political parties\" = \"trust_parties\",\n          \"Trust in the European Parliament\" = \"trust_eu\",\n          \"Trust in the United Nations\" = \"trust_un\"\n        )\n      ),\n      \n      ### select a variable ----\n      selectInput(\n        \"yvar\",\n        label = \"Select an independent variable\",\n        choices = c(\n          \"Placement on the left-right scale\" = \"left_right\",\n          \"Age\" = \"age\",\n          \"Feeling about household's income\" = \"income_feeling\",\n          \"How often do you use the internet?\" = \"internet_use\",\n          \"How happy are you?\" = \"happiness\"\n        )\n      ),\n      \n      ### select a country ----\n      selectizeInput(\n        \"countries\",\n        label = \"Filter by country\",\n        choices = unique(ess$country),\n        selected = \"FR\",\n        multiple = TRUE\n      ),\n      \n      ### filter values ----\n      sliderInput(\n        \"range\",\n        label = \"Set a value range\",\n        min = min(ess$trust_parliament, na.rm = TRUE),\n        max = max(ess$trust_parliament, na.rm = TRUE),\n        value = range(ess$trust_parliament, na.rm = TRUE),\n        step = 1\n      )\n    ),\n    \n    ## Main panel ----\n    mainPanel(\n      tabsetPanel(\n        type = \"tabs\",\n        \n        ### Table tab ----\n        tabPanel(\n          title = \"Table\",\n          div(\n            style = \"height: 600px; overflow-y: auto;\",\n            tableOutput(\"table\")\n          )\n        ),\n        \n        ### Plot tab ----\n        tabPanel(\n          title = \"Plot\",\n          plotlyOutput(\"plot\", height = 600)\n        ),\n        \n        ### Map tab ----\n        tabPanel(\n          title = \"Map\",\n          leafletOutput(\"map\", height = 600)\n        ),\n        \n        ### Highcharts tab ----\n        tabPanel(\n          title = \"Highcharts\",\n          highchartOutput(\"highcharts\", height = 600)\n        )\n      )\n    )\n  )\n)\n\n\n# Server ----\nserver &lt;- function(input, output, session) {\n  # update slider ----\n  observe({\n    var &lt;- na.omit(ess[[input$xvar]])\n    is_ordered &lt;- is.ordered(var)\n    var &lt;- as.numeric(var)\n    updateSliderInput(\n      inputId = \"range\",\n      min = min(var),\n      max = max(var),\n      value = range(var),\n      step = if (is_ordered) 1\n    )\n  }) %&gt;%\n    bindEvent(input$xvar)\n  \n  # filter data ----\n  filtered &lt;- reactive({\n    req(input$countries, cancelOutput = TRUE)\n    \n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    range &lt;- input$range\n    \n    # select country\n    ess &lt;- ess[ess$country %in% input$countries, ]\n    \n    # select variable\n    ess &lt;- ess[c(\"idno\", \"country\", xvar, yvar)]\n    \n    # apply range\n    ess &lt;- ess[ess[[xvar]] &gt; range[1] & ess[[xvar]] &lt; range[2], ]\n    ess\n  })\n  \n  # render table ----\n  output$table &lt;- renderTable({\n    filtered()\n  }, height = 400)\n  \n  # render plot ----\n  output$plot &lt;- renderPlotly({\n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    plot_data &lt;- filtered() %&gt;%\n      drop_na() %&gt;%\n      mutate(across(where(is.numeric), .fns = as.ordered))\n    \n    p &lt;- ggplot(plot_data) +\n      aes(x = .data[[xvar]], y = .data[[yvar]], group = .data[[xvar]]) +\n      geom_violin(fill = \"lightblue\", show.legend = FALSE) +\n      theme_classic()\n    ggplotly(p)\n  })\n  \n  # render map ----\n  output$map &lt;- renderLeaflet({\n    var &lt;- input$xvar\n    ess_geo &lt;- ess_geo[c(\"country\", var)]\n    \n    # create labels with a bold title and a body\n    labels &lt;- sprintf(\n      \"&lt;strong&gt;%s&lt;/strong&gt;&lt;br&gt;%s\",\n      ess_geo$country,\n      ess_geo[[var]]\n    )\n    labels &lt;- lapply(labels, HTML)\n    \n    # create a palette for numerics and ordinals\n    if (is.ordered(ess_geo[[var]])) {\n      pal &lt;- colorFactor(\"YlOrRd\", domain = NULL)\n    } else {\n      pal &lt;- colorNumeric(\"YlOrRd\", domain = NULL)\n    }\n    \n    # construct leaflet canvas\n    leaflet(ess_geo) %&gt;%\n      # add base map\n      addTiles() %&gt;%\n      # add choropleths\n      addPolygons(\n        fillColor = pal(ess_geo[[var]]),\n        weight = 2,\n        opacity = 1,\n        color = \"white\",\n        fillOpacity = 0.7,\n        # highlight polygons on hover\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"#666\",\n          fillOpacity = 0.7,\n          bringToFront = TRUE\n        ),\n        label = labels\n      ) %&gt;%\n      # add a legend\n      addLegend(\n        position = \"bottomleft\",\n        pal = pal,\n        values = ess_geo[[var]],\n        opacity = 0.7,\n        title = var\n      )\n  })\n  \n  # render highcharts\n  output$highcharts &lt;- renderHighchart({\n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    \n    ess &lt;- filtered() %&gt;%\n      zap_labels() %&gt;%\n      na.omit() %&gt;%\n      select(all_of(c(xvar, yvar))) %&gt;%\n      setNames(c(\"x\", \"y\"))\n    \n    highchart() %&gt;%\n      hc_add_series_list(data_to_boxplot(\n        ess,\n        x,\n        y,\n        color = \"black\",\n        fillColor = \"#ADD8E6\",\n        showInLegend = FALSE,\n        name = xvar\n      )) %&gt;%\n      hc_yAxis(\n        min = 0, max = max(ess$y, na.rm = TRUE),\n        title = list(text = yvar)\n      ) %&gt;%\n      hc_xAxis(type = \"category\", title = list(text = xvar)) %&gt;%\n      hc_legend(enabled = FALSE)\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n\nAn example solution with the apexcharter package:\n\n\nComplete code (important lines are highlighted)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(shiny)\nlibrary(plotly)\nlibrary(leaflet)\nlibrary(haven)\nlibrary(apexcharter)\n\ness &lt;- readRDS(\"ess_trust.rds\")\ness_geo &lt;- readRDS(\"ess_trust_geo.rds\")\n\n# UI ----\nui &lt;- fluidPage(\n  titlePanel(\"European Social Survey - round 10\"),\n  \n  ## Sidebar ----\n  sidebarLayout(\n    sidebarPanel(\n      ### select dependent variable\n      selectInput(\n        \"xvar\",\n        label = \"Select a dependent variable\",\n        choices = c(\n          \"Trust in country's parliament\" = \"trust_parliament\",\n          \"Trust in the legal system\" = \"trust_legal\",\n          \"Trust in the police\" = \"trust_police\",\n          \"Trust in politicians\" = \"trust_politicians\",\n          \"Trust in political parties\" = \"trust_parties\",\n          \"Trust in the European Parliament\" = \"trust_eu\",\n          \"Trust in the United Nations\" = \"trust_un\"\n        )\n      ),\n      \n      ### select a variable ----\n      selectInput(\n        \"yvar\",\n        label = \"Select an independent variable\",\n        choices = c(\n          \"Placement on the left-right scale\" = \"left_right\",\n          \"Age\" = \"age\",\n          \"Feeling about household's income\" = \"income_feeling\",\n          \"How often do you use the internet?\" = \"internet_use\",\n          \"How happy are you?\" = \"happiness\"\n        )\n      ),\n      \n      ### select a country ----\n      selectizeInput(\n        \"countries\",\n        label = \"Filter by country\",\n        choices = unique(ess$country),\n        selected = \"FR\",\n        multiple = TRUE\n      ),\n      \n      ### filter values ----\n      sliderInput(\n        \"range\",\n        label = \"Set a value range\",\n        min = min(ess$trust_parliament, na.rm = TRUE),\n        max = max(ess$trust_parliament, na.rm = TRUE),\n        value = range(ess$trust_parliament, na.rm = TRUE),\n        step = 1\n      )\n    ),\n    \n    ## Main panel ----\n    mainPanel(\n      tabsetPanel(\n        type = \"tabs\",\n        \n        ### Table tab ----\n        tabPanel(\n          title = \"Table\",\n          div(\n            style = \"height: 600px; overflow-y: auto;\",\n            tableOutput(\"table\")\n          )\n        ),\n        \n        ### Plot tab ----\n        tabPanel(\n          title = \"Plot\",\n          plotlyOutput(\"plot\", height = 600)\n        ),\n        \n        ### Map tab ----\n        tabPanel(\n          title = \"Map\",\n          leafletOutput(\"map\", height = 600)\n        ),\n        \n        ### Highcharts tab ----\n        tabPanel(\n          title = \"Highcharts\",\n          apexchartOutput(\"highcharts\", height = 600)\n        )\n      )\n    )\n  )\n)\n\n\n# Server ----\nserver &lt;- function(input, output, session) {\n  # update slider ----\n  observe({\n    var &lt;- na.omit(ess[[input$xvar]])\n    is_ordered &lt;- is.ordered(var)\n    var &lt;- as.numeric(var)\n    updateSliderInput(\n      inputId = \"range\",\n      min = min(var),\n      max = max(var),\n      value = range(var),\n      step = if (is_ordered) 1\n    )\n  }) %&gt;%\n    bindEvent(input$xvar)\n  \n  # filter data ----\n  filtered &lt;- reactive({\n    req(input$countries, cancelOutput = TRUE)\n    \n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    range &lt;- input$range\n    \n    # select country\n    ess &lt;- ess[ess$country %in% input$countries, ]\n    \n    # select variable\n    ess &lt;- ess[c(\"idno\", \"country\", xvar, yvar)]\n    \n    # apply range\n    ess &lt;- ess[ess[[xvar]] &gt; range[1] & ess[[xvar]] &lt; range[2], ]\n    ess\n  })\n  \n  # render table ----\n  output$table &lt;- renderTable({\n    filtered()\n  }, height = 400)\n  \n  # render plot ----\n  output$plot &lt;- renderPlotly({\n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    plot_data &lt;- filtered() %&gt;%\n      drop_na() %&gt;%\n      mutate(across(where(is.numeric), .fns = as.ordered))\n    \n    p &lt;- ggplot(plot_data) +\n      aes(x = .data[[xvar]], y = .data[[yvar]], group = .data[[xvar]]) +\n      geom_violin(fill = \"lightblue\", show.legend = FALSE) +\n      theme_classic()\n    ggplotly(p)\n  })\n  \n  # render map ----\n  output$map &lt;- renderLeaflet({\n    var &lt;- input$xvar\n    ess_geo &lt;- ess_geo[c(\"country\", var)]\n    \n    # create labels with a bold title and a body\n    labels &lt;- sprintf(\n      \"&lt;strong&gt;%s&lt;/strong&gt;&lt;br&gt;%s\",\n      ess_geo$country,\n      ess_geo[[var]]\n    )\n    labels &lt;- lapply(labels, HTML)\n    \n    # create a palette for numerics and ordinals\n    if (is.ordered(ess_geo[[var]])) {\n      pal &lt;- colorFactor(\"YlOrRd\", domain = NULL)\n    } else {\n      pal &lt;- colorNumeric(\"YlOrRd\", domain = NULL)\n    }\n    \n    # construct leaflet canvas\n    leaflet(ess_geo) %&gt;%\n      # add base map\n      addTiles() %&gt;%\n      # add choropleths\n      addPolygons(\n        fillColor = pal(ess_geo[[var]]),\n        weight = 2,\n        opacity = 1,\n        color = \"white\",\n        fillOpacity = 0.7,\n        # highlight polygons on hover\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"#666\",\n          fillOpacity = 0.7,\n          bringToFront = TRUE\n        ),\n        label = labels\n      ) %&gt;%\n      # add a legend\n      addLegend(\n        position = \"bottomleft\",\n        pal = pal,\n        values = ess_geo[[var]],\n        opacity = 0.7,\n        title = var\n      )\n  })\n  \n  # render highcharts\n  output$highcharts &lt;- renderApexchart({\n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    \n    apex(filtered(), aes(.data[[\"trust_eu\"]], .data[[\"left_right\"]]), \"boxplot\") %&gt;%\n      ax_plotOptions(boxPlot = boxplot_opts(color.upper = \"#ADD8E6\", color.lower = \"#ADD8E6\")) %&gt;%\n      ax_stroke(colors = list(\"black\")) %&gt;%\n      ax_labs(x = \"eu_trust\", y = \"left_right\")\n  })\n}\n\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Modelling and visualizing data"
    ]
  },
  {
    "objectID": "08-dos-and-donts.html",
    "href": "08-dos-and-donts.html",
    "title": "Good practices when building your own app",
    "section": "",
    "text": "Learning outcomes:\n\nGood practices for Shiny programming\nTypical pitfalls to watch out for\nUseful stuff for everyday Shiny workflows"
  },
  {
    "objectID": "08-dos-and-donts.html#use-large-language-models-llms",
    "href": "08-dos-and-donts.html#use-large-language-models-llms",
    "title": "Good practices when building your own app",
    "section": "1 Use Large Language Models (LLMs)",
    "text": "1 Use Large Language Models (LLMs)\n\nLLMs increase productivity and we recommend using it regularly (get used to it)\n\n\n1.1 Attention: Hallucination\n\nAttention: Always cross-validate the information given by a LLM\n\nWhy? Hallucination.. (see characterization statements on Wikipedia)\n\n“a tendency to invent facts in moments of uncertainty” (OpenAI, May 2023)\n“a model’s logical mistakes” (OpenAI, May 2023)\nfabricating information entirely, but behaving as if spouting facts (CNBC, May 2023)\n“making up information” (The Verge, February 2023)\n\n\nVery good overview on Wikipedia\nDiscussions in (Zhang2023-ok?), (Huang2023-zf?) and (Metz2023-qz?)\nProblem less relevant when asking LLMs for function code because you check/test it yourself\n\n\n\n1.2 Avaible LLMs\n\nClosed-source\n\nChatGPT X (OpenAI, ~Microsoft): https://chat.openai.com/\nGemini (Google) https://gemini.google.com/\nAmazon Titan: https://aws.amazon.com/bedrock/titan/\n\nOpen-source\n\nHuggingChat: https://huggingface.co/chat/\nLAMA: https://github.com/facebookresearch/LAMA\n\nCurated list of papers about large language models\nTop Open-Source LLMs for 2024 and Their Uses\n\n\n\n1.3 Useful prompts\n\nLLMs can be used to…\n\n…code & understand code.\n…solve data management tasks.\n…solve data visualization tasks.\n…solve modeling tasks.\n…understand statistical theory.\n\nSome exemplary prompts in the sections below.\n\n\n\n1.4 Prompts: code & understand code/functions\nPlease explain what the shiny app below does. How does it work and what is it's logic.\n\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\")\n)\n\nserver &lt;- function(input, output, session) {\n  output$greeting &lt;- renderText({\n    paste0(\"Hello \", input$name, \"!\")\n  })\n}\nshinyApp(ui, server)\nFollowed by:\nPlease add ... to the shiny app.\nPlease explain the hyperparamters in this model:\n\nxgb_spec &lt;- boost_tree(\n  trees = 1000,\n  tree_depth = tune(), min_n = tune(),\n  loss_reduction = tune(),                     ## first three: model complexity\n  sample_size = tune(), mtry = tune(),         ## randomness\n  learn_rate = tune()                          ## step size\n) %&gt;%\n  set_engine(\"xgboost\") %&gt;%\n  set_mode(\"classification\")\nFollowed by:\nPlease further explain the learn_rate.\n\n\n\n1.5 Prompts: Data management & preparation\nPlease provide dplyr code to rename the following variables and give them better names (lowercaps). Below is the codebook:\n\npdwrk - Doing last 7 days: paid work\nedctn - Doing last 7 days: education\nuempla - Doing last 7 days: unemployed, actively looking for job\nuempli - Doing last 7 days: unemployed, not actively looking for job\ndsbld - Doing last 7 days: permanently sick or disabled\nrtrd - Doing last 7 days: retired\ncmsrv - Doing last 7 days: community or military service\nhswrk - Doing last 7 days: housework, looking after children, others\ndngoth - Doing last 7 days: other\ndngref - Doing last 7 days: refusal\ndngdk - Doing last 7 days: don't know\ndngna - Doing last 7 days: no answer\n\nHow do I need to prepare and preprocess the data if I want to built a Naive Bayes classifier?\n\n\nWhat is particular in data preparation for Naive Bayes that is not necessary for other machine learning models?\n\n\nHow should I ideally preprocess the data that I feed into a Naive Bayes classifier?\n\n\nI want to build a Naive Bayes Classifier. Please outline the preprocessing steps that you would recommend and provide tidymodels recipe code that includes those step.\nPlease write the code into a single recipe.\n\n\n1.6 Prompts: Data visualization\nI have a dataset called \"data\" that includes the variable age. Please provide me with ggplot code to produce a histogram.\nPlease explain the ggplot2 code (add comments to the code).\nI want to change the x-axis lables (angle 50%) in the ggplot2 code below:\nI can I encode data dimensions in a graph? What possibilities do I have?\nHow can I ideally visualize a linegraph where the two lines are perfectly overlapping each other but I want to visualize just that.\nHow can I translate the code below when I want to use the sf package in R instead of rgdal?\n\nreadOGR(dsn=\"www/data\", layer=\"VG250_GEM\", encoding = \"ASCII\", verbose = FALSE)\n\n1.6.1 ChatGPT4o: Upload data & generate plot\n\nLoad the data into R (here we use the preloaded swiss dataset)\nRun the code below\n\n# Load necessary packages\n    # install.packages(\"synthpop\")\n    library(datasets)\n    library(synthpop)\n    library(readr)\n\n# Load the dataset\n    data &lt;- swiss # load your own dataset here\n\n# View the original swiss dataset\n    head(data)\n\n# Generate synthetic data to anonymize the original dataset\n# The syn function will generate synthetic data while preserving the structure and statistical properties\n    synth_data &lt;- syn(data)\n\n# View the synthetic data\n    head(synth_data$syn)\n\n# Replace the original data with the synthetic data\n    data &lt;- synth_data$syn\n\n# View the modified dataset to ensure it has been replaced correctly\n    head(data)\n\n# Save the new dataset locally\n    write_csv(data, \"data_fake.csv\")\n\nUpload data_fake.csv and Figure 1 (this is just an example) into ChatGPT4o.\n\n\n\n\n\n\n\n\n\nFigure 1: Coefficient plot\n\n\n\n\n\n\nUse the following prompt. If the plot is not based on that particular dataset, i.e., include the variable names of the dataset, you may have to also add which variables should be mapped in which way.\n\nI uploaded a dataset and a plot. Please provide me the ggplot2 code that I need to produce that plot based on the data in one code chunk.\n\nAs a follow-up you can refine the plot code through prompts (\"Please omit the intercept from the plot\").\n\n\n\n\n1.7 Prompts: Modeling\nWhat is the difference between a logistic regression model and naive bayes in the machine learning context?\n\n\nWhich machine learning models that we can use for classification have a problem with class imbalance?"
  },
  {
    "objectID": "08-dos-and-donts.html#use-the-browser-inspector",
    "href": "08-dos-and-donts.html#use-the-browser-inspector",
    "title": "Good practices when building your own app",
    "section": "2.1 Use the browser inspector",
    "text": "2.1 Use the browser inspector\n\nBrowser inspectors are an extremely powerful tool that goes far beyond the scope of this workshop\nIt can be used to take a deep look at a website\n\nWhat colors and fonts are used?\nHow would the Shiny app look like on different screen sizes?\nHow would the Shiny app look like to color-blind people?\nHow are UI elements translated to HTML and CSS?\nHow are widths and heights translated to pixels?\nWhich HTTP requests are sent when running the Shiny app?\nDoes my website evoke any client-side errors?\n… and a lot more\n\n\n\n2.1.1 Browser inspectors in the wild\n\nEvery popular browser has its own implementation of an inspector\n\nFirefox Page Inspector\nChrome DevTools\nOpera Web Inspector\nEdge Inspect Tool\nSafari Web Inspector\n\n\n\n\n\nSimulating an iPad view using the Firefox Page Inspector\n\n\n\n\n2.1.2 Pros and Cons\n\nInspectors are useful for:\n\nConveying an understanding of essential HTML and CSS\nFine-tuning the UI of a Shiny app\nImplementing corporate designs\n\nInspectors are excessive if:\n\nThe goal is primarily to get a functioning app\nExploring a new elaborate tool beyond Shiny is a bit too much"
  },
  {
    "objectID": "08-dos-and-donts.html#organize-your-code",
    "href": "08-dos-and-donts.html#organize-your-code",
    "title": "Good practices when building your own app",
    "section": "3 Organize your code",
    "text": "3 Organize your code\n\nShiny code becomes messy really quick!\nIt is even more important than in normal code to keep code clean and tidy\nWhy should I organize my code?\n\nIt is easier for colleagues to quickly grasp what your code does\nIt is easier for you to get back to your project after some time\nProgramming with organized code is much faster and much more fun\n\n\n\n3.1 Functional programming\n\nWrap code in functions if:\n\nIt is repeated more than two times\nIt is complex and might profit from abstraction\n\nBad:\n\n\nexp(mean(log(iris$Sepal.Length)))\nexp(mean(log(iris$Sepal.Width)))\nexp(mean(log(iris$Petal.Length)))\nexp(mean(log(iris$Petal.Width)))\n\n\nGood:\n\n\ngeometric_mean &lt;- function(x) exp(mean(log(x)))\nsummarize(iris, across(where(is.numeric), geometric_mean))\n\n\n\n3.2 Stick to a style guide\n\nAdopting a consistent coding style drastically improves readability for yourself and contributors\nThe styler and lintr packages automatically check your code for style inconsistencies, bad practictes, and possible syntactic/semantic errors\nThe following code is valid, but deciphering what’s going on might take a while\n\n\nui&lt;-fluidPage(selectInput(\"var\"\n            ,\"Variable\",names(mtcars))\n  ,numericInput(\"bins\",\"bins\",10,min= 1),plotOutput(\"hist\"))\nserver&lt;-\nfunction(\ninput,output,session\n) {\n  data&lt;-\n    reactive(\n             mtcars[[input$var]]\n    )\n  output$hist&lt;-\n    renderPlot(\n    {hist(data()\n          ,breaks=input$bins\n          ,main=input$var)},res =96\n)}\n\n\n\n3.3 Annotate your code\n\nEven in smaller apps, Shiny code is multiple hundred lines long\nRStudio annotations can help navigate large R code files\n\n\n# Header 1 ----\n## Header 1.1 ----\n### Header 1.1.1 ----\n### Header 1.1.2 ----\n# Header 2 ----\n\n\n\n\nExample of an RStudio outline\n\n\n\n\n3.4 Modularize your Shiny code\n\nIf your Shiny app is divided into multiple tabs or sections, it might make sense to wrap it into modules\nBy modularizing, you divide a large Shiny app into multiple smaller pieces that are isolated from each other\nModularization is a very advanced topic and there is an entire chapter in Mastering Shiny – but it is good to know that it’s possible\n\n\n\n\nExample of a modularized app\n\n\n\n\n3.5 Build your Shiny app as a package\n\nThis tip is particularly useful for larger apps\nThe idea is to build a robust scaffold around the Shiny app\nA number of R packages specialize on this task: Rhino golem, and leprechaun\nBenefits:\n\nAutomatically handles dependencies, no more library and there is no package called ‘xxx’\nFacilitates sharing Shiny apps without deployment\nSupports multiple Shiny apps in one app\nEnables testing workflows and thus more robust code\nAll R code files in one place"
  },
  {
    "objectID": "10-full-code.html",
    "href": "10-full-code.html",
    "title": "Example app: Full code",
    "section": "",
    "text": "1 ESS app code\n\nBelow you can find the complete code used to built the example ESS app that we create alongside the workshop.\n\n\nlibrary(tidyverse)\nlibrary(shiny)\nlibrary(plotly)\nlibrary(leaflet)\nlibrary(haven)\n\ness &lt;- readRDS(\"ess_trust.rds\")\ness_geo &lt;- readRDS(\"ess_trust_geo.rds\")\n\n# UI ----\nui &lt;- fluidPage(\n  titlePanel(\"European Social Survey - round 10\"),\n  \n  ## Sidebar ----\n  sidebarLayout(\n    sidebarPanel(\n      ### select dependent variable\n      selectInput(\n        \"xvar\",\n        label = \"Select a dependent variable\",\n        choices = c(\n          \"Trust in country's parliament\" = \"trust_parliament\",\n          \"Trust in the legal system\" = \"trust_legal\",\n          \"Trust in the police\" = \"trust_police\",\n          \"Trust in politicians\" = \"trust_politicians\",\n          \"Trust in political parties\" = \"trust_parties\",\n          \"Trust in the European Parliament\" = \"trust_eu\",\n          \"Trust in the United Nations\" = \"trust_un\"\n        )\n      ),\n      \n      ### select a variable ----\n      selectInput(\n        \"yvar\",\n        label = \"Select an independent variable\",\n        choices = c(\n          \"Placement on the left-right scale\" = \"left_right\",\n          \"Age\" = \"age\",\n          \"Feeling about household's income\" = \"income_feeling\",\n          \"How often do you use the internet?\" = \"internet_use\",\n          \"How happy are you?\" = \"happiness\"\n        )\n      ),\n      \n      ### select a country ----\n      selectizeInput(\n        \"countries\",\n        label = \"Filter by country\",\n        choices = unique(ess$country),\n        selected = \"FR\",\n        multiple = TRUE\n      ),\n      \n      ### filter values ----\n      sliderInput(\n        \"range\",\n        label = \"Set a value range\",\n        min = min(ess$trust_parliament, na.rm = TRUE),\n        max = max(ess$trust_parliament, na.rm = TRUE),\n        value = range(ess$trust_parliament, na.rm = TRUE),\n        step = 1\n      )\n    ),\n    \n    ## Main panel ----\n    mainPanel(\n      tabsetPanel(\n        type = \"tabs\",\n        \n        ### Table tab ----\n        tabPanel(\n          title = \"Table\",\n          div(\n            style = \"height: 600px; overflow-y: auto;\",\n            tableOutput(\"table\")\n          )\n        ),\n        \n        ### Plot tab ----\n        tabPanel(\n          title = \"Plot\",\n          plotlyOutput(\"plot\", height = 600)\n        ),\n        \n        ### Map tab ----\n        tabPanel(\n          title = \"Map\",\n          leafletOutput(\"map\", height = 600)\n        )\n      )\n    )\n  )\n)\n\n\n# Server ----\nserver &lt;- function(input, output, session) {\n  # update slider ----\n  observe({\n    var &lt;- na.omit(ess[[input$xvar]])\n    is_ordered &lt;- is.ordered(var)\n    var &lt;- as.numeric(var)\n    updateSliderInput(\n      inputId = \"range\",\n      min = min(var),\n      max = max(var),\n      value = range(var),\n      step = if (is_ordered) 1\n    )\n  }) %&gt;%\n    bindEvent(input$xvar)\n  \n  # filter data ----\n  filtered &lt;- reactive({\n    req(input$countries, cancelOutput = TRUE)\n    \n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    range &lt;- input$range\n    \n    # select country\n    ess &lt;- ess[ess$country %in% input$countries, ]\n    \n    # select variable\n    ess &lt;- ess[c(\"idno\", \"country\", xvar, yvar)]\n    \n    # apply range\n    ess &lt;- ess[ess[[xvar]] &gt; range[1] & ess[[xvar]] &lt; range[2], ]\n    ess\n  })\n  \n  # render table ----\n  output$table &lt;- renderTable({\n    filtered()\n  }, height = 400)\n\n  # render plot ----\n  output$plot &lt;- renderPlotly({\n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    plot_data &lt;- filtered() %&gt;%\n      drop_na() %&gt;%\n      mutate(across(where(is.numeric), .fns = as.ordered))\n\n    p &lt;- ggplot(plot_data) +\n      aes(x = .data[[yvar]], y = .data[[xvar]], group = .data[[yvar]]) +\n      geom_violin(fill = \"lightblue\", show.legend = FALSE) +\n      theme_classic()\n    plotly::ggplotly(p)\n  })\n  \n  # render map ----\n  output$map &lt;- renderLeaflet({\n    var &lt;- input$xvar\n    ess_geo &lt;- ess_geo[c(\"country\", var)]\n    \n    # create labels with a bold title and a body\n    labels &lt;- sprintf(\n      \"&lt;strong&gt;%s&lt;/strong&gt;&lt;br&gt;%s\",\n      ess_geo$country,\n      ess_geo[[var]]\n    )\n    labels &lt;- lapply(labels, HTML)\n    \n    # create a palette for numerics and ordinals\n    pal &lt;- colorNumeric(\"YlOrRd\", domain = NULL)\n\n    # construct leaflet canvas\n    leaflet(ess_geo) %&gt;%\n      # add base map\n      addTiles() %&gt;%\n      # add choropleths\n      addPolygons(\n        fillColor = pal(ess_geo[[var]]),\n        weight = 2,\n        opacity = 1,\n        color = \"white\",\n        fillOpacity = 0.7,\n        # highlight polygons on hover\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"#666\",\n          fillOpacity = 0.7,\n          bringToFront = TRUE\n        ),\n        label = labels\n      ) %&gt;%\n      # add a legend\n      addLegend(\n        position = \"bottomleft\",\n        pal = pal,\n        values = ess_geo[[var]],\n        opacity = 0.7,\n        title = var\n      )\n  })\n}\n\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "09-full-code.html",
    "href": "09-full-code.html",
    "title": "Example app: Full code",
    "section": "",
    "text": "1 ESS app code\n\nBelow you can find the complete code used to built the example ESS app that we create alongside the workshop.\n\n\nlibrary(tidyverse)\nlibrary(shiny)\nlibrary(plotly)\nlibrary(leaflet)\nlibrary(haven)\n\ness &lt;- readRDS(\"ess_trust.rds\")\ness_geo &lt;- readRDS(\"ess_trust_geo.rds\")\n\n# UI ----\nui &lt;- fluidPage(\n  titlePanel(\"European Social Survey - round 10\"),\n  \n  ## Sidebar ----\n  sidebarLayout(\n    sidebarPanel(\n      ### select dependent variable\n      selectInput(\n        \"xvar\",\n        label = \"Select a dependent variable\",\n        choices = c(\n          \"Trust in country's parliament\" = \"trust_parliament\",\n          \"Trust in the legal system\" = \"trust_legal\",\n          \"Trust in the police\" = \"trust_police\",\n          \"Trust in politicians\" = \"trust_politicians\",\n          \"Trust in political parties\" = \"trust_parties\",\n          \"Trust in the European Parliament\" = \"trust_eu\",\n          \"Trust in the United Nations\" = \"trust_un\"\n        )\n      ),\n      \n      ### select a variable ----\n      selectInput(\n        \"yvar\",\n        label = \"Select an independent variable\",\n        choices = c(\n          \"Placement on the left-right scale\" = \"left_right\",\n          \"Age\" = \"age\",\n          \"Feeling about household's income\" = \"income_feeling\",\n          \"How often do you use the internet?\" = \"internet_use\",\n          \"How happy are you?\" = \"happiness\"\n        )\n      ),\n      \n      ### select a country ----\n      selectizeInput(\n        \"countries\",\n        label = \"Filter by country\",\n        choices = unique(ess$country),\n        selected = \"FR\",\n        multiple = TRUE\n      ),\n      \n      ### filter values ----\n      sliderInput(\n        \"range\",\n        label = \"Set a value range\",\n        min = min(ess$trust_parliament, na.rm = TRUE),\n        max = max(ess$trust_parliament, na.rm = TRUE),\n        value = range(ess$trust_parliament, na.rm = TRUE),\n        step = 1\n      )\n    ),\n    \n    ## Main panel ----\n    mainPanel(\n      tabsetPanel(\n        type = \"tabs\",\n        \n        ### Table tab ----\n        tabPanel(\n          title = \"Table\",\n          div(\n            style = \"height: 600px; overflow-y: auto;\",\n            tableOutput(\"table\")\n          )\n        ),\n        \n        ### Plot tab ----\n        tabPanel(\n          title = \"Plot\",\n          plotlyOutput(\"plot\", height = 600)\n        ),\n        \n        ### Map tab ----\n        tabPanel(\n          title = \"Map\",\n          leafletOutput(\"map\", height = 600)\n        )\n      )\n    )\n  )\n)\n\n\n# Server ----\nserver &lt;- function(input, output, session) {\n  # update slider ----\n  observe({\n    var &lt;- na.omit(ess[[input$xvar]])\n    is_ordered &lt;- is.ordered(var)\n    var &lt;- as.numeric(var)\n    updateSliderInput(\n      inputId = \"range\",\n      min = min(var),\n      max = max(var),\n      value = range(var),\n      step = if (is_ordered) 1\n    )\n  }) %&gt;%\n    bindEvent(input$xvar)\n  \n  # filter data ----\n  filtered &lt;- reactive({\n    req(input$countries, cancelOutput = TRUE)\n    \n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    range &lt;- input$range\n    \n    # select country\n    ess &lt;- ess[ess$country %in% input$countries, ]\n    \n    # select variable\n    ess &lt;- ess[c(\"idno\", \"country\", xvar, yvar)]\n    \n    # apply range\n    ess &lt;- ess[ess[[xvar]] &gt; range[1] & ess[[xvar]] &lt; range[2], ]\n    ess\n  })\n  \n  # render table ----\n  output$table &lt;- renderTable({\n    filtered()\n  }, height = 400)\n\n  # render plot ----\n  output$plot &lt;- renderPlotly({\n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    plot_data &lt;- filtered() %&gt;%\n      drop_na() %&gt;%\n      mutate(across(where(is.numeric), .fns = as.ordered))\n\n    p &lt;- ggplot(plot_data) +\n      aes(x = .data[[yvar]], y = .data[[xvar]], group = .data[[yvar]]) +\n      geom_violin(fill = \"lightblue\", show.legend = FALSE) +\n      theme_classic()\n    plotly::ggplotly(p)\n  })\n  \n  # render map ----\n  output$map &lt;- renderLeaflet({\n    var &lt;- input$xvar\n    ess_geo &lt;- ess_geo[c(\"country\", var)]\n    \n    # create labels with a bold title and a body\n    labels &lt;- sprintf(\n      \"&lt;strong&gt;%s&lt;/strong&gt;&lt;br&gt;%s\",\n      ess_geo$country,\n      ess_geo[[var]]\n    )\n    labels &lt;- lapply(labels, HTML)\n    \n    # create a palette for numerics and ordinals\n    pal &lt;- colorNumeric(\"YlOrRd\", domain = NULL)\n\n    # construct leaflet canvas\n    leaflet(ess_geo) %&gt;%\n      # add base map\n      addTiles() %&gt;%\n      # add choropleths\n      addPolygons(\n        fillColor = pal(ess_geo[[var]]),\n        weight = 2,\n        opacity = 1,\n        color = \"white\",\n        fillOpacity = 0.7,\n        # highlight polygons on hover\n        highlightOptions = highlightOptions(\n          weight = 2,\n          color = \"#666\",\n          fillOpacity = 0.7,\n          bringToFront = TRUE\n        ),\n        label = labels\n      ) %&gt;%\n      # add a legend\n      addLegend(\n        position = \"bottomleft\",\n        pal = pal,\n        values = ess_geo[[var]],\n        opacity = 0.7,\n        title = var\n      )\n  })\n}\n\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Example app: Full code"
    ]
  },
  {
    "objectID": "07-deployment.html#interpreting-flame-graphs",
    "href": "07-deployment.html#interpreting-flame-graphs",
    "title": "Strengthen & Deploy",
    "section": "2.1 Interpreting flame graphs",
    "text": "2.1 Interpreting flame graphs\n\nFlame graphs are a tool to quickly visualize performance of individual parts of an app\nThey consist of two-dimensional “function boxes” which represent an individual function call\n\nThe width of a function box indicates the time it took to process the function call\nThe stacked height of function boxes indicates their ancestry. The lower boxes are the parents and the upper boxes are their children, i.e. the lower boxes call the upper boxes\n\n\n\n\n\nThe concept of a flame graph",
    "crumbs": [
      "Strengthen & Deploy"
    ]
  },
  {
    "objectID": "08-build-your-own.html",
    "href": "08-build-your-own.html",
    "title": "Good practices when building your own app",
    "section": "",
    "text": "Learning outcomes:\n\nBecome proficient in designing and developing a Shiny app from start to finish\nDevelop and sketch out ideas about interactive visualization as Shiny app prototypes\nAcquire a holistic understanding of the Shiny development workflow\nGood practices for everyday Shiny programming",
    "crumbs": [
      "Good practices when building your own app"
    ]
  },
  {
    "objectID": "08-build-your-own.html#use-large-language-models-llms",
    "href": "08-build-your-own.html#use-large-language-models-llms",
    "title": "Good practices when building your own app",
    "section": "2.1 Use Large Language Models (LLMs)",
    "text": "2.1 Use Large Language Models (LLMs)\n\nLLMs increase productivity and we recommend using it regularly (get used to it)\n\n\n2.1.1 Attention: Hallucination\n\nAttention: Always cross-validate the information given by a LLM\n\nWhy? Hallucination.. (see characterization statements on Wikipedia)\n\n“a tendency to invent facts in moments of uncertainty” (OpenAI, May 2023)\n“a model’s logical mistakes” (OpenAI, May 2023)\nfabricating information entirely, but behaving as if spouting facts (CNBC, May 2023)\n“making up information” (The Verge, February 2023)\n\n\nVery good overview on Wikipedia\nDiscussions in (Zhang2023-ok?), (Huang2023-zf?) and (Metz2023-qz?)\nProblem less relevant when asking LLMs for function code because you check/test it yourself\n\n\n\n2.1.2 Avaible LLMs\n\nClosed-source\n\nChatGPT X (OpenAI, ~Microsoft): https://chat.openai.com/\nGemini (Google) https://gemini.google.com/\nAmazon Titan: https://aws.amazon.com/bedrock/titan/\n\nOpen-source\n\nHuggingChat: https://huggingface.co/chat/\nLAMA: https://github.com/facebookresearch/LAMA\n\nCurated list of papers about large language models\nTop Open-Source LLMs for 2024 and Their Uses\n\n\n\n2.1.3 Useful prompts\n\nLLMs can be used to…\n\n…code & understand code.\n…solve data management tasks.\n…solve data visualization tasks.\n…solve modeling tasks.\n…understand statistical theory.\n\nSome exemplary prompts in the sections below.\n\n\n\n2.1.4 Prompts: code & understand code/functions\nPlease explain what the shiny app below does. How does it work and what is it's logic.\n\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\")\n)\n\nserver &lt;- function(input, output, session) {\n  output$greeting &lt;- renderText({\n    paste0(\"Hello \", input$name, \"!\")\n  })\n}\nshinyApp(ui, server)\nFollowed by:\nPlease add ... to the shiny app.\nPlease explain the hyperparamters in this model:\n\nxgb_spec &lt;- boost_tree(\n  trees = 1000,\n  tree_depth = tune(), min_n = tune(),\n  loss_reduction = tune(),                     ## first three: model complexity\n  sample_size = tune(), mtry = tune(),         ## randomness\n  learn_rate = tune()                          ## step size\n) %&gt;%\n  set_engine(\"xgboost\") %&gt;%\n  set_mode(\"classification\")\nFollowed by:\nPlease further explain the learn_rate.\n\n\n\n2.1.5 Prompts: Data management & preparation\nPlease provide dplyr code to rename the following variables and give them better names (lowercaps). Below is the codebook:\n\npdwrk - Doing last 7 days: paid work\nedctn - Doing last 7 days: education\nuempla - Doing last 7 days: unemployed, actively looking for job\nuempli - Doing last 7 days: unemployed, not actively looking for job\ndsbld - Doing last 7 days: permanently sick or disabled\nrtrd - Doing last 7 days: retired\ncmsrv - Doing last 7 days: community or military service\nhswrk - Doing last 7 days: housework, looking after children, others\ndngoth - Doing last 7 days: other\ndngref - Doing last 7 days: refusal\ndngdk - Doing last 7 days: don't know\ndngna - Doing last 7 days: no answer\n\nHow do I need to prepare and preprocess the data if I want to built a Naive Bayes classifier?\n\n\nWhat is particular in data preparation for Naive Bayes that is not necessary for other machine learning models?\n\n\nHow should I ideally preprocess the data that I feed into a Naive Bayes classifier?\n\n\nI want to build a Naive Bayes Classifier. Please outline the preprocessing steps that you would recommend and provide tidymodels recipe code that includes those step.\nPlease write the code into a single recipe.\n\n\n2.1.6 Prompts: Data visualization\nI have a dataset called \"data\" that includes the variable age. Please provide me with ggplot code to produce a histogram.\nPlease explain the ggplot2 code (add comments to the code).\nI want to change the x-axis lables (angle 50%) in the ggplot2 code below:\nI can I encode data dimensions in a graph? What possibilities do I have?\nHow can I ideally visualize a linegraph where the two lines are perfectly overlapping each other but I want to visualize just that.\nHow can I translate the code below when I want to use the sf package in R instead of rgdal?\n\nreadOGR(dsn=\"www/data\", layer=\"VG250_GEM\", encoding = \"ASCII\", verbose = FALSE)\n\n2.1.6.1 ChatGPT4o: Upload data & generate plot\n\nLoad the data into R (here we use the preloaded swiss dataset)\nRun the code below\n\n# Load necessary packages\n    # install.packages(\"synthpop\")\n    library(datasets)\n    library(synthpop)\n    library(readr)\n\n# Load the dataset\n    data &lt;- swiss # load your own dataset here\n\n# View the original swiss dataset\n    head(data)\n\n# Generate synthetic data to anonymize the original dataset\n# The syn function will generate synthetic data while preserving the structure and statistical properties\n    synth_data &lt;- syn(data)\n\n# View the synthetic data\n    head(synth_data$syn)\n\n# Replace the original data with the synthetic data\n    data &lt;- synth_data$syn\n\n# View the modified dataset to ensure it has been replaced correctly\n    head(data)\n\n# Save the new dataset locally\n    write_csv(data, \"data_fake.csv\")\n\nUpload data_fake.csv and Figure 1 (this is just an example) into ChatGPT4o.\n\n\n\n\n\n\n\n\n\nFigure 1: Coefficient plot\n\n\n\n\n\n\nUse the following prompt. If the plot is not based on that particular dataset, i.e., include the variable names of the dataset, you may have to also add which variables should be mapped in which way.\n\nI uploaded a dataset and a plot. Please provide me the ggplot2 code that I need to produce that plot based on the data in one code chunk.\n\nAs a follow-up you can refine the plot code through prompts (\"Please omit the intercept from the plot\").\n\n\n\n\n2.1.7 Prompts: Modeling\nWhat is the difference between a logistic regression model and naive bayes in the machine learning context?\n\n\nWhich machine learning models that we can use for classification have a problem with class imbalance?",
    "crumbs": [
      "Good practices when building your own app"
    ]
  },
  {
    "objectID": "08-build-your-own.html#use-the-browser-inspector",
    "href": "08-build-your-own.html#use-the-browser-inspector",
    "title": "Good practices when building your own app",
    "section": "2.3 Use the browser inspector",
    "text": "2.3 Use the browser inspector\n\nBrowser inspectors are an extremely powerful tool that goes far beyond the scope of this workshop\nIt can be used to take a deep look at a website\n\nWhat colors and fonts are used?\nHow would the Shiny app look like on different screen sizes?\nHow would the Shiny app look like to color-blind people?\nHow are UI elements translated to HTML and CSS?\nHow are widths and heights translated to pixels?\nWhich HTTP requests are sent when running the Shiny app?\nDoes my website evoke any client-side errors?\n… and a lot more\n\n\n\n2.3.1 Browser inspectors in the wild\n\nEvery popular browser has its own implementation of an inspector\n\nFirefox Page Inspector\nChrome DevTools\nOpera Web Inspector\nEdge Inspect Tool\nSafari Web Inspector\n\n\n\n\n\nSimulating an iPad view using the Firefox Page Inspector\n\n\n\n\n2.3.2 Pros and Cons\n\nInspectors are useful for:\n\nConveying an understanding of essential HTML and CSS\nFine-tuning the UI of a Shiny app\nImplementing corporate designs\n\nInspectors are excessive if:\n\nThe goal is primarily to get a functioning app\nExploring a new elaborate tool beyond Shiny is a bit too much",
    "crumbs": [
      "Good practices when building your own app"
    ]
  },
  {
    "objectID": "08-build-your-own.html#organize-your-code",
    "href": "08-build-your-own.html#organize-your-code",
    "title": "Good practices when building your own app",
    "section": "2.4 Organize your code",
    "text": "2.4 Organize your code\n\nShiny code becomes messy really quick!\nIt is even more important than in normal code to keep code clean and tidy\nWhy should I organize my code?\n\nIt is easier for colleagues to quickly grasp what your code does\nIt is easier for you to get back to your project after some time\nProgramming with organized code is much faster and much more fun\n\n\n\n2.4.1 Functional programming\n\nWrap code in functions if:\n\nIt is repeated more than two times\nIt is complex and might profit from abstraction\n\nBad:\n\n\nexp(mean(log(iris$Sepal.Length)))\nexp(mean(log(iris$Sepal.Width)))\nexp(mean(log(iris$Petal.Length)))\nexp(mean(log(iris$Petal.Width)))\n\n\nGood:\n\n\ngeometric_mean &lt;- function(x) exp(mean(log(x)))\nsummarize(iris, across(where(is.numeric), geometric_mean))\n\n\n\n2.4.2 Stick to a style guide\n\nAdopting a consistent coding style drastically improves readability for yourself and contributors\nThe styler and lintr packages automatically check your code for style inconsistencies, bad practictes, and possible syntactic/semantic errors\nThe following code is valid, but deciphering what’s going on might take a while\n\n\nui&lt;-fluidPage(selectInput(\"var\"\n            ,\"Variable\",names(mtcars))\n  ,numericInput(\"bins\",\"bins\",10,min= 1),plotOutput(\"hist\"))\nserver&lt;-\nfunction(\ninput,output,session\n) {\n  data&lt;-\n    reactive(\n             mtcars[[input$var]]\n    )\n  output$hist&lt;-\n    renderPlot(\n    {hist(data()\n          ,breaks=input$bins\n          ,main=input$var)},res =96\n)}\n\n\n\n2.4.3 Annotate your code\n\nEven in smaller apps, Shiny code is multiple hundred lines long\nRStudio annotations can help navigate large R code files\n\n\n# Header 1 ----\n## Header 1.1 ----\n### Header 1.1.1 ----\n### Header 1.1.2 ----\n# Header 2 ----\n\n\n\n\nExample of an RStudio outline\n\n\n\n\n2.4.4 Modularize your Shiny code\n\nIf your Shiny app is divided into multiple tabs or sections, it might make sense to wrap it into modules\nBy modularizing, you divide a large Shiny app into multiple smaller pieces that are isolated from each other\nModularization is a very advanced topic and there is an entire chapter in Mastering Shiny – but it is good to know that it’s possible\n\n\n\n\nExample of a modularized app\n\n\n\n\n2.4.5 Build your Shiny app as a package\n\nThis tip is particularly useful for larger apps\nThe idea is to build a robust scaffold around the Shiny app\nA number of R packages specialize on this task: Rhino golem, and leprechaun\nBenefits:\n\nAutomatically handles dependencies, no more library and there is no package called ‘xxx’\nFacilitates sharing Shiny apps without deployment\nSupports multiple Shiny apps in one app\nEnables testing workflows and thus more robust code\nAll R code files in one place",
    "crumbs": [
      "Good practices when building your own app"
    ]
  },
  {
    "objectID": "08-build-your-own.html#bring-your-own-dataset",
    "href": "08-build-your-own.html#bring-your-own-dataset",
    "title": "Good practices when building your own app",
    "section": "3.1 Bring your own dataset",
    "text": "3.1 Bring your own dataset\n\nIf you already have a dataset that you want to build an app around, feel free to do this today!",
    "crumbs": [
      "Good practices when building your own app"
    ]
  },
  {
    "objectID": "08-build-your-own.html#european-social-survey---wave-9",
    "href": "08-build-your-own.html#european-social-survey---wave-9",
    "title": "Good practices when building your own app",
    "section": "3.2 European social survey - wave 9",
    "text": "3.2 European social survey - wave 9\n\nWe used this dataset alongside the workshop\nIt contains data on political trust, political spectrum, demographics, internet use, happiness, and income\nThe dataset contains haven labels which help understand the scales of each variables\nBase information:\n\nRegion: Europe\nTime: 2018\nObservations: 49,519\nVariables: 14\n\nHow to read the data:\n\n\nlibrary(haven) # the haven package has to be attached\ness &lt;- readRDS(\"ess_trust.rds\")\ness\n\n\n\n# A tibble: 49,519 × 14\n    idno country internet_use          trust_parliament trust_legal trust_police\n   &lt;dbl&gt; &lt;chr&gt;   &lt;dbl+lbl&gt;             &lt;dbl+lbl&gt;        &lt;dbl+lbl&gt;   &lt;dbl+lbl&gt;   \n 1    27 AT      5 [Every day]         5 [5]            10 [Comple… 10 [Complet…\n 2   137 AT      5 [Every day]         7 [7]             8 [8]       8 [8]      \n 3   194 AT      4 [Most days]         6 [6]             8 [8]       8 [8]      \n 4   208 AT      5 [Every day]         0 [No trust at …  5 [5]       8 [8]      \n 5   220 AT      1 [Never]             7 [7]             8 [8]       8 [8]      \n 6   254 AT      2 [Only occasionally] 6 [6]             5 [5]       7 [7]      \n 7   290 AT      1 [Never]             0 [No trust at …  5 [5]       5 [5]      \n 8   301 AT      1 [Never]             5 [5]             7 [7]       7 [7]      \n 9   305 AT      5 [Every day]         1 [1]            10 [Comple… 10 [Complet…\n10   400 AT      4 [Most days]         3 [3]             5 [5]       5 [5]      \n# ℹ 49,509 more rows\n# ℹ 8 more variables: trust_politicians &lt;dbl+lbl&gt;, trust_parties &lt;dbl+lbl&gt;,\n#   trust_eu &lt;dbl+lbl&gt;, trust_un &lt;dbl+lbl&gt;, left_right &lt;dbl+lbl&gt;,\n#   happiness &lt;dbl+lbl&gt;, age &lt;dbl+lbl&gt;, income_feeling &lt;dbl+lbl&gt;\n\n\n\nDatamap:\n\n\n\n\n\n\n\n\nColumn\nDescription\n\n\n\n\nidno\nRespondent ID\n\n\ncountry\nCountry ID\n\n\ninternet_use\nPeople can use the internet on different devices such as computers, tablets and smartphones. How often do you use the internet on these or any other devices, whether for work or personal use?\n\n\ntrust_parliament\nHow much do you personally trust the national parliament?\n\n\ntrust_legal\nHow much do you personally trust the legal system?\n\n\ntrust_police\nHow much do you personally trust the police?\n\n\ntrust_politicians\nHow much do you personally trust politicians?\n\n\ntrust_parties\nHow much do you personal trust political parties?\n\n\ntrust_eu\nHow much do you personally trust the European parliament?\n\n\ntrust_un\nHow much do you personally trust the United Nations?\n\n\nleft_right\nIn politics people sometimes talk of ‘left’ and ‘right’. Where would you place yourself on this scale, where 0 means the left and 10 means the right?\n\n\nhappiness\nTaking all things together, how happy would you say you are?\n\n\nage\nAge of the respondent\n\n\nincome_feeling\nWhich of the descriptions on this card comes closest to how you feel about your household’s income nowadays?",
    "crumbs": [
      "Good practices when building your own app"
    ]
  },
  {
    "objectID": "08-build-your-own.html#guerry-dataset",
    "href": "08-build-your-own.html#guerry-dataset",
    "title": "Good practices when building your own app",
    "section": "3.3 Guerry dataset",
    "text": "3.3 Guerry dataset\n\nThis dataset stems from the “Essay on the Moral Statistics of France” from 1830, written by André-Michel Guerry\nIt features a number of indicators of the so-called “moral statistics”, including crime, literacy, wealth, donations, and more\nThe dataset is an sf dataset containing department polygons of 19th century France – it may thus be convenient for creating an app using leaflet maps\nBase information:\n\nRegion: France\nTime: 1815-1834\nObservations: 85\nVariables: 27\nSource: https://sfdep.josiahparry.com/reference/guerry\n\nHow to read the data:\n\n\nguerry &lt;- readRDS(url(\"https://github.com/paulcbauer/shiny_workshop/raw/shiny_workshop_2024/data/guerry.rds\"))\nguerry\n\nSimple feature collection with 85 features and 26 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441\nCRS:           NA\n# A tibble: 85 × 27\n   code_dept count ave_id_geo  dept region department   crime_pers crime_prop\n   &lt;fct&gt;     &lt;dbl&gt;      &lt;dbl&gt; &lt;int&gt; &lt;fct&gt;  &lt;fct&gt;             &lt;int&gt;      &lt;int&gt;\n 1 01            1         49     1 E      Ain               28870      15890\n 2 02            1        812     2 N      Aisne             26226       5521\n 3 03            1       1418     3 C      Allier            26747       7925\n 4 04            1       1603     4 E      Basses-Alpes      12935       7289\n 5 05            1       1802     5 E      Hautes-Alpes      17488       8174\n 6 07            1       2249     7 S      Ardeche            9474      10263\n 7 08            1      35395     8 N      Ardennes          35203       8847\n 8 09            1       2526     9 S      Ariege             6173       9597\n 9 10            1      34410    10 E      Aube              19602       4086\n10 11            1       2807    11 S      Aude              15647      10431\n# ℹ 75 more rows\n# ℹ 19 more variables: literacy &lt;int&gt;, donations &lt;int&gt;, infants &lt;int&gt;,\n#   suicides &lt;int&gt;, main_city &lt;ord&gt;, wealth &lt;int&gt;, commerce &lt;int&gt;,\n#   clergy &lt;int&gt;, crime_parents &lt;int&gt;, infanticide &lt;int&gt;,\n#   donation_clergy &lt;int&gt;, lottery &lt;int&gt;, desertion &lt;int&gt;, instruction &lt;int&gt;,\n#   prostitutes &lt;int&gt;, distance &lt;dbl&gt;, area &lt;int&gt;, pop1831 &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON&gt;\n\n\n\nDatamap:\n\n\n\n\n\n\n\n\nColumn\nDescription\n\n\n\n\ndept\nDepartment ID\n\n\nregion\nRegion of France (‘N’=’North’, ‘S’=’South’, ‘E’=’East’, ‘W’=’West’, ‘C’=’Central’)\n\n\ndepartment\nDepartment name\n\n\ncrime_pers\nPopulation per crime against persons\n\n\ncrime_prop\nPopulation per crime against property\n\n\nliteracy\nPercent of military conscripts who can read and write\n\n\ndonations\nNumber of donations to the poor\n\n\ninfants\nPopulation per illegitimate birth\n\n\nsuicides\nPopulation per suicide\n\n\nmain_city\nSize of the principal city (‘1:Sm’, ‘2:Med’, ‘3:Lg’)\n\n\nwealth\nPer capita tax on personal property\n\n\ncommerce\nRank of the number of patents per population\n\n\nclergy\nRank of the number of Catholic priests in active service population\n\n\ncrime_parents\nRank of the ratio of crimes against parents to all crimes\n\n\ninfanticide\nNumber of infanticides per population\n\n\ndonation_clergy\nNumber of bequests and donations to the clergy per population\n\n\nlottery\nPer capita wager on Royal Lottery\n\n\ndesertion\nNumber of soldiers accused of desertion minus the deficit produced by insuffiency of available billets\n\n\ninstruction\nInverse literacy\n\n\nprostitutes\nNumber of prostitutes registered in Paris\n\n\ndistance\nDistance to paris in km\n\n\narea\nArea in km²\n\n\npop1831\nPopulation in 1831, in thousands",
    "crumbs": [
      "Good practices when building your own app"
    ]
  },
  {
    "objectID": "08-dos-and-donts.html#loading-things",
    "href": "08-dos-and-donts.html#loading-things",
    "title": "Good practices when building your own app",
    "section": "2 Loading things",
    "text": "2 Loading things"
  },
  {
    "objectID": "08-dos-and-donts.html#use-the-browser-inspector-jonas",
    "href": "08-dos-and-donts.html#use-the-browser-inspector-jonas",
    "title": "Good practices when building your own app",
    "section": "2 Use the browser inspector (Jonas)",
    "text": "2 Use the browser inspector (Jonas)\n\nBrowser inspectors are an extremely powerful tool that goes far beyond the scope of this workshop\nIt can be used to take a deep look at a website\n\nWhat colors and fonts are used?\nHow would the Shiny app look like on different screen sizes?\nHow would the Shiny app look like to color-blind people?\nHow are UI elements translated to HTML and CSS?\nHow are widths and heights translated to pixels?\nWhich HTTP requests are sent when running the Shiny app?\nDoes my website evoke any client-side errors?\n… and a lot more\n\n\n\n2.1 Browser inspectors in the wild\n\nEvery popular browser has its own implementation of an inspector\n\nFirefox Page Inspector\nChrome DevTools\nOpera Web Inspector\nEdge Inspect Tool\nSafari Web Inspector\n\n\n\n\n\nSimulating an iPad view using the Firefox Page Inspector\n\n\n\n\n2.2 Pros and Cons\n\nInspectors are useful for:\n\nConveying an understanding of essential HTML and CSS\nFine-tuning the UI of a Shiny app\nImplementing corporate designs\n\nInspectors are excessive if:\n\nThe goal is primarily to get a functioning app\nExploring a new elaborate tool beyond Shiny is a bit too much"
  },
  {
    "objectID": "04-server-reactive-programming-i_UPDATE.html",
    "href": "04-server-reactive-programming-i_UPDATE.html",
    "title": "Server: Reactive programming",
    "section": "",
    "text": "Learning outcomes:\n\nUnderstand the logic underlying reactivity in Shiny apps\nConceiving and constructing reactive graphs\nImplement a basic I/O structure based on reactive elements\nSources: Wickham (2021, Ch. 3)"
  },
  {
    "objectID": "04-server-reactive-programming-i_UPDATE.html#basics",
    "href": "04-server-reactive-programming-i_UPDATE.html#basics",
    "title": "Server: Reactive programming",
    "section": "1 Basics",
    "text": "1 Basics\n\nIn Shiny, server logic is expressed using reactive programming (elegant powerful programming paradigm!)\nVery different to writing script that runs from start to end\nKey idea: specify a graph of dependencies so that when an input changes, all related outputs are automatically updated\nReactive programming makes flow of an app considerably simpler"
  },
  {
    "objectID": "04-server-reactive-programming-i_UPDATE.html#the-server-function",
    "href": "04-server-reactive-programming-i_UPDATE.html#the-server-function",
    "title": "Server: Reactive programming",
    "section": "2 The server function",
    "text": "2 The server function\n\n“Guts” of every shiny app below\n\n\nlibrary(shiny)\n\n# front end interface (Html)\n1ui &lt;- fluidPage()\n\n# back end logic\n2server &lt;- function(input, output, session) {}\n\nshinyApp(ui, server)\n\n\n1\n\nUser interface\n\n2\n\nServer\n\n\n\n\n\nui simple because every user gets same html\nserver more complicated because every user needs independent version of the app\n\ne.g., Julia using slider should not affect Petra’s ui!\n\nserver() is invoked each time new session starts\n\n3 parameters (input, output, session) that are created by Shiny (not by us!) when session starts connecting to specific session"
  },
  {
    "objectID": "04-server-reactive-programming-i_UPDATE.html#input-output-lists",
    "href": "04-server-reactive-programming-i_UPDATE.html#input-output-lists",
    "title": "Server: Reactive programming",
    "section": "3 Input & output (lists)",
    "text": "3 Input & output (lists)\n\ninput: a list-like object that contains all the input data sent from the browser, named according to the input ID\n\ne.g., numericInput(\"count\", label = \"Number of values\", value = 100) generates input$count\ninput can only be read from within reactive contexts created by a reactive functions like renderText() or reactive()\n\nreactive functions allow for outputs to automatically update when an input changes\n\n\noutput: a list-like object containing outputs named according to output ID\n\nDifference: output list used for sending output instead of receiving input through input list (always in concert with render function as below)\nQ: How many inputs/outputs/render functions are there in the code below? What does it do?\n\n\n\n\nSimple input/output example\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\")\n)\n\nserver &lt;- function(input, output, session) {\n1  output$greeting &lt;- renderText({\n    paste0(\"Hello \", input$name, \"!\")\n  })\n}\nshinyApp(ui, server)\n\n\n\n1\n\nrender functions, e.g., renderText() set up special reactive context that automatically tracks what inputs the output uses AND converts output of R code into HTML suitable for display on a web page"
  },
  {
    "objectID": "04-server-reactive-programming-i_UPDATE.html#render-functions",
    "href": "04-server-reactive-programming-i_UPDATE.html#render-functions",
    "title": "Server: Reactive programming",
    "section": "4 Render functions",
    "text": "4 Render functions\n\nrender functions, located in server, wrap generated outputs and correspond to the type or reactive output\n\nresulting values are stored in output$... list\n\nQ: What do you think are the following render functions used for? (e.g., )\n\nrenderImage({...})\nrenderPlot({...})\nrenderPlotly({...}) (!)\nrenderPrint({...})\nrenderTable({...}) (!)\nrenderDataTable({...})\nrenderText({...})\nrenderUI({...})\nrenderLeaflet({...})(!)\n\nOur app uses those marked with (!).\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nrenderImage({...}) creates images (saved as a link to a source file)\nrenderPlot({...}) creates plots\nrenderPlotly({...}) creates interactive plotly graph\nrenderPrint({...}) creates any printed output\nrenderTable({...}) creates data frame, matrix, other table like structures\n\nrenderDataTable({...}) creates interactive datatable\n\nrenderText({...}) creates character strings\nrenderUI({...}) creates a Shiny tag object or HTML\nrenderLeaflet({...}) create a leaflet map"
  },
  {
    "objectID": "04-server-reactive-programming-i_UPDATE.html#reactive-programming",
    "href": "04-server-reactive-programming-i_UPDATE.html#reactive-programming",
    "title": "Server: Reactive programming",
    "section": "5 Reactive programming",
    "text": "5 Reactive programming\n\n5.1 How does reactivity work?\n\nQ: How does reactivity work? What does the app below do? (Let’s run it too!)\n\n\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\")\n)\n\nserver &lt;- function(input, output, session) {\n  output$greeting &lt;- renderText({\n    paste0(\"Hello \", input$name, \"!\")\n  })\n}\nshinyApp(ui, server)\n\n\nShiny performs the renderText() action every time we update input$name (automatically!)\nreactive refers to any expression that automatically updates itself when its dependencies change\nImportant: Code informs Shiny how it could create the string if it needs to, but it’s up to Shiny when (and even if!) the code should be run\nRecipe: App provides Shiny with recipe (not commands) what to do with inputs\n\n\n\n5.2 The reactive graph\n\nUsually R code can be read from top to bottom (= order of execution)… not in Shiny!\nReactive graph: describes how inputs and outputs are connected to understand order of execution\nFigure 1 describes app in Section 5.1 above.\n\ntells that output$greeting will need to be recomputed whenever input$name is changed\ngreeting has a reactive dependency on name\n\n\n\n\n\n\n\n\n\n\nFigure 1: The reactive graph shows how the inputs and outputs are connected (Source: Wickham 2021)\n\n\n\n\n\n\nQuick high-level sketch of reactive graphs help to understand how pieces fit together\n\n\n\n5.3 Reactive expressions\n\nReactive expressions take inputs and produce outputs\n\ncan reduce duplication in reactive code by introducing additional nodes into reactive graph\nFigure 2 contains reactive expression string (inspect shape!) with code shown below\n\n\n\n\n\n\n\n\n\n\nFigure 2: A reactive expression is drawn with angles on both sides because it connects inputs to outputs (Source: Wickham 2021)\n\n\n\n\n\n\nBelow string is created with reactive() function to app in Section 5.1.\n\n\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\"),\n)\n\nserver &lt;- function(input, output, session) {\n  string &lt;- reactive(paste0(\"Hello \", input$name, \"!\"))\n  output$greeting &lt;- renderText(string())\n}\nshinyApp(ui, server)\n\n\nAvoid duplication\n\nQ: How does the code below avoid duplicating code?\n\n\n\n\nShow the code\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\"),\n  textOutput(\"greeting2\")\n)\n\nserver &lt;- function(input, output, session) {\n  string &lt;- reactive(paste0(\"Hello \", input$name, \"!\"))\n  output$greeting &lt;- renderText(string())\n  output$greeting2 &lt;- renderText(string())\n}\nshinyApp(ui, server)\n\n\n\n\n5.4 Executation order\n\nOrder Shiny code is run is solely determined by reactive graph\nBelow we flip code in server function below\n\nBetter keep order for easier understanding!\n\n\n\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\"),\n)\n\nserver &lt;- function(input, output, session) {\n  output$greeting &lt;- renderText(string())\n  string &lt;- reactive(paste0(\"Hello \", input$name, \"!\"))\n}\nshinyApp(ui, server)\n\n\n\n5.5 Exercises\n\nCan you spot errors in the code of the different servers server1, server2 and server3 below?\n\n\n# UI\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\")\n)\n\n# SERVERS\nserver1 &lt;- function(input, output, server) {\n  input$greeting &lt;- renderText(paste0(\"Hello \", name))\n}\n\nserver2 &lt;- function(input, output, server) {\n  greeting &lt;- paste0(\"Hello \", input$name)\n  output$greeting &lt;- renderText(greeting)\n}\n\nserver3 &lt;- function(input, output, server) {\n  output$greting &lt;- paste0(\"Hello\", input$name)\n}\n\n\n\n\n\n\n\nSolution(s)\n\n\n\n\n\n\nServer 1: Forgot to specify refer to list using name instead of input$name.\nServer 2: Forgot to specify that greeting is a reactive using greeting intead to greeting() within renderText().\nServer 3: Called the output that is stored in list output greting instead of greeting. Hence, it can not be found by the textOutput() function.\n\n\n\n\n\nDraw the reactive graph for the following three server functions (what are the inputs, reactives and ouputs): (Homework: server2 and server3!)\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nStart by deciding how many and which inputs (1), reactives (2) and ouputs (3) there are. Then start drawing with inputs represented in the first column on the left. You could use, e.g., name&gt; for inputs, &gt;name&gt; for reactives and &gt;name for outputs and arrows to connect them.\n\n\n\n\nserver1 &lt;- function(input, output, session) {\n  c &lt;- reactive(input$a + input$b)\n  e &lt;- reactive(c() + input$d)\n  output$f &lt;- renderText(e())\n}\n\nserver2 &lt;- function(input, output, session) {\n  x &lt;- reactive(input$x1 + input$x2 + input$x3)\n  y &lt;- reactive(input$y1 + input$y2)\n  output$z &lt;- renderText(x() / y())\n}\n\nserver3 &lt;- function(input, output, session) {\n  d &lt;- reactive(c() ^ input$d)\n  a &lt;- reactive(input$a * 10)\n  c &lt;- reactive(b() / input$c) \n  b &lt;- reactive(a() + input$b)\n}\n\n\n\n\n\n\n\nSolution(s)\n\n\n\n\n\n\nCan you spot errors in the code of the different server1, server2 and server3 below?\n\n\nserver1: Forgot input$\nserver2: input$name outside of renderText() function\nserver3: Typo in output$greting\n\n\n\nDraw the reactive graph for the following three server functions (Solution source):\n\nTo create the reactive graph we need to consider the inputs, reactive expressions, and outputs of the app.\nFor server1 we have the following objects:\n\ninputs: input$a, input$b, and input$d\nreactives: c() and e()\noutputs: output$f\n\nInputs input$a and input$b are used to create c(), which is combined with input$d to create e(). The output depends only on e().\n\n\n\n\nreactive graph - server 1\n\n\n\n\nFor server2 we have the following objects:\n\ninputs: input$y1, input$y2, input$x1, input$x2, input$x3\nreactives: y() and x()\noutputs: output$z\n\nInputs input$y1 and input$y2 are needed to create the reactive y(). In addition, inputs input$x1, input$x2, and input$x3 are required to create the reactive x(). The output depends on both x() and y().\n\n\n\n\nreactive graph - server 2\n\n\n\n\nFor server3 we have the following objects:\n\ninputs: input$a, input$b, input$c, input$d\nreactives: a(), b(), c(), d()\n\nAs we can see below, a() relies on input$a, b() relies on both a() and input$b, and c() relies on both b() and input$c. The final output depends on both c() and input$d.\n\n\n\n\nreactive graph - server 3"
  },
  {
    "objectID": "04-server-reactive-programming-i_UPDATE.html#reactive-and-other-functions",
    "href": "04-server-reactive-programming-i_UPDATE.html#reactive-and-other-functions",
    "title": "Server: Reactive programming",
    "section": "6 reactive() and other functions",
    "text": "6 reactive() and other functions\n\nShiny provides a variety of reactive functions such as reactive(), observe(), bindevent() etc.\nSo far we have seen reactive() (more later!)\nreactive(): wraps a normal expression to create a reactive expression\n\nis “reactive” in the sense that if its dependencies change, it will automatically update.\nBelow reactive string changes whenever dependency input$name changes.\nQ: What would be the reactive producer and what the reactive consumer?\n\n\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\"),\n)\n\nserver &lt;- function(input, output, session) {\n  string &lt;- reactive(paste0(\"Hello \", input$name, \"!\"))\n  output$greeting &lt;- renderText(string())\n}\nshinyApp(ui, server)"
  },
  {
    "objectID": "04-server-reactive-programming-i_UPDATE.html#summary-reactive-expressions",
    "href": "04-server-reactive-programming-i_UPDATE.html#summary-reactive-expressions",
    "title": "Server: Reactive programming",
    "section": "7 Summary: reactive expressions",
    "text": "7 Summary: reactive expressions\n\nChapter 3.4 is recommended reading!\nReactive expressions (e.g., reactive()) are important because…\n\ngive Shiny more information so that it can do less recomputation when inputs change\nmake apps more efficient and easier for humans to understand (simplify reactive graph!)\n\nAre like inputs since you can use results of a reactive expression in an output\nAre like outputs since they depend on inputs and automatically know when they need updating\nInputs and reactive expressions are reactive producers (see Figure 3)\nReactive expressions and outputs are reactive consumers (see Figure 3)\nIn other words.. reactive expressions are both producers and consumers.\n\n\n\n\n\n\n\n\n\nFigure 3: Inputs and expressions are reactive producers; expressions and outputs are reactive consumers (Source: Wickham 2021)"
  },
  {
    "objectID": "04-server-reactive-programming-i_UPDATE.html#ess-app-reactivity-tabulate-data-tab",
    "href": "04-server-reactive-programming-i_UPDATE.html#ess-app-reactivity-tabulate-data-tab",
    "title": "Server: Reactive programming",
    "section": "8 ESS app (reactivity): Tabulate data tab",
    "text": "8 ESS app (reactivity): Tabulate data tab\n\nBelow the basic code underlying the Table tab of our app.\n\nWhat would the reactive graph look like for this app (how many inputs, reactives, outputs)?\nWhich reactive functions can you identify?\n\n\n\n\nR code underlying (necessary for the) Table tab\nlibrary(tidyverse)\nlibrary(shiny)\nlibrary(plotly)\nlibrary(leaflet)\nlibrary(haven)\n\ness &lt;- readRDS(\"ess_trust.rds\")\ness_geo &lt;- readRDS(\"ess_trust_geo.rds\")\n\n# UI ----\nui &lt;- fluidPage(\n  titlePanel(\"European Social Survey - round 10\"),\n  \n  ## Sidebar ----\n  sidebarLayout(\n    sidebarPanel(\n      ### select dependent variable\n      selectInput(\n        \"xvar\",\n        label = \"Select a dependent variable\",\n        choices = c(\n          \"Trust in country's parliament\" = \"trust_parliament\",\n          \"Trust in the legal system\" = \"trust_legal\",\n          \"Trust in the police\" = \"trust_police\",\n          \"Trust in politicians\" = \"trust_politicians\",\n          \"Trust in political parties\" = \"trust_parties\",\n          \"Trust in the European Parliament\" = \"trust_eu\",\n          \"Trust in the United Nations\" = \"trust_un\"\n        )\n      ),\n      \n      ### select a variable ----\n      selectInput(\n        \"yvar\",\n        label = \"Select an independent variable\",\n        choices = c(\n          \"Placement on the left-right scale\" = \"left_right\",\n          \"Age\" = \"age\",\n          \"Feeling about household's income\" = \"income_feeling\",\n          \"How often do you use the internet?\" = \"internet_use\",\n          \"How happy are you?\" = \"happiness\"\n        )\n      ),\n      \n      ### select a country ----\n      selectizeInput(\n        \"countries\",\n        label = \"Filter by country\",\n        choices = unique(ess$country),\n        selected = \"FR\",\n        multiple = TRUE\n      ),\n      \n      ### filter values ----\n      sliderInput(\n        \"range\",\n        label = \"Set a value range (dependent variable)\",\n        min = min(ess$trust_parliament, na.rm = TRUE),\n        max = max(ess$trust_parliament, na.rm = TRUE),\n        value = range(ess$trust_parliament, na.rm = TRUE),\n        step = 1\n      )\n    ),\n    \n    ## Main panel ----\n    mainPanel(\n      tabsetPanel(\n        type = \"tabs\",\n        \n        ### Table tab ----\n        tabPanel(\n          title = \"Table\",\n          div(\n            style = \"height: 600px; overflow-y: auto;\",\n            tableOutput(\"table\")\n          )\n        )\n      )\n    )\n  )\n)\n\n\n# Server ----\nserver &lt;- function(input, output, session) {\n  # update slider ----\n  observe({\n    var &lt;- na.omit(ess[[input$xvar]])\n    is_ordered &lt;- is.ordered(var)\n    var &lt;- as.numeric(var)\n    updateSliderInput(\n      inputId = \"range\",\n      min = min(var),\n      max = max(var),\n      value = range(var),\n      step = if (is_ordered) 1\n    )\n  }) %&gt;%\n    bindEvent(input$xvar)\n  \n  # filter data ----\n  filtered &lt;- reactive({\n    req(input$countries, cancelOutput = TRUE)\n    \n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    range &lt;- input$range\n    \n    # select country\n    ess &lt;- ess[ess$country %in% input$countries, ]\n    \n    # select variable\n    ess &lt;- ess[c(\"idno\", \"country\", xvar, yvar)]\n    \n    # apply range\n    ess &lt;- ess[ess[[xvar]] &gt; range[1] & ess[[xvar]] &lt; range[2], ]\n    ess\n  })\n  \n  # render table ----\n  output$table &lt;- renderTable({\n    filtered()\n  }, height = 400)\n  \n}\n\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "04-server-reactive-programming-i_UPDATE.html#loading-things-in-shiny",
    "href": "04-server-reactive-programming-i_UPDATE.html#loading-things-in-shiny",
    "title": "Server: Reactive programming",
    "section": "9 Loading things in Shiny",
    "text": "9 Loading things in Shiny\n\n9.1 When is code run?\n\nWhen is code in a shiny app run? (Source)\nCode outside of ui and server is run once, when the app is launched.\n\n\n\nCode inside the server function is run once each time a user visits the app (opens the webpage).\n\n\n\nCode inside render functions is run each time a user changes a widget (input$...) that ouput$... depends on\n\n\n\nQ: So where shall we put the function to load the datasets?\nQ: What problem might occur if we place certain code wrongly ? Where would you place data management tasks?\n\n\n\n\n\n\n\nInsight\n\n\n\n\n\n\nIf possible place anything computationally intensive outside of the render functions.\n\ne.g., might make sense to estimate models/subset data beforehand if possible and access precalculated objects in reactive functions\n\n\n\n\n\n\n\n9.2 Where to load things\n\nCode outside server &lt;- function(input, output, session) {} is run once, when you launch your app\nCode inside server &lt;- function(input, output, session) {} is run once each time a user visits your app\nCode inside render* functions is rerun constantly (not only when user changes widget value ( see reactivity)\nThat means…\n\nLoad Source scripts, libraries, and data outside of server function (at the beginning)\n\nStore data in www/ folder in your app directory\nAccess with read.table(\"www/swiss.csv\", sep=\",\")\nAccess online data by inserting the url into the read* function (e.g. read.table())\n\nUser specific objects (e.g. object that records user’s session information) are defined inside shinyServer’s unnamed function, but outside of any render* calls\n\ne.g. user registers himself, user data as input data (compare income)\n\nCode/objects that are affected by choices in widgets must be placed within the a render* function\n\nShiny reruns code in a render* chunk each time a user changes a widget mentioned in the chunk\n\n\nAvoid placing code within render function that does not need to be there… for performance reasons!"
  },
  {
    "objectID": "04-server-reactive-programming-i_UPDATE.html#data-storage",
    "href": "04-server-reactive-programming-i_UPDATE.html#data-storage",
    "title": "Server: Reactive programming",
    "section": "10 Data storage",
    "text": "10 Data storage\n\nThings might get tricky for more data-hungry Shiny apps\nThe way data is stored and accessed has some important implications for\n\nMemory allocation: R stores objects in the working memory\nPerformance: “R does too much” - Colin Fay\nReadability: Putting everything in one file might get messy\n\nFor more sophisticated setups: databases (e.g., SQLite, PostgreSQL, MongoDB)\nR can work perfectly well with database connections (R Packages: DBI, dbplyr, sf) (see overview here)\n\nSQLite works well for casually trying out databases (see overview here)"
  },
  {
    "objectID": "04-server-reactive-programming-i_UPDATE.html#summary",
    "href": "04-server-reactive-programming-i_UPDATE.html#summary",
    "title": "Server: Reactive programming",
    "section": "11 Summary",
    "text": "11 Summary\nTo build reactive shiny apps…\n\nUse *Output functions to place reactive objects in the UI (webpage)\nUse render* functions to let R build output objects (on the server)\n\nRender functions are located in server &lt;- function(input, output, session) {...})\nR expressions are surrounded by braces, {} in render* functions\nOutputs of render* are saved in the output list, with one entry for each reactive object in your app\nReactivity by including an input values in a render* expression\n\nOften times you will adapt/modify examples that you find online"
  },
  {
    "objectID": "04-server-reactive-programming-i_UPDATE.html#appendix-visualizing-reactivity-with-reactlog",
    "href": "04-server-reactive-programming-i_UPDATE.html#appendix-visualizing-reactivity-with-reactlog",
    "title": "Server: Reactive programming",
    "section": "12 Appendix: Visualizing reactivity with reactlog",
    "text": "12 Appendix: Visualizing reactivity with reactlog\n\nreactlog can be used to visualize and explore the reactivity of a Shiny app\nBelow we do so for the Shiny app above (app is stored in a folder)\n\n\n# Restart R to delete log\n.rs.restartR()\n\nlibrary(shiny)\nlibrary(reactlog)\n\n# tell shiny to log all reactivity\nreactlog_enable()\n# reactlog_disable()\n\n# run a shiny app\nrunApp(\"C:/Users/Paul/Google Drive/13_SHINY_Workshop/shinyapps/guerry/states_paul/app_tab_tabulate.R\")\n\n# once app has closed, display reactlog from shiny\nshiny::reactlogShow()"
  },
  {
    "objectID": "04-server-reactive-programming-i_UPDATE.html#appendix-imperative-vs.-declarative-programming-and-laziness",
    "href": "04-server-reactive-programming-i_UPDATE.html#appendix-imperative-vs.-declarative-programming-and-laziness",
    "title": "Server: Reactive programming",
    "section": "13 Appendix: Imperative vs. Declarative programming and laziness",
    "text": "13 Appendix: Imperative vs. Declarative programming and laziness\n\nImperative vs. declarative programming (Chapter 3.3.1)\n\nImperative code: “Make me a sandwich” (“assertive” code)\nDeclarative code: “Ensure there is a sandwich in the refrigerator whenever I look inside of it” (“passive-aggressive” code)\nShiny follows the latter principles\n\nLaziness as strength of declarative programming (Chapter 3.3.2)\n\napp will only ever do the minimal amount of work needed to update the output controls that you can currently see"
  },
  {
    "objectID": "03-user-interface.html#other-important-concepts-functions-and-packages",
    "href": "03-user-interface.html#other-important-concepts-functions-and-packages",
    "title": "User Interface (UI): Designing the front end",
    "section": "7 Other important concepts, functions and packages",
    "text": "7 Other important concepts, functions and packages\n\nIn addition to Shiny UI base functions (that are accessible throught the shiny package), various other packages allow for more advanced UIs\ndashboardPage() from the bs4Dash can be used to create dashboards (see Section 7.1)\nCustom theming and modern UI widgets: bslib and bsplus\nCustom, more beautiful UI widgets: shinyWidgets, spsComps\nCustom theming: fresh\nUI frameworks:\n\nAdminLTE 2 (shinydashboard)\nAdminLTE 3 (bs4Dash)\nFluent UI (shiny.fluent)\nbulma.io (shinybulma)\nFomantic (shiny.semantic)\nMaterial Design (shinymaterial)\nArgon (argonDash)\nTabler (tablerDash)\nGentelella (gentelellaShiny)\n\nLoaders, spinners, and progress bars: waiter, shinycssloaders, shinybusy, shinycustomloader\nDesigning Shiny apps for smaller screen sizes: shinyMobile and miniUI\nPopups and alerts: shinyalert\nFeedback and input validation: shinyFeedback\nWalkthroughs: cicerone\nTranslation / internationalization: shiny.i18n\nEmbedding media:\n\nBehavioral data: shinysense\nDoodles: pixels, fabricerin\nVideos: vembedr, video\nPDF files: rpdf, shinyFiles\nImage editing: drawer\nCode editing: shinyAce\n\n\n\n7.1 dashboardPage\n\nAlternative to fluidPage()\ndashboardPage(): creates a dashboard interface\n\nfunction contained in packages shinydashboard and bs4Dash (use bs4Dash1!)\ndashboardHeader(): creates a dashboard header\ndashboardSidebar(): Creates dashboard sidebar\n\nsidebar typically contains a sidebarMenu, although it may also contain a sidebarSearchForm, or other Shiny inputs.\n\ndashboardBody(): creates main body typically containing boxes or tabItems\n\n\n\nlibrary(bs4Dash)\n# UI ----\nui &lt;- dashboardPage(title = \"The ESS shiny app\",\n                    \n                    ### Header ----\n                    header = dashboardHeader(\"Add title here\"),\n                    \n                    ### Sidebar ----\n                    sidebar = dashboardSidebar(\"Sidebar menu\"),\n                    \n                    ### Body ----\n                    body = dashboardBody(\"Main body\")\n)\n\n# Server ----\nserver &lt;- function(input, output, session) {}\n\nshinyApp(ui, server)\n\n\n\n?sidebarMenu(): create sidebarMenu within dashboardSidebar\n\nmenuItem(tabName = \"...\", text = \"...\", icon = icon(\"table\")): Creates one item in sidebarMenu\n\ntabItems(): creates container for tab items\n\ntabItem(tabName = \"insp\", ...): creates tab to put inside a tab items container\ncan be combined with fluidRow() and column()\nConnection through name tabName argument\n\n\n\nlibrary(bs4Dash)\n# UI ----\nui &lt;- dashboardPage(title = \"The ESS shiny app\",\n\n  ### Header ----\n  header = dashboardHeader(\n    title = \"Title here\"\n  ),\n\n  ### Sidebar ----\n  sidebar = dashboardSidebar(\n    sidebarMenu(\n      menuItem(tabName = \"tab_table\", \n               text = \"Table data\", \n               icon = icon(\"table\"))\n    )\n  ),\n  ### Body ----\n  body = dashboardBody(\n    tabItems( # start tabItems\n\n      tabItem(\n        tabName = \"tab_table\",\n        hr(), # add separation line\n        \"Here we will put a table\"\n      )\n      \n    ) # end tabItems\n  )\n) # End UI\n\n\n# Server ----\nserver &lt;- function(input, output, session) {}\n\nshinyApp(ui, server)",
    "crumbs": [
      "User Interface (UI): Designing the front end"
    ]
  },
  {
    "objectID": "03-user-interface.html#sec-dashboardPage",
    "href": "03-user-interface.html#sec-dashboardPage",
    "title": "User Interface (UI): Designing the front end",
    "section": "8 dashboardPage",
    "text": "8 dashboardPage\n\nAlternative to fluidPage()\ndashboardPage(): creates a dashboard interface\n\nfunction contained in packages shinydashboard and bs4Dash (use bs4Dash1!)\ndashboardHeader(): creates a dashboard header\ndashboardSidebar(): Creates dashboard sidebar\n\nsidebar typically contains a sidebarMenu, although it may also contain a sidebarSearchForm, or other Shiny inputs.\n\ndashboardBody(): creates main body typically containing boxes or tabItems\n\n\n\nlibrary(bs4Dash)\n# UI ----\nui &lt;- dashboardPage(title = \"The ESS shiny app\",\n                    \n                    ### Header ----\n                    header = dashboardHeader(\"Add title here\"),\n                    \n                    ### Sidebar ----\n                    sidebar = dashboardSidebar(\"Sidebar menu\"),\n                    \n                    ### Body ----\n                    body = dashboardBody(\"Main body\")\n)\n\n# Server ----\nserver &lt;- function(input, output, session) {}\n\nshinyApp(ui, server)\n\n\n\n?sidebarMenu(): create sidebarMenu within dashboardSidebar\n\nmenuItem(tabName = \"...\", text = \"...\", icon = icon(\"table\")): Creates one item in sidebarMenu\n\ntabItems(): creates container for tab items\n\ntabItem(tabName = \"insp\", ...): creates tab to put inside a tab items container\ncan be combined with fluidRow() and column()\nConnection through name tabName argument\n\n\n\nlibrary(bs4Dash)\n# UI ----\nui &lt;- dashboardPage(title = \"The ESS shiny app\",\n\n  ### Header ----\n  header = dashboardHeader(\n    title = \"Title here\"\n  ),\n\n  ### Sidebar ----\n  sidebar = dashboardSidebar(\n    sidebarMenu(\n      menuItem(tabName = \"tab_table\", \n               text = \"Table data\", \n               icon = icon(\"table\"))\n    )\n  ),\n  ### Body ----\n  body = dashboardBody(\n    tabItems( # start tabItems\n\n      tabItem(\n        tabName = \"tab_table\",\n        hr(), # add separation line\n        \"Here we will put a table\"\n      )\n      \n    ) # end tabItems\n  )\n) # End UI\n\n\n# Server ----\nserver &lt;- function(input, output, session) {}\n\nshinyApp(ui, server)",
    "crumbs": [
      "User Interface (UI): Designing the front end"
    ]
  },
  {
    "objectID": "04-server-reactive-programming-i.html#reactive-and-other-functions",
    "href": "04-server-reactive-programming-i.html#reactive-and-other-functions",
    "title": "Server: Reactive programming",
    "section": "6 reactive() and other functions",
    "text": "6 reactive() and other functions\n\nShiny provides a variety of reactive functions such as reactive(), observe(), bindevent() etc.\nSo far we have seen reactive() (more later!)\nreactive(): wraps a normal expression to create a reactive expression\n\nis “reactive” in the sense that if its dependencies change, it will automatically update.\nBelow reactive string changes whenever dependency input$name changes.\nQ: What would be the reactive producer and what the reactive consumer?\n\n\nui &lt;- fluidPage(\n  textInput(\"name\", \"What's your name?\"),\n  textOutput(\"greeting\"),\n)\n\nserver &lt;- function(input, output, session) {\n  string &lt;- reactive(paste0(\"Hello \", input$name, \"!\"))\n  output$greeting &lt;- renderText(string())\n}\nshinyApp(ui, server)",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming-i.html#summary-reactive-expressions",
    "href": "04-server-reactive-programming-i.html#summary-reactive-expressions",
    "title": "Server: Reactive programming",
    "section": "7 Summary: reactive expressions",
    "text": "7 Summary: reactive expressions\n\nChapter 3.4 is recommended reading!\nReactive expressions (e.g., reactive()) are important because…\n\ngive Shiny more information so that it can do less recomputation when inputs change\nmake apps more efficient and easier for humans to understand (simplify reactive graph!)\n\nAre like inputs since you can use results of a reactive expression in an output\nAre like outputs since they depend on inputs and automatically know when they need updating\nInputs and reactive expressions are reactive producers (see Figure 3)\nReactive expressions and outputs are reactive consumers (see Figure 3)\nIn other words.. reactive expressions are both producers and consumers.\n\n\n\n\n\n\n\n\n\nFigure 3: Inputs and expressions are reactive producers; expressions and outputs are reactive consumers (Source: Wickham 2021)",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "04-server-reactive-programming-i.html#ess-app-reactivity-tabulate-data-tab",
    "href": "04-server-reactive-programming-i.html#ess-app-reactivity-tabulate-data-tab",
    "title": "Server: Reactive programming",
    "section": "8 ESS app (reactivity): Tabulate data tab",
    "text": "8 ESS app (reactivity): Tabulate data tab\n\nBelow the basic code underlying the Table tab of our app.\n\nWhat would the reactive graph look like for this app (how many inputs, reactives, outputs)?\nWhich reactive functions can you identify?\n\n\n\n\nR code underlying (necessary for the) Table tab\nlibrary(tidyverse)\nlibrary(shiny)\nlibrary(plotly)\nlibrary(leaflet)\nlibrary(haven)\n\ness &lt;- readRDS(\"ess_trust.rds\")\ness_geo &lt;- readRDS(\"ess_trust_geo.rds\")\n\n# UI ----\nui &lt;- fluidPage(\n  titlePanel(\"European Social Survey - round 10\"),\n  \n  ## Sidebar ----\n  sidebarLayout(\n    sidebarPanel(\n      ### select dependent variable\n      selectInput(\n        \"xvar\",\n        label = \"Select a dependent variable\",\n        choices = c(\n          \"Trust in country's parliament\" = \"trust_parliament\",\n          \"Trust in the legal system\" = \"trust_legal\",\n          \"Trust in the police\" = \"trust_police\",\n          \"Trust in politicians\" = \"trust_politicians\",\n          \"Trust in political parties\" = \"trust_parties\",\n          \"Trust in the European Parliament\" = \"trust_eu\",\n          \"Trust in the United Nations\" = \"trust_un\"\n        )\n      ),\n      \n      ### select a variable ----\n      selectInput(\n        \"yvar\",\n        label = \"Select an independent variable\",\n        choices = c(\n          \"Placement on the left-right scale\" = \"left_right\",\n          \"Age\" = \"age\",\n          \"Feeling about household's income\" = \"income_feeling\",\n          \"How often do you use the internet?\" = \"internet_use\",\n          \"How happy are you?\" = \"happiness\"\n        )\n      ),\n      \n      ### select a country ----\n      selectizeInput(\n        \"countries\",\n        label = \"Filter by country\",\n        choices = unique(ess$country),\n        selected = \"FR\",\n        multiple = TRUE\n      ),\n      \n      ### filter values ----\n      sliderInput(\n        \"range\",\n        label = \"Set a value range (dependent variable)\",\n        min = min(ess$trust_parliament, na.rm = TRUE),\n        max = max(ess$trust_parliament, na.rm = TRUE),\n        value = range(ess$trust_parliament, na.rm = TRUE),\n        step = 1\n      )\n    ),\n    \n    ## Main panel ----\n    mainPanel(\n      tabsetPanel(\n        type = \"tabs\",\n        \n        ### Table tab ----\n        tabPanel(\n          title = \"Table\",\n          div(\n            style = \"height: 600px; overflow-y: auto;\",\n            tableOutput(\"table\")\n          )\n        )\n      )\n    )\n  )\n)\n\n\n# Server ----\nserver &lt;- function(input, output, session) {\n  # update slider ----\n  observe({\n    var &lt;- na.omit(ess[[input$xvar]])\n    is_ordered &lt;- is.ordered(var)\n    var &lt;- as.numeric(var)\n    updateSliderInput(\n      inputId = \"range\",\n      min = min(var),\n      max = max(var),\n      value = range(var),\n      step = if (is_ordered) 1\n    )\n  }) %&gt;%\n    bindEvent(input$xvar)\n  \n  # filter data ----\n  filtered &lt;- reactive({\n    req(input$countries, cancelOutput = TRUE)\n    \n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    range &lt;- input$range\n    \n    # select country\n    ess &lt;- ess[ess$country %in% input$countries, ]\n    \n    # select variable\n    ess &lt;- ess[c(\"idno\", \"country\", xvar, yvar)]\n    \n    # apply range\n    ess &lt;- ess[ess[[xvar]] &gt; range[1] & ess[[xvar]] &lt; range[2], ]\n    ess\n  })\n  \n  # render table ----\n  output$table &lt;- renderTable({\n    filtered()\n  }, height = 400)\n  \n}\n\nshinyApp(ui = ui, server = server)\n\n\n\nExercise: In an exercise in the previous chapter we used renderDataTable() and dataTableOutput() to create an interactive table for the data. Please try to replace the corresponding code lines in our so that we get an interactive table out of the box (Tipp: Since renderDataTable() does not like labelled datasets we have to zap them as follows: filtered() %&gt;% zap_labels()).\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(shiny)\nlibrary(plotly)\nlibrary(leaflet)\nlibrary(haven)\n\ness &lt;- readRDS(\"ess_trust.rds\")\n\n# UI ----\nui &lt;- fluidPage(\n  titlePanel(\"European Social Survey - round 10\"),\n  \n  ## Sidebar ----\n  sidebarLayout(\n    sidebarPanel(\n      ### select dependent variable\n      selectInput(\n        \"xvar\",\n        label = \"Select a dependent variable\",\n        choices = c(\n          \"Trust in country's parliament\" = \"trust_parliament\",\n          \"Trust in the legal system\" = \"trust_legal\",\n          \"Trust in the police\" = \"trust_police\",\n          \"Trust in politicians\" = \"trust_politicians\",\n          \"Trust in political parties\" = \"trust_parties\",\n          \"Trust in the European Parliament\" = \"trust_eu\",\n          \"Trust in the United Nations\" = \"trust_un\"\n        )\n      ),\n      \n      ### select a variable ----\n      selectInput(\n        \"yvar\",\n        label = \"Select an independent variable\",\n        choices = c(\n          \"Placement on the left-right scale\" = \"left_right\",\n          \"Age\" = \"age\",\n          \"Feeling about household's income\" = \"income_feeling\",\n          \"How often do you use the internet?\" = \"internet_use\",\n          \"How happy are you?\" = \"happiness\"\n        )\n      ),\n      \n      ### select a country ----\n      selectizeInput(\n        \"countries\",\n        label = \"Filter by country\",\n        choices = unique(ess$country),\n        selected = \"FR\",\n        multiple = TRUE\n      ),\n      \n      ### filter values ----\n      sliderInput(\n        \"range\",\n        label = \"Set a value range (dependent variable)\",\n        min = min(ess$trust_parliament, na.rm = TRUE),\n        max = max(ess$trust_parliament, na.rm = TRUE),\n        value = range(ess$trust_parliament, na.rm = TRUE),\n        step = 1\n      )\n    ),\n    \n    ## Main panel ----\n    mainPanel(\n      tabsetPanel(\n        type = \"tabs\",\n        \n        ### Table tab ----\n        tabPanel(\n          title = \"Table\",\n          div(\n            style = \"height: 600px; overflow-y: auto;\",\n            dataTableOutput(\"table\")\n          )\n        )\n      )\n    )\n  )\n)\n\n\n# Server ----\nserver &lt;- function(input, output, session) {\n  # update slider ----\n  observe({\n    var &lt;- na.omit(ess[[input$xvar]])\n    is_ordered &lt;- is.ordered(var)\n    var &lt;- as.numeric(var)\n    updateSliderInput(\n      inputId = \"range\",\n      min = min(var),\n      max = max(var),\n      value = range(var),\n      step = if (is_ordered) 1\n    )\n  }) %&gt;%\n    bindEvent(input$xvar)\n  \n  # filter data ----\n  filtered &lt;- reactive({\n    req(input$countries, cancelOutput = TRUE)\n    \n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    range &lt;- input$range\n    \n    # select country\n    ess &lt;- ess[ess$country %in% input$countries, ]\n    \n    # select variable\n    ess &lt;- ess[c(\"idno\", \"country\", xvar, yvar)]\n    \n    # apply range\n    ess &lt;- ess[ess[[xvar]] &gt; range[1] & ess[[xvar]] &lt; range[2], ]\n    ess\n  })\n  \n  # render table ----\n   output$table &lt;- renderDataTable(filtered() %&gt;% zap_labels(), \n                                  options = list(pageLength = 5,\n                                                 searching = FALSE,\n                                                 paging = FALSE,\n                                                 ordering = FALSE,\n                                                 filtering = FALSE))\n}\n\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Server: Reactive programming"
    ]
  },
  {
    "objectID": "08-build-your-own.html#loading-things",
    "href": "08-build-your-own.html#loading-things",
    "title": "Good practices when building your own app",
    "section": "2.2 Loading things",
    "text": "2.2 Loading things",
    "crumbs": [
      "Good practices when building your own app"
    ]
  },
  {
    "objectID": "05-server-reactive-programming-ii.html#arguments-to-bindevent",
    "href": "05-server-reactive-programming-ii.html#arguments-to-bindevent",
    "title": "Server: Reactive programming II",
    "section": "4.2 Arguments to bindEvent",
    "text": "4.2 Arguments to bindEvent\n\nbindEvent takes three arguments:\n\nignoreNULL: By default, every event is an event, even if it is NULL. An unpressed button would then also count as an event. If you need your plot to render only before pressing that button, then ignoring NULL is the right choice.\nignoreInit: By default, events are triggered when the reactive expressions are first initialized. This can be bad news for dynamically created UI elements (which are beyond this workshop).\nonce: If used on an observer, this argument can be used to destroy that observer after its first use.",
    "crumbs": [
      "Server: Reactive programming II"
    ]
  },
  {
    "objectID": "05-server-reactive-programming-ii.html#example",
    "href": "05-server-reactive-programming-ii.html#example",
    "title": "Server: Reactive programming II",
    "section": "4.3 Example",
    "text": "4.3 Example\n\nTo exemplify we will add an action button, that serves the following role:\n\nIf the inputs are changed, nothing should happen to the plot\nOnly if the button is pressed, shall the plot data be recalculated\n\n\nIn the UI:\n\nactionButton(\n  \"button\",\n  label = \"Update parameters\",\n  icon = icon(\"refresh\")\n)\n\nIn the server function:\n\nfiltered &lt;- reactive({\n  xvar &lt;- input$xvar\n  yvar &lt;- input$yvar\n  range &lt;- input$range\n  \n  # select country\n  if (!is.null(input$countries)) {\n    ess &lt;- ess[ess$country %in% input$countries, ]\n  }\n  \n  # select variable\n  ess[c(\"idno\", \"country\", xvar, yvar)]\n}) %&gt;%\n  bindEvent(input$button, ignoreNULL = FALSE)\n\n\noutput$plot &lt;- renderPlotly({\n  plot_data &lt;- filtered() %&gt;%\n    drop_na() %&gt;%\n    mutate(across(where(is.numeric), .fns = as.ordered))\n  \n  xvar &lt;- names(plot_data)[[3]]\n  yvar &lt;- names(plot_data)[[4]]\n  \n  ggplot(plot_data) +\n    aes(x = .data[[xvar]], y = .data[[yvar]], group = .data[[xvar]]) +\n    geom_violin(fill = \"lightblue\", show.legend = FALSE) +\n    theme_classic()\n})\n\n\n\nComplete code (important lines are highlighted)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(shiny)\nlibrary(plotly)\nlibrary(leaflet)\nlibrary(haven)\n\ness &lt;- readRDS(\"ess_trust.rds\")\ness_geo &lt;- readRDS(\"ess_trust_geo.rds\")\n\n# UI ----\nui &lt;- fluidPage(\n  titlePanel(\"European Social Survey - round 10\"),\n  \n  ## Sidebar ----\n  sidebarLayout(\n    sidebarPanel(\n      ### select dependent variable\n      selectInput(\n        \"xvar\",\n        label = \"Select a dependent variable\",\n        choices = c(\n          \"Trust in country's parliament\" = \"trust_parliament\",\n          \"Trust in the legal system\" = \"trust_legal\",\n          \"Trust in the police\" = \"trust_police\",\n          \"Trust in politicians\" = \"trust_politicians\",\n          \"Trust in political parties\" = \"trust_parties\",\n          \"Trust in the European Parliament\" = \"trust_eu\",\n          \"Trust in the United Nations\" = \"trust_un\"\n        )\n      ),\n      \n      ### select a variable ----\n      selectInput(\n        \"yvar\",\n        label = \"Select an independent variable\",\n        choices = c(\n          \"Placement on the left-right scale\" = \"left_right\",\n          \"Age\" = \"age\",\n          \"Feeling about household's income\" = \"income_feeling\",\n          \"How often do you use the internet?\" = \"internet_use\",\n          \"How happy are you?\" = \"happiness\"\n        )\n      ),\n      \n      ### select a country ----\n      selectizeInput(\n        \"countries\",\n        label = \"Filter by country\",\n        choices = unique(ess$country),\n        selected = \"FR\",\n        multiple = TRUE\n      ),\n      \n      sliderInput(\n        \"slider\",\n        label = \"Select a range for the independent variable\",\n        min = min(ess$left_right, na.rm = TRUE),\n        max = max(ess$left_right, na.rm = TRUE),\n        value = range(ess$left_right, na.rm = TRUE),\n        step = 1\n      )\n    ),\n    \n    ## Main panel ----\n    mainPanel(\n      tabsetPanel(\n        type = \"tabs\",\n        \n        ### Table tab ----\n        tabPanel(\n          title = \"Table\",\n          div(\n            style = \"height: 600px; overflow-y: auto;\",\n            tableOutput(\"table\")\n          )\n        ),\n        \n        ### Plot tab ----\n        tabPanel(\n          title = \"Plot\",\n          plotOutput(\"plot\", height = 600)\n        )\n      )\n    )\n  )\n)\n\n\n# Server ----\nserver &lt;- function(input, output, session) {\n  # filter data ----\n  filtered &lt;- reactive({\n    xvar &lt;- input$xvar\n    yvar &lt;- input$yvar\n    range &lt;- input$slider\n    \n    # select country\n    ess &lt;- ess[ess$country %in% input$countries, ]\n\n    # apply range\n    ess &lt;- ess[\n      ess[[yvar]] &gt; range[1] &\n      ess[[yvar]] &lt; range[2], \n    ]\n    \n    # select variable\n    ess[c(\"idno\", \"country\", xvar, yvar)]\n  })\n  \n  # render table ----\n  output$table &lt;- renderTable({\n    filtered()\n  }, height = 400)\n  \n  # render plot ----\n  output$plot &lt;- renderPlot({\n    plot_data &lt;- filtered() %&gt;%\n      drop_na() %&gt;%\n      mutate(across(where(is.numeric), .fns = as.ordered))\n    \n    xvar &lt;- names(plot_data)[[3]]\n    yvar &lt;- names(plot_data)[[4]]\n\n    ggplot(plot_data) +\n      aes(x = .data[[xvar]], y = .data[[yvar]], group = .data[[xvar]]) +\n      geom_violin(fill = \"lightblue\", show.legend = FALSE) +\n      theme_classic()\n  })\n  \n  observe({\n    yvar &lt;- input$yvar\n    freezeReactiveValue(input, \"slider\")\n    updateSliderInput(\n      session = session,\n      inputId = \"slider\",\n      min = min(ess[[yvar]], na.rm = TRUE),\n      max = max(ess[[yvar]], na.rm = TRUE),\n      value = range(ess[[yvar]], na.rm = TRUE)\n    )\n  }) %&gt;%\n    bindEvent(input$yvar)\n}\n\nshinyApp(ui = ui, server = server)",
    "crumbs": [
      "Server: Reactive programming II"
    ]
  }
]