---
title: "Prototyping"
---

```{r include=FALSE}
pacman::p_load(
	shiny,
	htmltools,
	bs4Dash,
	fresh,
	waiter,
	shinyWidgets,
	Guerry,
	sf,
	tidyr,
	dplyr,
	RColorBrewer,
	viridis,
	leaflet,
	plotly,
	jsonlite
)
```

## Planning and building a prototype

Learning outcomes/objectives: Learn...

-   How to come up with the user interface of a prototype dashboard

-   How to pep up user interfaces with custom theming

## Basic dashboard structure

-   In the last section, we explored ways to come up with a basic Shiny app design
-   Here, I prototype my Guerry dashboard using the `bs4Dash` R package
-   We can run a minimal example of a Shiny dashboard:

```{r eval=FALSE}
ui <- dashboardPage(
	header = dashboardHeader(),
	sidebar = dashboardSidebar(),
	body = dashboardBody(),
	controlbar = dashboardControlbar(),
	footer = dashboardFooter(),
	title = "Guerry Dashboard"
)

server <- function(input, output, session) {
	
}

shinyApp(ui, server)
```

![Dashboard structure](resources/dashboard-structure.png)

-   Each argument passed to `dashboardPage` corresponds to one element on the figure above

-   Accordingly, we can focus on one element at a time

-   Don't forget you can consult the documentation to get the hang of what to do with each dashboard element:

    ```{r eval=FALSE}
    ?dashboardPage
    ```

### Header

-   The dashboard header is visible at all times
-   It usually contains elements that are important to the entire app, such as global settings, important links or affiliations
-   By default it already contains a switch to control the dark mode (try it out, it works out of the box!)
-   In the Guerry case, we can keep it simple: a workshop title + logo and a GESIS logo that leads to the GESIS homepage

```{r}
header <- dashboardHeader(
  span(style = "display: inline-block; width: 100%;"),
  a(
    class = "logo",
    href = "https://gesis.org/",
    img(src = "gesis-logo.png", style = "height: 1.8em;")
  ),
  title = tagList(
    img(src = "workshop-logo.png", width = 35, height = 35),
    span("Guerry Dashboard")
  ),
  skin = "light"
)
```

### Sidebar

-   The sidebar is the main element to navigate a dashboard
-   It contains the names of all subsections of a dashboard
-   It can be expanded or collapsed, or it can idle in a 'minified' state
-   A sidebar consists of a `sidebarMenu` which in turn consists of multiple `menuItem`s

```{r}
sidebar <- dashboardSidebar(
    id = "sidebar",
    sidebarMenu(
      id = "sidebarMenu",
      menuItem(tabName = "intro", text = "Introduction", icon = icon("home")),
      menuItem(tabName = "exp", text = "Explore data", icon = icon("map")),
      menuItem(tabName = "insp", text = "Inspect data", icon = icon("table")),
      menuItem(tabName = "model", text = "Model data", icon = icon("chart-line")),
      flat = TRUE
    ),
    minified = TRUE,
    collapsed = TRUE,
    fixed = FALSE,
    skin = "light"
)
```

### Controlbar

-   The controlbar is an optional secondary sidebar which is mostly used for global options or theming
-   It can be toggled using the 'grid' symbol on the top right
-   It can take any type of UI element, it's basically just an additional space for anything concerning the entire app

```{r}
controlbar <- dashboardControlbar(skinSelector(), skin = "light")
```

### Footer

-   The footer typically contains the app's colophon, e.g., for mentioning authors, sharing links or funding information
-   Like the controlbar, the footer is an optional element that can also be left empty
-   In this case, I added a few infos about myself here:

```{r}
footer <- dashboardFooter(
	left = span(
		"This dashboard was created by Jonas Lieth. Find the source code",
		a("here.", href = "https://github.com/paulcbauer/shiny_workshop/tree/main/shinyapps/guerry"),
		"It is based on data from the",
		a("Guerry R package.", href = "https://cran.r-project.org/web/packages/Guerry/index.html")
	)
)
```

### Body

-   The body contains the main contents of the dashboard

-   The visible part of the body changes when a sidebar tab is clicked

-   The body consists of a call to `tabItems()` which in turn consists of multiple `tabItem()`s

```{r}
body <- dashboardBody(
	tabItems(
		# tab contents go here: tabItem(...)
	)
)
```

-   Don't forget you can always run the application to see how changes affect the app:

```{r eval=FALSE}
ui <- bs4Dash::dashboardPage(
	header = header,
	sidebar = sidebar,
	body = body,
	controlbar = controlbar,
	footer = footer,
	title = "Guerry Dashboard"
)

server <- function(input, output, session) {
	
}

shiny::shinyApp(ui, server)
```

**Exercise:** Consult the `bs4Dash` documentation and change the following aspects of the dashboard:

1.  Remove the dark/light mode toggle

2.  Add text or other UI elements below the sidebar items

3.  Replace the controlbar toggle icon with an icon showing gears

4.  Add an element that you think might be a nice addition to the dashboard layout

## Building a prototype

-   Here, we fill the empty canvases inside the dashboard body

### Landing page

-   A [landing page](https://en.wikipedia.org/wiki/Landing_page) is the page a user lands on

-   Supposed to be: an attention catcher, a guide, and an introduction

-   Useful for Dashboards, but probably over the top for more concise Shiny apps

-   `bs4Dash` supports some cool utilities for landing pages; `shinyLP` is another cool package to design landing pages

-   Note: The `tabName` argument of the `tabItem` must be the same as the `tabName` argument of the `menuItem` in the sidebar

```{r}
intro <- tabItem(
  tabName = "intro",
  jumbotron(
  	title = "Welcome to the Guerry dashboard",
  	lead = "A Shiny app to explore and analyze early social science",
  	status = "info",
  	btnName = NULL
  ),
  fluidRow(
    column(
      width = 6,
      box(
        title = "About",
        status = "primary",
        width = 12,
        p("From Wikipedia:"),
        blockQuote("André-Michel Guerry was a French lawyer and
                    amateur statistician. Together with Adolphe
                    Quetelet he may be regarded as the founder of
                    moral statistics which led to the development
                    of criminology, sociology and ultimately,
                    modern social science.", color = "primary")
      )
    ),
    column(
      width = 6,
      box(
        title = "André Michel Guerry",
        status = "primary",
        width = 12,
        tags$img(src = "guerry.jpg", width = "100%"),
        p("Source: Palsky, G. (2008). Connections and exchanges in European thematic cartography.
        	 The case of 19th century choropleth maps. Belgeo 3-4, 413-426.",
        	style = "font-size: 10px; padding-top: 5px;")
      )
    )
  )
)
```

### Data explorer

```{r}
exp <- tabItem(
  tabName = "exp", # must correspond to related menuItem name
  fluidRow(
    column(
      width = 4, # must be between 1 and 12
      box(
        title = "Data selection",
        status = "primary",
        width = 12,
        shinyWidgets::pickerInput(
          "exp_select",
          label = "Select a variable",
          choices = setNames(variables, sapply(txts, "[[", "title")),
          options = shinyWidgets::pickerOptions(liveSearch = TRUE)
        ),
        uiOutput("exp_desc")
      ),
      box(
        title = "Map configuration",
        status = "primary",
        width = 12,
        shinyWidgets::radioGroupButtons(
          "exp_aggr",
          label = "Aggregation level",
          choices = c("Departments", "Regions"),
          selected = "Departments",
          individual = TRUE,
          checkIcon = list(
            yes = tags$i(class = "fa fa-circle", style = "color: #FED22B;"),
            no = tags$i(class = "fa fa-circle-o", style = "color: #FED22B;")
          )
        ),
        shinyWidgets::pickerInput(
          "exp_pal",
          label = "Color palette",
          choices = pals,
          selected = "Plasma"
        ) # end input
      ) # end box
    ), # end column
    column(
      width = 8,
      box(
        id = "exp_box",
        status = "primary",
        headerBorder = FALSE,
        collapsible = FALSE,
        width = 12,
        leaflet::leafletOutput("exp_map", height = "800px", width = "100%")
      ) # end box
    ) # end column
  ) # end fluidRow
) # end tabItem
```

### Data analyzer

```{r}
insp <- tabItem(
  tabName = "insp",
  fluidRow(
    pickerInput(
      "insp_select",
      label = "Filter variables",
      choices = setNames(variables, sapply(txts, "[[", "title")),
      options = pickerOptions(
        actionsBox = TRUE,
        windowPadding = c(30, 0, 0, 0),
        liveSearch = TRUE,
        selectedTextFormat = "count",
        countSelectedText = "{0} variables selected",
        noneSelectedText = "No filters applied"
      ),
      inline = TRUE,
      multiple = TRUE
    ),
    div(style = "width: 20px;"),
    radioGroupButtons(
      "insp_aggr",
      label = "Aggregation level",
      choices = c("Departments", "Regions"),
      selected = "Departments",
      individual = TRUE,
      checkIcon = list(
        yes = tags$i(class = "fa fa-circle", style = "color: #FED22B;"),
        no = tags$i(class = "fa fa-circle-o", style = "color: #FED22B;")
      )
    )
  ),
  hr(),
  DT::dataTableOutput("insp_table")
)
```

### Data inspector

## Theming

-   Shiny apps look a bit lackluster by default

-   Especially in case of corporate designs, theming is an important issue

-   Shiny has some really cool extensions for amping up your UI, e.g.: bslib, fresh, waiter, shinyWidgets, shinyjs, ...

### Global themes

-   `bs4Dash` can easily be themed using the `fresh` package

-   Workflow:

    -   Create a theme using `fresh::create_theme`

    -   Add theming elements, such as layout, colors, fonts

    -   Pass the theme object as an argument to `dashboardPage`

-   Tip: Type in `fresh::bs4dash_` in the RStudio console and explore fresh's theming elements

```{r}
dash_theme <- create_theme(
  bs4dash_status(
    primary = "#58748f",
    secondary = "#666666",
    info = "#E6EAEE",
    danger = "#BF616A",
    warning = "#F06400",
    light = "#F4F4F2",
    dark = "#2c2c25"
  ),
  bs4dash_layout(
    font_size_root = "5rem",
    main_bg = "#FDFDFD",
    sidebar_width = "350px"
  ),
  bs4dash_sidebar_light(bg = "#F4F4F2", color = "#000"),
  bs4dash_sidebar_dark(bg = "#2c2c25", color = "#FFF"),
  bs4dash_color(
  	orange = "#F06400",
    white = "#E6EAEE",
    black = "#000",
    gray_600 = "#666",
    gray_800 = "#333",
    gray_900 = "#000",
    blue = "#58748f"
  ),
  bs4dash_font(
    family_sans_serif = "Verdana",
    family_base = "Georgia",
    family_monospace = "Courier New"
  )
)
```

### Spinners

-   A lack of feedback in graphical user interfaces can lead to frustration

-   In such cases, spinners can be an elegant solution

-   There are many Shiny extensions that support spinners: shinycssloaders, shinybusy, waiter

-   `bs4Dash` and `waiter` work particularly well together:

    -   Call `tags$head(use_waiter())` at the beginning of `dashboardBody`

    -   Assemble a preloader and pass it as an argument to the `dashboardPage`

```{r eval = FALSE}
preloader <- list(
  html = tagList(spin_wave(), "Loading ..."),
  color = "#B3DDFE"
)

ui <- dashboardPage(
	...,
	body = dashboardBody(
		tags$head(use_waiter()),
		...
	),
	preloader = preloader
)
```

-   Tip: You can preview what spinners look like through the `preview_spinner()` function or by visiting <https://jslth.shinyapps.io/waiter-gallery/>

### Custom styling

-   Shiny apps can look good without a single line of non-R code

-   However, to give an app the final touch, it's hard to get around CSS

-   [CSS](https://en.wikipedia.org/wiki/CSS) (Cascading Style Sheets) is a computer language that is used to style HTML documents

-   HTML provides the containers, CSS styles them

```{r}
browsable(div(
	div(
		"This is an HTML container without styling"
	),
	div(
		"This is an HTML container with CSS styling",
		style = "
			background-color: green;
			color: white;
			border-radius: 10px;
			display: inline-block;
			padding: 5px;
			transform: rotate(5deg);
			margin-top: 15px
		"
	)
))
```

-   CSS is usually defined using classes or IDs

```{r}
browsable(div(
	tags$style(
		"
		#id {
			color: red;
		}
		
		.cls {
			color: green;
		}
		"
	),
	div("This div has an id", id = "id"),
	div("This div has a class", class = "cls")
))
```

-   CSS can either be defined using inline CSS (`tags$style`) or an external CSS file

-   In the Guerry app, I include a CSS file which takes care of some styling:

    -   Add a folder called "www" in your app directory

    -   Add a file called "styles.css" to that folder

    -   Paste the CSS code below

    -   In R, add: `tags$head(includeCSS("www/styles.css"))` to the `dashboardBody`

```{r eval=FALSE}
/* remove white space around maps in boxes */
#exp_box .card-header, #exp_box .card-body {
  padding: 0em;
}

/* create a nicely aligned hover effect for logos */
a.logo {
  text-decoration: none;
  background-color: transparent;
  display: inline-flex;
  margin-left: auto;
  margin-right: auto;
  padding-top: 1em;
  padding-bottom: 1em;
  padding-left: 0.5em;
  padding-right: 0.5em;
}

a.logo:hover {
  background-color: #DEDED8;
}

/* text formatting */
p.par {
  text-indent: 10px; /* indent first line of paragraph */
  text-align: justify; /* justify text alignment */
  text-justify: inter-word;
}

a.par {
  border-bottom: 1px solid black; /* underline links */
}

a.par:hover {
  text-shadow: 0 0 0.01px black; /* highlight links on hover */
  border-bottom: 2px solid black;
}
```

-   Tip: Use the "Inspect" tool in Firefox / Chrome

    -   Interactive visualization of a websites source code

    -   Lets you manipulate single UI elements in real time

    -   Makes you somewhat understand HTML and CSS more in-depth

![The Inspect tool in Firefox](inspect.png)

**Exercise:** What changes after we include the external CSS file? Pinpoint the UI elements that are amended by the CSS file using the Inspect tool
